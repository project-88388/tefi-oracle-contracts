"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _case = require("case");

var _header = require("./header");

var _path = require("path");

var _mkdirp = require("mkdirp");

var w = _interopRequireWildcard(require("@octalmage/wasm-ast-types"));

var t = _interopRequireWildcard(require("@babel/types"));

var _fs = require("fs");

var _generator = _interopRequireDefault(require("@babel/generator"));

var _clean = require("./clean");

var _utils = require("./utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(name, schemas, outPath) {
    var Contract, QueryMsg, ExecuteMsg, Responses, typeHash, Client, Instance, QueryClient, ReadOnlyInstance, body, children, code;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            Contract = (0, _case.pascal)("".concat(name, "Client")) + ".ts";
            QueryMsg = (0, _utils.findQueryMsg)(schemas);
            ExecuteMsg = (0, _utils.findExecuteMsg)(schemas);
            Responses = (0, _utils.findResponses)(schemas);
            _context.next = 6;
            return (0, _utils.findAndParseTypes)(schemas);

          case 6:
            typeHash = _context.sent;
            Client = null;
            Instance = null;
            QueryClient = null;
            ReadOnlyInstance = null;
            body = [];
            body.push(w.importStmt(["LCDClient", "Coins", "Wallet", "MsgExecuteContract", "TxInfo", "WaitTxBroadcastResult"], "@terra-money/terra.js"), w.importStmt(["ConnectedWallet"], "@terra-money/wallet-provider")); // TODO: Convert strings to ast.

            body.push(t.expressionStatement(t.identifier("function isConnectedWallet(x: Wallet | ConnectedWallet): x is ConnectedWallet {\n  return typeof (x as Wallet).key === \"undefined\";\n}")), t.expressionStatement(t.identifier("async function waitForInclusionInBlock(lcd: LCDClient, txHash: string): Promise<TxInfo | undefined> {\n  let res;\n  for (let i = 0; i <= 50; i++) {\n    try {\n      res = await lcd.tx.txInfo(txHash);\n    } catch (error) {\n      // NOOP\n    }\n      \n    if (res) {\n      break;\n    }\n      \n    await new Promise((resolve) => setTimeout(resolve, 500));\n  }\n      \n  return res;\n}"))); // TYPES

            Object.values(typeHash).forEach(function (type) {
              body.push((0, _clean.clean)(type));
            }); // query messages

            if (QueryMsg) {
              QueryClient = (0, _case.pascal)("".concat(name, "QueryClient"));
              ReadOnlyInstance = (0, _case.pascal)("".concat(name, "ReadOnlyInterface"));
              body.push(w.createQueryInterface(ReadOnlyInstance, QueryMsg, Responses));
              body.push(w.createQueryClass(QueryClient, ReadOnlyInstance, QueryMsg, Responses));
            } // execute messages


            if (ExecuteMsg) {
              children = (0, w.getMessageProperties)(ExecuteMsg);

              if (children.length > 0) {
                Client = (0, _case.pascal)("".concat(name, "Client"));
                Instance = (0, _case.pascal)("".concat(name, "Interface"));
                body.push(w.createExecuteInterface(Instance, ReadOnlyInstance, ExecuteMsg));
                body.push(w.createExecuteClass(Client, Instance, QueryClient, ExecuteMsg));
              }
            }

            code = _header.header + (0, _generator["default"])(t.program(body)).code;
            (0, _mkdirp.sync)(outPath);
            (0, _fs.writeFileSync)((0, _path.join)(outPath, Contract), code);

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;