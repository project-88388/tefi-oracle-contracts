"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path_1 = require("path");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const deployment_1 = require("../../lib/deployment");
const flag = tslib_1.__importStar(require("../../lib/flag"));
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
const defaultErrorCheck_1 = tslib_1.__importDefault(require("../../lib/defaultErrorCheck"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
class Build extends command_1.Command {
    async run() {
        const { args } = this.parse(Build);
        // Command execution path.
        const execPath = (0, path_1.join)('contracts', args.contract);
        // Command to be performed.
        const command = async () => {
            await (0, deployment_1.build)({
                contract: args.contract,
            });
        };
        // Message to be displayed upon successful command execution.
        const successMessage = () => {
            TerrainCLI_1.default.success((0, dedent_1.default) `
      The Wasm bytecode for contract "${args.contract}" was successfully generated.\n
      The next step is to optimize the Wasm bytecode:\n
      "terrain contract:optimize ${args.contract}"\n
      "NOTE:" Make sure that "Docker" is installed and running in the background before attempting to optimize the Wasm bytecode.
    `, 'Wasm Bytecode Generated');
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(execPath, command, (0, defaultErrorCheck_1.default)(args.contract), successMessage);
    }
}
Build.description = 'Build wasm bytecode.';
Build.flags = {
    'config-path': flag.configPath,
};
Build.args = [{ name: 'contract', required: true }];
exports.default = Build;
