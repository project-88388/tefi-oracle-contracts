"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const feather_js_1 = require("@terra-money/feather.js");
const config_1 = require("../../config");
const deployment_1 = require("../../lib/deployment");
const signer_1 = require("../../lib/signer");
const flag = tslib_1.__importStar(require("../../lib/flag"));
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
const defaultErrorCheck_1 = tslib_1.__importDefault(require("../../lib/defaultErrorCheck"));
class ContractMigrate extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(ContractMigrate);
        // Command to be performed.
        const command = async () => {
            const connections = (0, config_1.loadConnections)(flags.prefix);
            const config = (0, config_1.loadConfig)();
            const conf = config(flags.network, args.contract);
            const connection = connections(flags.network);
            const lcd = new feather_js_1.LCDClient({ [connection.chainID]: connection });
            const signer = await (0, signer_1.getSigner)({
                network: flags.network,
                signerId: flags.signer,
                keysPath: flags['keys-path'],
                lcd,
                prefix: flags.prefix,
            });
            const codeId = await (0, deployment_1.storeCode)({
                conf,
                noRebuild: flags['no-rebuild'],
                contract: args.contract,
                signer,
                network: flags.network,
                refsPath: flags['refs-path'],
                lcd,
                prefix: flags.prefix,
            });
            (0, deployment_1.migrate)({
                conf,
                signer,
                contract: args.contract,
                codeId,
                network: flags.network,
                instanceId: flags['instance-id'],
                refsPath: flags['refs-path'],
                lcd,
                prefix: flags.prefix,
            });
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(config_1.CONFIG_FILE_NAME, command, (0, defaultErrorCheck_1.default)(args.contract));
    }
}
ContractMigrate.description = 'Migrate the contract.';
ContractMigrate.flags = Object.assign(Object.assign({ 'no-rebuild': flag.noRebuild, 'instance-id': flag.instanceId, 'code-id': flag.codeId }, flag.tx), flag.terrainPaths);
ContractMigrate.args = [{ name: 'contract', required: true }];
exports.default = ContractMigrate;
