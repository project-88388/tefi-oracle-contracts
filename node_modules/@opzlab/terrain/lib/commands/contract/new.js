"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const cli_ux_1 = require("cli-ux");
const template_scaffolding_1 = require("@terra-money/template-scaffolding");
const path_1 = require("path");
const fs_1 = require("fs");
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
class CodeNew extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(CodeNew);
        // Command execution path.
        const execPath = flags.path;
        // Command to be performed.
        const command = async () => {
            cli_ux_1.cli.log(`Generating contract ${args.name}:`);
            cli_ux_1.cli.action.start('- contract');
            await template_scaffolding_1.TemplateScaffolding.from({
                remoteUrl: `https://www.github.com/CosmWasm/cw-template/archive/${flags.commitHash}.zip`,
                subFolder: `cw-template-${flags.commitHash}`,
                localOptions: {
                    folderUrl: (0, path_1.join)(process.cwd(), flags.path, args.name),
                },
                replace: {
                    entries: {
                        'project-name': args.name,
                        crate_name: args.name,
                        authors: flags.authors,
                        ' "now" | date: "%Y" ': `${new Date().getFullYear()}`,
                    },
                },
            });
            cli_ux_1.cli.action.stop();
        };
        // Error check to be performed upon each backtrack iteration.
        const errorCheck = () => {
            if ((0, fs_1.existsSync)((0, path_1.join)(flags.path, args.name))) {
                TerrainCLI_1.default.error((0, dedent_1.default) `Contract "${args.name}" is available in the "${flags.path}" directory.\n
          "TIP:" Use another contract name or specify a different path.`, 'Contract Already Exists');
            }
        };
        // Message to be displayed upon successful command execution.
        const successMessage = () => {
            TerrainCLI_1.default.success((0, dedent_1.default) `
        Contract "${args.name}" was successfully generated.\n
        Now, you can try to deploy it to your preferred Terra network:\n
        "terrain deploy ${args.name} --signer <signer-wallet> --network" "<desired-network>"\n
        "NOTE:" To deploy your contract to the "LocalTerra" network utilizing the preconfigured test wallet "test1" as the signer, use the following command:\n
        "terrain deploy ${args.name}"
      `, 'Contract Generated');
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(execPath, command, errorCheck, successMessage);
    }
}
CodeNew.description = 'Generate new contract.';
CodeNew.examples = [
    '$ terrain code:new awesome_contract',
    '$ terrain code:new awesome_contract --path path/to/dapp',
    '$ terrain code:new awesome_contract --path path/to/dapp --authors "ExampleAuthor<example@email.domain>"',
];
CodeNew.flags = {
    path: command_1.flags.string({
        description: 'path to keep the contracts',
        default: 'contracts',
    }),
    commitHash: command_1.flags.string({
        default: '9fa5b9b38fca4f99239ac28be48a6e1f0a4d30c8',
    }),
    authors: command_1.flags.string({
        default: 'Terra Money <core@terra.money>',
    }),
};
CodeNew.args = [{ name: 'name', required: true }];
exports.default = CodeNew;
