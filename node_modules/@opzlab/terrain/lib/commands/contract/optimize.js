"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const deployment_1 = require("../../lib/deployment");
const config_1 = require("../../config");
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
const defaultErrorCheck_1 = tslib_1.__importDefault(require("../../lib/defaultErrorCheck"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
class Optimize extends command_1.Command {
    async run() {
        const { args } = this.parse(Optimize);
        // Command to be performed.
        const command = async () => {
            const globalConfig = (0, config_1.loadGlobalConfig)();
            await (0, deployment_1.optimize)({
                contract: args.contract,
                useCargoWorkspace: globalConfig.useCargoWorkspace,
            });
        };
        // Message to be displayed upon successful command execution.
        const successMessage = () => {
            TerrainCLI_1.default.success((0, dedent_1.default) `
        The Wasm bytecode for contract "${args.contract}" was successfully optimized.\n
        The next step is to store the Wasm bytecode on a Terra network:\n
        "terrain contract:store ${args.contract} --signer <signer-wallet>" "--network <desired-network>"\n
        "NOTE:" To store your contract on the "LocalTerra" network utilizing the preconfigured test wallet "test1" as the signer, use the following command:\n
        "terrain contract:store ${args.contract}"
      `, 'Wasm Bytecode Optimized');
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(config_1.CONFIG_FILE_NAME, command, (0, defaultErrorCheck_1.default)(args.contract), successMessage);
    }
}
Optimize.description = 'Optimize wasm bytecode.';
Optimize.args = [{ name: 'contract', required: true }];
exports.default = Optimize;
