"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const YAML = tslib_1.__importStar(require("yaml"));
const feather_js_1 = require("@terra-money/feather.js");
const cli_ux_1 = require("cli-ux");
const config_1 = require("../../config");
const signer_1 = require("../../lib/signer");
const flag = tslib_1.__importStar(require("../../lib/flag"));
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
const defaultErrorCheck_1 = tslib_1.__importDefault(require("../../lib/defaultErrorCheck"));
class ContractUpdateAdmin extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(ContractUpdateAdmin);
        // Command execution path.
        // Command to be performed.
        const command = async () => {
            const connections = (0, config_1.loadConnections)(flags.prefix);
            const refs = (0, config_1.loadRefs)(flags['refs-path']);
            const { network } = flags;
            const connection = connections(network);
            const { chainID } = connection;
            const lcd = new feather_js_1.LCDClient({ [chainID]: connection });
            const signer = await (0, signer_1.getSigner)({
                network: flags.network,
                signerId: flags.signer,
                keysPath: flags['keys-path'],
                lcd,
                prefix: flags.prefix,
            });
            const contractAddress = refs[network][chainID][args.contract].contractAddresses[flags['instance-id']];
            cli_ux_1.cli.action.start(`Updating contract admin to: ${args.admin}`);
            const updateAdminTx = await signer.createAndSignTx({
                chainID,
                msgs: [
                    new feather_js_1.MsgUpdateContractAdmin(signer.key.accAddress(flags.prefix), args.admin, contractAddress),
                ],
            });
            const res = await lcd.tx.broadcast(updateAdminTx, chainID);
            cli_ux_1.cli.action.stop();
            if (res) {
                cli_ux_1.cli.log(YAML.stringify(JSON.parse(res.raw_log)));
            }
            else {
                cli_ux_1.cli.error('Transaction not included in block before timeout.');
            }
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(config_1.CONFIG_FILE_NAME, command, (0, defaultErrorCheck_1.default)(args.contract));
    }
}
ContractUpdateAdmin.description = 'Update the admin of a contract.';
ContractUpdateAdmin.flags = Object.assign(Object.assign(Object.assign({}, flag.tx), { 'instance-id': flag.instanceId }), flag.terrainPaths);
ContractUpdateAdmin.args = [
    { name: 'contract', required: true },
    { name: 'admin', required: true },
];
exports.default = ContractUpdateAdmin;
