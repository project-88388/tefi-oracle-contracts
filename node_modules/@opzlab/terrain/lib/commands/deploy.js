"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const feather_js_1 = require("@terra-money/feather.js");
const config_1 = require("../config");
const deployment_1 = require("../lib/deployment");
const signer_1 = require("../lib/signer");
const flag = tslib_1.__importStar(require("../lib/flag"));
const runCommand_1 = tslib_1.__importDefault(require("../lib/runCommand"));
const defaultErrorCheck_1 = tslib_1.__importDefault(require("../lib/defaultErrorCheck"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
class Deploy extends command_1.Command {
    async run() {
        const { args, flags } = this.parse(Deploy);
        const globalConfig = (0, config_1.loadGlobalConfig)();
        let contractAddress;
        let admin;
        const command = async () => {
            const connections = (0, config_1.loadConnections)(flags.prefix);
            const config = (0, config_1.loadConfig)();
            const conf = config(flags.network, args.contract);
            const connection = connections(flags.network);
            const lcd = new feather_js_1.LCDClient({ [connection.chainID]: connection });
            const signer = await (0, signer_1.getSigner)({
                network: flags.network,
                signerId: flags.signer,
                keysPath: flags['keys-path'],
                lcd,
                prefix: flags.prefix,
            });
            if (conf.deployTask) {
                await this.config.runCommand('task:run', [
                    conf.deployTask,
                    '--signer',
                    flags.signer,
                    '--network',
                    flags.network,
                    '--refs-path',
                    flags['refs-path'],
                    '--keys-path',
                    flags['keys-path'],
                ]);
            }
            else {
                // Store sequence to manually increment after code is stored.
                const sequence = await signer.sequence(connection.chainID);
                const codeId = await (0, deployment_1.storeCode)({
                    lcd,
                    conf,
                    signer,
                    noRebuild: flags['no-rebuild'],
                    contract: args.contract,
                    network: flags.network,
                    refsPath: flags['refs-path'],
                    useCargoWorkspace: globalConfig.useCargoWorkspace,
                    prefix: flags.prefix,
                    memo: flags.memo,
                });
                // pause for account sequence to update.
                // eslint-disable-next-line no-promise-executor-return
                await new Promise((r) => setTimeout(r, 1000));
                admin = flags['admin-address']
                    ? flags['admin-address']
                    : signer.key.accAddress(flags.prefix);
                contractAddress = await (0, deployment_1.instantiate)({
                    conf,
                    signer,
                    admin,
                    sequence: 1 + sequence,
                    contract: args.contract,
                    codeId,
                    network: flags.network,
                    instanceId: flags['instance-id'],
                    refsPath: flags['refs-path'],
                    lcd,
                    prefix: flags.prefix,
                    memo: flags.memo,
                });
            }
            if (!flags['no-sync']) {
                await this.config.runCommand('sync-refs', [
                    '--refs-path',
                    flags['refs-path'],
                    '--dest',
                    flags['frontend-refs-path'],
                ]);
            }
        };
        // Message to be displayed upon successful command execution.
        const successMessage = () => {
            TerrainCLI_1.default.success((0, dedent_1.default) `
        Contract "${args.contract}" has been successfully deployed on "${flags.network}".\n
        Contract Address: "${contractAddress}"\n
        Administrator: "${admin}"
      `, 'Contract Deployed');
        };
        await (0, runCommand_1.default)(config_1.CONFIG_FILE_NAME, command, (0, defaultErrorCheck_1.default)(args.contract), successMessage);
    }
}
Deploy.description = 'Build wasm bytecode, store code on chain and instantiate.';
Deploy.flags = Object.assign(Object.assign({ memo: flag.memo, 'no-rebuild': flag.noRebuild, 'instance-id': flag.instanceId, 'frontend-refs-path': flag.frontendRefsPath, 'admin-address': command_1.flags.string({
        description: 'set custom address as contract admin to allow migration.',
    }), 'no-sync': command_1.flags.string({
        description: "don't attempt to sync contract refs to frontend.",
    }) }, flag.tx), flag.terrainPaths);
Deploy.args = [{ name: 'contract', required: true }];
exports.default = Deploy;
