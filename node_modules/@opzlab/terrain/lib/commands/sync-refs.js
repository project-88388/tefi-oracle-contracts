"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const path = tslib_1.__importStar(require("path"));
const cli_ux_1 = require("cli-ux");
const fs_1 = require("fs");
const fs = tslib_1.__importStar(require("fs-extra"));
const flag_1 = require("../lib/flag");
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
const runCommand_1 = tslib_1.__importDefault(require("../lib/runCommand"));
class SyncRefs extends command_1.Command {
    async run() {
        const { flags } = this.parse(SyncRefs);
        // Command execution path.
        const execPath = flags.dest;
        // Command to be performed.
        const command = async () => {
            // Append "refs.terrain.json" to flags.dest path if file unavailable.
            // The fs.copyFileSync command requires the full file path.
            const destFullPath = flags.dest.endsWith('refs.terrain.json')
                ? flags.dest
                : path.join(flags.dest, 'refs.terrain.json');
            cli_ux_1.cli.action.start(`Syncing refs from '${flags['refs-path']}' to '${destFullPath}'`);
            fs.copyFileSync(flags['refs-path'], destFullPath);
            cli_ux_1.cli.action.stop();
        };
        // Error check to be performed upon each backtrack iteration.
        const errorCheck = () => {
            if ((0, fs_1.existsSync)(execPath) && !(0, fs_1.existsSync)('refs.terrain.json')) {
                TerrainCLI_1.default.error('The "refs.terrain.json" file was not found in the project root directory.', 'Failed to Sync Refs');
            }
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(execPath, command, errorCheck);
    }
}
SyncRefs.description = 'Sync configuration with frontend app.';
SyncRefs.flags = {
    'refs-path': flag_1.refsPath,
    dest: flag_1.frontendRefsPath,
};
exports.default = SyncRefs;
