"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const runCommand_1 = tslib_1.__importDefault(require("../../lib/runCommand"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
class TaskNew extends command_1.Command {
    async run() {
        const { args } = this.parse(TaskNew);
        const execPath = 'tasks';
        const newTaskPath = (0, path_1.join)(execPath, `${args.task}.ts`);
        const command = async () => {
            cli_ux_1.cli.action.start(`Creating task: ${args.task}`);
            await (0, fs_extra_1.writeFile)(newTaskPath, (0, dedent_1.default) `
          import { Env, task } from "@terra-money/terrain";

          task(async (env:Env) => {
            console.log(env);
            console.log("Template")
          });\n
        `);
            cli_ux_1.cli.action.stop();
        };
        // Error check to be performed upon each backtrack iteration.
        const errorCheck = () => {
            if ((0, fs_extra_1.existsSync)(newTaskPath)) {
                TerrainCLI_1.default.error(`A task with the name "${args.task}" already exists in the "tasks" directory. Try using another name for the task.`, 'Task Already Exists');
            }
        };
        // Attempt to execute command while backtracking through file tree.
        await (0, runCommand_1.default)(execPath, command, errorCheck);
    }
}
TaskNew.description = 'Create a new task.';
TaskNew.args = [{ name: 'task' }];
exports.default = TaskNew;
