"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const feather_js_1 = require("@terra-money/feather.js");
const config_1 = require("../config");
const flag = tslib_1.__importStar(require("../lib/flag"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
const signer_1 = require("../lib/signer");
class Tx extends command_1.Command {
    async run() {
        var _a, _b;
        const { args, flags } = this.parse(Tx);
        const prefix = feather_js_1.AccAddress.getPrefix(args.contract);
        const connections = (0, config_1.loadConnections)(prefix);
        const connection = connections(flags.network);
        const { chainID } = connection;
        const lcd = new feather_js_1.LCDClient({ [chainID]: connection });
        const signer = await (0, signer_1.getSigner)({
            network: flags.network,
            signerId: flags.signer,
            keysPath: flags['keys-path'],
            lcd,
            prefix: flags.prefix,
        });
        try {
            const accAddress = signer.key.accAddress(prefix);
            const msg = new feather_js_1.MsgExecuteContract(accAddress, args.contract, JSON.parse(args.msg));
            const execMsg = await signer.createAndSignTx({ chainID, msgs: [msg] });
            const res = await lcd.tx.broadcast(execMsg, chainID);
            TerrainCLI_1.default.success(`Tx hash:\n\n ${res.txhash}`);
        }
        catch (err) {
            let errMsg = 'There was an error with your query. \n\n';
            if (err instanceof SyntaxError) {
                errMsg += ('Make sure you have single quotes around your query and double quotes around query keys.');
            }
            else {
                errMsg += (JSON.stringify(((_b = (_a = err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) || err.message || err, null, 2));
            }
            TerrainCLI_1.default.error(errMsg);
        }
    }
}
Tx.description = 'Execute tx on the interchain';
Tx.examples = [
    '$ terrain tx terra1..fx9fs \'{"increment": {}}\'',
    '$ terrain tx juno1..af00x \'{"reset": {"count": 0}}\' --network testnet',
];
Tx.flags = Object.assign(Object.assign({}, flag.tx), flag.terrainPaths);
Tx.args = [{
        name: 'contract', required: true, description: 'Contract address', type: 'string',
    },
    {
        name: 'msg', required: true, description: 'Tx msg to be executed in JSON format', type: 'string',
    }];
exports.default = Tx;
