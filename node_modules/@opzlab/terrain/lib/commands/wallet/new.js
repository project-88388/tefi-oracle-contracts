"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const feather_js_1 = require("@terra-money/feather.js");
const fs = tslib_1.__importStar(require("fs"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../../TerrainCLI"));
class WalletNew extends command_1.Command {
    async run() {
        const { flags } = this.parse(WalletNew);
        this.log('Generating new terra-wallet');
        const mk = new feather_js_1.MnemonicKey({
            index: flags.index,
        });
        if (flags.outfile) {
            if (fs.existsSync(flags.outfile)) {
                this.error(`outfile: '${flags.outfile}' already exists, abort`);
            }
            this.log(`saving mnemonic to '${flags.outfile}'`);
            fs.writeFileSync(flags.outfile, mk.mnemonic);
        }
        TerrainCLI_1.default.success((0, dedent_1.default) `
      Your wallet has been successfully generated. 
      ${flags.outfile ? `You may find your mnemonic, or seed phrase, in the "${flags.outfile}" file.` : `\n Mnemonic: "${mk.mnemonic}"`}\n
      Wallet Address: "${mk.accAddress('terra')}"\n
      "WARNING:" Anyone who gains access to your seed phrase can access the contents of the corresponding wallet. Be cognizant of the fact that there is no recourse for theft of a seed phrase.`, 'Wallet Successfully Generated');
    }
}
WalletNew.description = 'Generate a new wallet to use for signing contracts.';
WalletNew.flags = {
    outfile: command_1.flags.string({
        description: 'absolute path to store the mnemonic key to. If omitted, output to stdout',
    }),
    index: command_1.flags.integer({
        description: 'key index to use, default value is 0',
        default: 0,
    }),
};
exports.default = WalletNew;
