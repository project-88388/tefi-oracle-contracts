/// <reference types="node" />
import { LCDClientConfig, RawKey } from '@terra-money/feather.js';
type Fee = {
    gasLimit: number;
    amount: {
        [coin: string]: number;
    };
};
export type InstantiateMessage = Record<string, any>;
export type ContractConfig = {
    /**
     * @deprecated The property should not be used
     */
    store?: {
        fee: Fee;
    };
    instantiation: {
        /**
         * @deprecated The property should not be used
         */
        fee?: Fee;
        instantiateMsg: InstantiateMessage;
    };
    deployTask?: string;
};
type Config = {
    base: ContractConfig;
    contracts?: {
        [contract: string]: ContractConfig;
    };
};
type GlobalConfig = {
    base: ContractConfig;
    useCargoWorkspace?: boolean;
    contracts?: {
        [contract: string]: ContractConfig;
    };
};
export type ContractRef = {
    [contractName: string]: {
        codeId: number;
        contractAddresses: {
            [key: string]: string;
        };
    };
};
export type Refs = {
    [network: string]: {
        [chainID: string]: ContractRef;
    };
};
export type Network = {
    [network: string]: {
        [chainID: string]: LCDClientConfig;
    };
};
export declare const CONFIG_FILE_NAME = "config.terrain.json";
export declare const GLOBAL_CONFIG: {
    global: {
        useCargoWorkspace: boolean;
        prefix: string;
        network: string;
        base: {
            instantiation: {
                instantiateMsg: {
                    count: number;
                };
            };
        };
    };
};
export declare const connection: (networks: Network, prefix: string) => (network: string) => LCDClientConfig;
export declare const config: (allConfig: {
    [network: string]: Partial<Config>;
    global: GlobalConfig;
}) => (network: string, contract: string) => ContractConfig;
export declare const saveConfig: (valuePath: string[], value: string | Record<string, any>, path: string) => void;
export declare const readConfig: () => any;
export declare const loadConnections: (prefix: string) => (network: string) => LCDClientConfig;
export declare const loadConfig: () => (network: string, contract: string) => ContractConfig;
export declare const loadGlobalConfig: () => {
    useCargoWorkspace: any;
    prefix: any;
    network: any;
};
export declare const loadKeys: (path: string) => {
    [keyName: string]: RawKey;
};
export declare const loadRefs: (path: string) => Refs;
export declare const saveRefs: (refs: Refs, path: string) => void;
export {};
