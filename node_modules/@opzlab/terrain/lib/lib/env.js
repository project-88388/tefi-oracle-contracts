"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnv = void 0;
const tslib_1 = require("tslib");
const feather_js_1 = require("@terra-money/feather.js");
const R = tslib_1.__importStar(require("ramda"));
const config_1 = require("../config");
const deployment_1 = require("./deployment");
const LCDClientExtra_1 = require("./LCDClientExtra");
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
const getEnv = (keysPath, refsPath, network, prefix, defaultWallet) => {
    const connections = (0, config_1.loadConnections)(prefix);
    const config = (0, config_1.loadConfig)();
    const globalConfig = (0, config_1.loadGlobalConfig)();
    const keys = (0, config_1.loadKeys)(keysPath);
    const refs = (0, config_1.loadRefs)(refsPath)[network];
    const connection = connections(network);
    const { chainID } = connection;
    if (!refs) {
        TerrainCLI_1.default.error(`No contracts refs found for network "${network}" and chainID "${chainID}"`);
        process.exit();
    }
    const lcd = new LCDClientExtra_1.LCDClientExtra({ [chainID]: connection }, chainID, prefix, refs);
    const userDefinedWallets = R.map((k) => new feather_js_1.Wallet(lcd, k), keys);
    const wallets = Object.assign(Object.assign({}, new feather_js_1.LocalTerra().wallets), userDefinedWallets);
    if (!(defaultWallet in wallets)) {
        throw new Error('default wallet not found');
    }
    return {
        config: (contract) => config(network, contract),
        refs,
        wallets,
        defaultWallet: wallets[defaultWallet],
        client: lcd,
        // Enable tasks to deploy code.
        deploy: {
            build: (contract) => (0, deployment_1.build)({
                contract,
            }),
            optimize: (contract) => (0, deployment_1.optimize)({
                contract,
                useCargoWorkspace: globalConfig.useCargoWorkspace,
            }),
            storeCode: (contract, signer, options) => (0, deployment_1.storeCode)({
                signer,
                contract,
                network,
                refsPath,
                lcd,
                conf: config(network, contract),
                noRebuild: typeof (options === null || options === void 0 ? void 0 : options.noRebuild) === 'undefined' ? false : options.noRebuild,
                useCargoWorkspace: globalConfig.useCargoWorkspace,
                prefix,
            }),
            instantiate: (contract, signer, options) => (0, deployment_1.instantiate)({
                instanceId: options === null || options === void 0 ? void 0 : options.instanceId,
                codeId: options === null || options === void 0 ? void 0 : options.codeId,
                signer,
                contract,
                network,
                refsPath,
                lcd,
                prefix,
                admin: options === null || options === void 0 ? void 0 : options.admin,
                // Use the instantiation message passed instead of default.
                conf: (options === null || options === void 0 ? void 0 : options.init)
                    ? { instantiation: { instantiateMsg: options.init } }
                    : config(network, contract),
            }),
        },
    };
};
exports.getEnv = getEnv;
