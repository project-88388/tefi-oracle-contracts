"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = require("fs");
const path = tslib_1.__importStar(require("path"));
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
async function runCommand(execPath, command, errorCheck, successMessage) {
    // Initialize terrainAppRootPath directory to current working directory.
    let terrainAppRootPath = process.cwd();
    // Backtrack, up to 4 times, through file tree to find execPath.
    for (let stepBack = 0; stepBack < 5; stepBack += 1) {
        // User specified error check to execute upon each iteration.
        // eslint-disable-next-line no-await-in-loop
        await errorCheck();
        // If execPath available, execute command.
        if ((0, fs_1.existsSync)(execPath)) {
            // eslint-disable-next-line no-await-in-loop
            await command();
            return successMessage === null || successMessage === void 0 ? void 0 : successMessage();
        }
        // If execPath does not exist in current directory, step back one directory.
        terrainAppRootPath = path.join(terrainAppRootPath, '..');
        process.chdir(terrainAppRootPath);
    }
    // If terrainAppRootPath not found after stepping back 4 directories,
    // tell user to run command in a terrain project directory.
    return TerrainCLI_1.default.error(`Command execution path "${execPath}" not found. Please ensure that you are in a terrain project directory.`, 'Execution Path Not Found');
}
exports.default = runCommand;
