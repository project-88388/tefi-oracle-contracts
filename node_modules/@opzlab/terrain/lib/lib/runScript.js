"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const childProcess = tslib_1.__importStar(require("child_process"));
const runScript = (scriptPath, env, callback) => {
    // keep track of whether callback has been invoked to prevent multiple invocations
    let invoked = false;
    const cProcess = childProcess.fork(scriptPath, {
        env: Object.assign(Object.assign(Object.assign({}, process.env), env), { TS_NODE_COMPILER_OPTIONS: '{"module":"commonjs", "esModuleInterop": true, "moduleResolution": "node"}' }),
        execArgv: [
            '--no-warnings',
            '--loader',
            'ts-node/esm/transpile-only',
        ],
    });
    // listen for errors as they may prevent the exit event from firing
    cProcess.on('error', (err) => {
        if (invoked)
            return;
        invoked = true;
        callback(err);
    });
    // execute the callback once the process has finished running
    cProcess.on('exit', (code) => {
        if (invoked)
            return;
        invoked = true;
        const err = code === 0 ? undefined : new Error(`exit code ${code}`);
        callback(err);
    });
};
exports.default = runScript;
