"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSigner = void 0;
const tslib_1 = require("tslib");
const feather_js_1 = require("@terra-money/feather.js");
const hyperlinker_1 = tslib_1.__importDefault(require("hyperlinker"));
const cli_ux_1 = require("cli-ux");
const dedent_1 = tslib_1.__importDefault(require("dedent"));
const path = tslib_1.__importStar(require("path"));
const config_1 = require("../config");
const util_1 = require("../util");
const TerrainCLI_1 = tslib_1.__importDefault(require("../TerrainCLI"));
const getSigner = async ({ network, signerId, keysPath, lcd, prefix, }) => {
    const localterra = new feather_js_1.LocalTerra();
    if ((0, util_1.isLocalNetwork)(network)
        && Object.prototype.hasOwnProperty.call(localterra.wallets, signerId)) {
        // Attempt to request sequence from LocalTerra.
        // Alert user if LocalTerra request fails.
        try {
            const signer = localterra.wallets[signerId];
            const connections = (0, config_1.loadConnections)(prefix);
            const { chainID } = connections(network);
            await signer.sequence(chainID);
            cli_ux_1.cli.log(`Using pre-baked '${signerId}' wallet on LocalTerra as signer...`);
            return signer;
        }
        catch (error) {
            TerrainCLI_1.default.error((0, dedent_1.default) `
        "LocalTerra" is currently not running.\n
        If you would like to use this local testing environment, make sure to install it and keep it running in the background when executing "Terrain" commands:\n
        "${(0, hyperlinker_1.default)('https://github.com/terra-money/localterra', 'https://github.com/terra-money/localterra#readme')}"
        `, 'Network Unavailable');
        }
    }
    // If using testnet or mainnet, evaluate if key of provided signer
    // is available in keysPath. If so, return signer Wallet.
    const keys = (0, config_1.loadKeys)(path.join(process.cwd(), keysPath));
    if (!keys[signerId]) {
        TerrainCLI_1.default.error(`The key corresponding to "${signerId}" does not exist in "${keysPath}".`, 'Signer Not Found');
    }
    return new feather_js_1.Wallet(lcd, keys[signerId]);
};
exports.getSigner = getSigner;
