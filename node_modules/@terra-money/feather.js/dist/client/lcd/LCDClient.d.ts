import { APIRequester } from './APIRequester';
import { AuthAPI, BankAPI, DistributionAPI, FeeGrantAPI, GovAPI, MintAPI, AuthzAPI, SlashingAPI, StakingAPI, TendermintAPI, TxAPI, WasmAPI, IbcTransferAPI, IbcAPI } from './api';
import { LCDUtils } from './LCDUtils';
import { Wallet } from './Wallet';
import { Numeric } from '../../core/numeric';
import { Coins } from '../../core/Coins';
import { Key } from '../../key';
import { AllianceAPI } from './api/AllianceAPI';
export interface LCDClientConfig {
    /**
     * The base URL to which LCD requests will be made.
     */
    lcd: string;
    /**
     * Chain ID of the blockchain to connect to.
     */
    chainID: string;
    /**
     * Coins representing the default gas prices to use for fee estimation.
     */
    gasPrices: Coins.Input;
    /**
     * Number presenting the default gas adjustment value to use for fee estimation.
     */
    gasAdjustment: Numeric.Input;
    /**
     * Bech32 prefix for wallet and contract addresses.
     */
    prefix: string;
    isClassic?: boolean;
}
/**
 * An object repesenting a connection to a terrad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient } from '@terra-money/feather.js';
 *
 * const lcd = LCDClient.fromDefaultConfig('mainnet');
 *
 * const balance = await lcd.bank.balance('terra1...'):
 * console.log(balance);
 * ```
 */
export declare class LCDClient {
    config: Record<string, LCDClientConfig>;
    apiRequesters: Record<string, APIRequester>;
    alliance: AllianceAPI;
    auth: AuthAPI;
    bank: BankAPI;
    distribution: DistributionAPI;
    feeGrant: FeeGrantAPI;
    gov: GovAPI;
    mint: MintAPI;
    authz: AuthzAPI;
    slashing: SlashingAPI;
    staking: StakingAPI;
    tendermint: TendermintAPI;
    wasm: WasmAPI;
    tx: TxAPI;
    ibc: IbcAPI;
    ibcTransfer: IbcTransferAPI;
    utils: LCDUtils;
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param chains network configuration
     *
     */
    constructor(chains: Record<string, LCDClientConfig>);
    static fromDefaultConfig(network: 'mainnet' | 'testnet'): LCDClient;
    /** Creates a new wallet with the Key. */
    wallet(key: Key): Wallet;
}
