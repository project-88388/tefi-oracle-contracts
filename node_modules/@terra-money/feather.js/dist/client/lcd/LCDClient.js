"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LCDClient = void 0;
var APIRequester_1 = require("./APIRequester");
var api_1 = require("./api");
var LCDUtils_1 = require("./LCDUtils");
var Wallet_1 = require("./Wallet");
var AllianceAPI_1 = require("./api/AllianceAPI");
var DEFAULT_NETWORK_CONFIG = {
    mainnet: {
        'phoenix-1': {
            chainID: 'phoenix-1',
            lcd: 'https://phoenix-lcd.terra.dev',
            gasAdjustment: 1.75,
            gasPrices: { uluna: 0.015 },
            prefix: 'terra',
        },
    },
    testnet: {
        'pisco-1': {
            chainID: 'pisco-1',
            lcd: 'https://pisco-lcd.terra.dev',
            gasAdjustment: 1.75,
            gasPrices: { uluna: 0.015 },
            prefix: 'terra',
        },
    },
};
/**
 * An object repesenting a connection to a terrad node running the Lite Client Daemon (LCD)
 * server, a REST server providing access to a node.
 *
 * ### Example
 *
 * ```ts
 * import { LCDClient } from '@terra-money/feather.js';
 *
 * const lcd = LCDClient.fromDefaultConfig('mainnet');
 *
 * const balance = await lcd.bank.balance('terra1...'):
 * console.log(balance);
 * ```
 */
var LCDClient = /** @class */ (function () {
    /**
     * Creates a new LCD client with the specified configuration.
     *
     * @param chains network configuration
     *
     */
    function LCDClient(chains) {
        // check for duplicate prefixes
        var prefixes = Object.values(chains).map(function (c) { return c.prefix; });
        if (new Set(prefixes).size !== prefixes.length) {
            throw new Error('Every chain must have an unique bech32 prefix');
        }
        this.config = chains;
        this.apiRequesters = Object.keys(chains).reduce(function (result, chainID) {
            result[chainID] = new APIRequester_1.APIRequester(chains[chainID].lcd);
            return result;
        }, {});
        // instantiate APIs
        this.alliance = new AllianceAPI_1.AllianceAPI(this);
        this.auth = new api_1.AuthAPI(this);
        this.bank = new api_1.BankAPI(this);
        this.distribution = new api_1.DistributionAPI(this);
        this.feeGrant = new api_1.FeeGrantAPI(this);
        this.gov = new api_1.GovAPI(this);
        this.mint = new api_1.MintAPI(this);
        this.authz = new api_1.AuthzAPI(this);
        this.slashing = new api_1.SlashingAPI(this);
        this.staking = new api_1.StakingAPI(this);
        this.tendermint = new api_1.TendermintAPI(this);
        this.wasm = new api_1.WasmAPI(this);
        this.ibc = new api_1.IbcAPI(this);
        this.ibcTransfer = new api_1.IbcTransferAPI(this);
        this.tx = new api_1.TxAPI(this);
        this.utils = new LCDUtils_1.LCDUtils(this);
    }
    LCDClient.fromDefaultConfig = function (network) {
        // TODO: fetch config from assets.terra.money
        return new LCDClient(DEFAULT_NETWORK_CONFIG[network]);
    };
    /** Creates a new wallet with the Key. */
    LCDClient.prototype.wallet = function (key) {
        return new Wallet_1.Wallet(this, key);
    };
    return LCDClient;
}());
exports.LCDClient = LCDClient;
//# sourceMappingURL=LCDClient.js.map