"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AllianceAPI = void 0;
var BaseAPI_1 = require("./BaseAPI");
var AllianceAPI = /** @class */ (function (_super) {
    __extends(AllianceAPI, _super);
    function AllianceAPI(lcd) {
        var _this = _super.call(this, lcd.apiRequesters, lcd.config) || this;
        _this.lcd = lcd;
        return _this;
    }
    /**
     * Query all available alliances with pagination
     *
     * @tags Query
     * @name alliances
     * @summary Query paginated alliances
     * @request GET:/terra/alliances
     */
    AllianceAPI.prototype.alliances = function (chainID, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromChainID(chainID).get("/terra/alliances", params)];
            });
        });
    };
    /**
     * Query all paginated alliance delegations
     *
     * @tags Query
     * @name alliancesDelegations
     * @summary Query all paginated alliance delegations
     * @request GET:/terra/alliances/delegations
     */
    AllianceAPI.prototype.alliancesDelegations = function (chainID, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromChainID(chainID).get("/terra/alliances/delegations", params)];
            });
        });
    };
    /**
     * Query all paginated alliance delegations for a specific delegator address
     *
     * @tags Query
     * @name alliancesDelegation
     * @summary Query all paginated alliance delegations
     * @request GET:/terra/alliances/delegations/{delegatorAddr}
     */
    AllianceAPI.prototype.alliancesDelegation = function (delegatorAddr, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromAddress(delegatorAddr).get("/terra/alliances/delegations/".concat(delegatorAddr), params)];
            });
        });
    };
    /**
     * Query all paginated alliance delegations for a delegator addr and validator_addr
     *
     * @tags Query
     * @name alliancesDelegationByValidator
     * @summary Query all paginated alliance delegations for a delegator addr and validator_addr
     * @request GET:/terra/alliances/delegations/{delegator_addr}/{validator_addr}
     */
    AllianceAPI.prototype.alliancesDelegationByValidator = function (delegatorAddr, validatorAddr, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromAddress(delegatorAddr).get("/terra/alliances/delegations/".concat(delegatorAddr, "/").concat(validatorAddr), params)];
            });
        });
    };
    /**
     * Query a delegation to an alliance by delegator addr, validator_addr and denom
     * the denom can be both the ibc prefixed denom or any other alliance denom.
     *
     * @tags Query
     * @name allianceDelegation
     * @summary Query a delegation to an alliance by delegator addr, validator_addr and denom
     * @request GET:/terra/alliances/delegations/{delegator_addr}/{validator_addr}/{denom}
     */
    AllianceAPI.prototype.allianceDelegation = function (delegatorAddr, validatorAddr, denom, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromAddress(delegatorAddr).get("/terra/alliances/delegations/".concat(delegatorAddr, "/").concat(validatorAddr, "/").concat(denom), params)];
            });
        });
    };
    /**
     * Query the alliance by denom where denom can be either the
     * ibc prefixed hash or any other native asset alliance denom
     *
     * @tags Query
     * @name alliance
     * @summary Query the alliance by denom
     * @request GET:/terra/alliances/{denom}
     */
    AllianceAPI.prototype.alliance = function (chainId, denom, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromChainID(chainId).get("/terra/alliances/".concat(denom), params)];
            });
        });
    };
    /**
     * Query the alliance module params
     *
     * @tags Query
     * @name params
     * @summary Query the alliance by denom
     * @request GET:/terra/alliances/params
     */
    AllianceAPI.prototype.params = function (chainId, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromChainID(chainId).get("/terra/alliances/params", params)];
            });
        });
    };
    /**
     * Query for rewards by delegator addr, validator_addr and denom
     * where denom can be either the ibc prefixed hash or any other native asset alliance denom
     *
     * @tags Query
     * @name delegatorRewards
     * @summary Query for rewards by delegator addr, validator_addr and denom
     * @request GET:/terra/alliances/params
     */
    AllianceAPI.prototype.delegatorRewards = function (delegatorAddr, validatorAddr, denom, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromAddress(delegatorAddr).get("/terra/alliances/rewards/".concat(delegatorAddr, "/").concat(validatorAddr, "/").concat(denom), params)];
            });
        });
    };
    /**
     * Query all paginated alliance validators
     *
     * @tags Query
     * @name alliancesValidators
     * @summary Query all paginated alliance validators
     * @request GET:/terra/alliances/validators/{validatorAddr}
     */
    AllianceAPI.prototype.alliancesValidators = function (chainID, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromChainID(chainID).get("/terra/alliances/validators", params)];
            });
        });
    };
    /**
     * Query for rewards by delegator addr, validator_addr and denom
     * where denom can be either the ibc prefixed hash or any other native asset alliance denom
     *
     * @tags Query
     * @name allianceValidators
     * @summary Query alliance validator
     * @request GET:/terra/alliances/validators/{validatorAddr}
     */
    AllianceAPI.prototype.allianceValidator = function (validatorAddr, params) {
        if (params === void 0) { params = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getReqFromAddress(validatorAddr).get("/terra/alliances/validators/".concat(validatorAddr), params)];
            });
        });
    };
    return AllianceAPI;
}(BaseAPI_1.BaseAPI));
exports.AllianceAPI = AllianceAPI;
//# sourceMappingURL=AllianceAPI.js.map