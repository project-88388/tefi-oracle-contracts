import { JSONSerializable } from '../../../util/json';
import { Any } from '@terra-money/legacy.proto/google/protobuf/any';
import { MsgUpdateAllianceProposal as MsgUpdateAllianceProposal_pb } from '@terra-money/terra.proto/alliance/gov';
import { Duration } from '@terra-money/terra.proto/google/protobuf/duration';
/**
 *  MsgUpdateAllianceProposal is gov content type to create a new alliance
 */
export declare class MsgUpdateAllianceProposal extends JSONSerializable<MsgUpdateAllianceProposal.Amino, MsgUpdateAllianceProposal.Data, MsgUpdateAllianceProposal.Proto> {
    title: string;
    description: string;
    denom: string;
    rewardWeight: string;
    takeRate: string;
    rewardChangeRate: string;
    rewardChangeInterval?: Duration | undefined;
    /**
     * @description Update an existent alliance using the gov module
     * @param title of the proposal
     * @param description of the proposal
     * @param denom of the asset. It could either be a native token or an IBC token
     * @param rewardWeight specifies the ratio of rewards that will be given to each alliance asset it does not need to sum to 1. rate = weight / total_weight Native asset is always assumed to have a weight of 1.
     * @param takeRate positive take rate is used for liquid staking derivatives. It defines an annualized reward rate that will be redirected to the distribution rewards pool
     * @param rewardChangeRate how much the reward weight will change every rewardChangeInterval
     * @param rewardChangeInterval how often the reward weight will change
     */
    constructor(title: string, description: string, denom: string, rewardWeight: string, takeRate: string, rewardChangeRate: string, rewardChangeInterval?: Duration | undefined);
    static fromAmino(data: MsgUpdateAllianceProposal.Amino, _?: boolean): MsgUpdateAllianceProposal;
    toAmino(_?: boolean): MsgUpdateAllianceProposal.Amino;
    static fromData(data: MsgUpdateAllianceProposal.Data, _?: boolean): MsgUpdateAllianceProposal;
    toData(_?: boolean): MsgUpdateAllianceProposal.Data;
    static fromProto(proto: MsgUpdateAllianceProposal.Proto, _?: boolean): MsgUpdateAllianceProposal;
    toProto(_?: boolean): MsgUpdateAllianceProposal.Proto;
    packAny(_?: boolean): Any;
    static unpackAny(msgAny: Any, _?: boolean): MsgUpdateAllianceProposal;
}
export declare namespace MsgUpdateAllianceProposal {
    interface Amino {
        type: 'alliance/MsgUpdateAllianceProposal';
        title: string;
        description: string;
        denom: string;
        rewardWeight: string;
        takeRate: string;
        rewardChangeRate: string;
        rewardChangeInterval?: Duration;
    }
    interface Data {
        '@type': '/alliance.alliance.MsgUpdateAllianceProposal';
        title: string;
        description: string;
        denom: string;
        rewardWeight: string;
        takeRate: string;
        rewardChangeRate: string;
        rewardChangeInterval?: Duration;
    }
    type Proto = MsgUpdateAllianceProposal_pb;
}
