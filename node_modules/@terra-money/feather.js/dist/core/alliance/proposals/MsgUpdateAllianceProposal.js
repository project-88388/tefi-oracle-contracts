"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgUpdateAllianceProposal = void 0;
var json_1 = require("../../../util/json");
var any_1 = require("@terra-money/legacy.proto/google/protobuf/any");
var gov_1 = require("@terra-money/terra.proto/alliance/gov");
/**
 *  MsgUpdateAllianceProposal is gov content type to create a new alliance
 */
var MsgUpdateAllianceProposal = /** @class */ (function (_super) {
    __extends(MsgUpdateAllianceProposal, _super);
    /**
     * @description Update an existent alliance using the gov module
     * @param title of the proposal
     * @param description of the proposal
     * @param denom of the asset. It could either be a native token or an IBC token
     * @param rewardWeight specifies the ratio of rewards that will be given to each alliance asset it does not need to sum to 1. rate = weight / total_weight Native asset is always assumed to have a weight of 1.
     * @param takeRate positive take rate is used for liquid staking derivatives. It defines an annualized reward rate that will be redirected to the distribution rewards pool
     * @param rewardChangeRate how much the reward weight will change every rewardChangeInterval
     * @param rewardChangeInterval how often the reward weight will change
     */
    function MsgUpdateAllianceProposal(title, description, denom, rewardWeight, takeRate, rewardChangeRate, rewardChangeInterval) {
        var _this = _super.call(this) || this;
        _this.title = title;
        _this.description = description;
        _this.denom = denom;
        _this.rewardWeight = rewardWeight;
        _this.takeRate = takeRate;
        _this.rewardChangeRate = rewardChangeRate;
        _this.rewardChangeInterval = rewardChangeInterval;
        return _this;
    }
    MsgUpdateAllianceProposal.fromAmino = function (data, _) {
        _;
        data;
        throw new Error('not implemented');
    };
    MsgUpdateAllianceProposal.prototype.toAmino = function (_) {
        _;
        throw new Error('not implemented');
    };
    MsgUpdateAllianceProposal.fromData = function (data, _) {
        _;
        var title = data.title, description = data.description, denom = data.denom, rewardWeight = data.rewardWeight, takeRate = data.takeRate, rewardChangeRate = data.rewardChangeRate, rewardChangeInterval = data.rewardChangeInterval;
        return new MsgUpdateAllianceProposal(title, description, denom, rewardWeight, takeRate, rewardChangeRate, rewardChangeInterval);
    };
    MsgUpdateAllianceProposal.prototype.toData = function (_) {
        _;
        var _a = this, title = _a.title, description = _a.description, denom = _a.denom, rewardWeight = _a.rewardWeight, takeRate = _a.takeRate, rewardChangeRate = _a.rewardChangeRate, rewardChangeInterval = _a.rewardChangeInterval;
        return {
            '@type': '/alliance.alliance.MsgUpdateAllianceProposal',
            title: title,
            description: description,
            denom: denom,
            rewardWeight: rewardWeight,
            takeRate: takeRate,
            rewardChangeRate: rewardChangeRate,
            rewardChangeInterval: rewardChangeInterval,
        };
    };
    MsgUpdateAllianceProposal.fromProto = function (proto, _) {
        _;
        return new MsgUpdateAllianceProposal(proto.title, proto.description, proto.denom, proto.rewardWeight, proto.takeRate, proto.rewardChangeRate, proto.rewardChangeInterval);
    };
    MsgUpdateAllianceProposal.prototype.toProto = function (_) {
        _;
        var _a = this, title = _a.title, description = _a.description, denom = _a.denom, rewardWeight = _a.rewardWeight, takeRate = _a.takeRate, rewardChangeRate = _a.rewardChangeRate, rewardChangeInterval = _a.rewardChangeInterval;
        return gov_1.MsgUpdateAllianceProposal.fromPartial({
            title: title,
            description: description,
            denom: denom,
            rewardWeight: rewardWeight,
            takeRate: takeRate,
            rewardChangeRate: rewardChangeRate,
            rewardChangeInterval: rewardChangeInterval,
        });
    };
    MsgUpdateAllianceProposal.prototype.packAny = function (_) {
        _;
        return any_1.Any.fromPartial({
            typeUrl: '/alliance.alliance.MsgUpdateAllianceProposal',
            value: gov_1.MsgUpdateAllianceProposal.encode(this.toProto()).finish(),
        });
    };
    MsgUpdateAllianceProposal.unpackAny = function (msgAny, _) {
        _;
        return MsgUpdateAllianceProposal.fromProto(gov_1.MsgUpdateAllianceProposal.decode(msgAny.value));
    };
    return MsgUpdateAllianceProposal;
}(json_1.JSONSerializable));
exports.MsgUpdateAllianceProposal = MsgUpdateAllianceProposal;
//# sourceMappingURL=MsgUpdateAllianceProposal.js.map