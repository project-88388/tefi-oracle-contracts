import { PublicKey } from '../PublicKey';
import { JSONSerializable } from '../../util/json';
import { AccAddress } from '../bech32';
/**
 * Stores information about an account fetched from the blockchain.
 */
export declare class EthAccount extends JSONSerializable<EthAccount.Amino, EthAccount.Data, {}> {
    address: AccAddress;
    public_key: PublicKey | null;
    account_number: number;
    sequence: number;
    /**
     * Creates a new Account object, holding information about a basic account.
     *
     * @param address account address
     * @param public_key account's public key information
     * @param account_number account number on the blockchain
     * @param sequence sequence number, or number of transactions that have been posted
     */
    constructor(address: AccAddress, public_key: PublicKey | null, account_number: number, sequence: number);
    getAccountNumber(): number;
    getSequenceNumber(): number;
    getPublicKey(): PublicKey | null;
    toAmino(_?: boolean): EthAccount.Amino;
    static fromAmino(data: EthAccount.Amino, _?: boolean): EthAccount;
    static fromData(data: EthAccount.Data, _?: boolean): EthAccount;
    toData(_?: boolean): EthAccount.Data;
    toProto(_?: boolean): {};
}
export declare namespace EthAccount {
    interface AminoValue {
        address: AccAddress;
        public_key: PublicKey.Amino | null;
        account_number: string;
        sequence: string;
    }
    interface Amino {
        type: 'injective/EthAccount';
        value: AminoValue;
    }
    interface Data {
        '@type': '/injective.types.v1beta1.EthAccount';
        base_account: {
            address: AccAddress;
            pub_key: PublicKey.Data | null;
            account_number: string;
            sequence: string;
        };
    }
}
