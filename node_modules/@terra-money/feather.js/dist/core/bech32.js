"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValConsAddress = exports.ValPubKey = exports.ValAddress = exports.AccPubKey = exports.AccAddress = void 0;
var bech32_1 = require("bech32");
function checkLength(data, length) {
    try {
        var vals = bech32_1.bech32.decode(data);
        return vals.words.length === length && vals.prefix;
    }
    catch (e) {
        return false;
    }
}
var AccAddress;
(function (AccAddress) {
    /**
     * Checks if a string is a valid account address.
     *
     * @param data string to check
     * @param prefix expected chain prefix
     */
    function validate(data, prefix) {
        // 44 for normal account and 64 for contract account
        return prefix
            ? (checkLength(data, 32) || checkLength(data, 52)) === prefix
            : !!(checkLength(data, 32) || checkLength(data, 52));
    }
    AccAddress.validate = validate;
    /**
     * Converts a validator address into an account address
     *
     * @param address validator address
     */
    function fromValAddress(address) {
        var vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode(vals.prefix.substring(0, vals.prefix.length - 'valoper'.length), vals.words);
    }
    AccAddress.fromValAddress = fromValAddress;
    /**
     * Get the prefix of an account address
     *
     * @param address accont address
     */
    function getPrefix(address) {
        var vals = bech32_1.bech32.decode(address);
        return vals.prefix;
    }
    AccAddress.getPrefix = getPrefix;
})(AccAddress = exports.AccAddress || (exports.AccAddress = {}));
var AccPubKey;
(function (AccPubKey) {
    /**
     * Checks if a string is a valid account's public key
     * @param data string to check
     * @param prefix expected chain prefix
     */
    function validate(data, prefix) {
        return prefix
            ? checkLength(data, 32) === "".concat(prefix, "pub")
            : /([a-z]{2,20}pub)/g.test(checkLength(data, 32) || '');
    }
    AccPubKey.validate = validate;
    /**
     * Converts a validator pubkey to an account pubkey.
     * @param address validator pubkey to convert
     * @param prefix expected chain prefix
     */
    function fromAccAddress(address, prefix) {
        var vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode("".concat(prefix, "pub"), vals.words);
    }
    AccPubKey.fromAccAddress = fromAccAddress;
    /**
     * Get the prefix of an account public key
     *
     * @param address accont address
     */
    function getPrefix(address) {
        var vals = bech32_1.bech32.decode(address);
        return vals.prefix.substring(0, vals.prefix.length - 'pub'.length);
    }
    AccPubKey.getPrefix = getPrefix;
})(AccPubKey = exports.AccPubKey || (exports.AccPubKey = {}));
var ValAddress;
(function (ValAddress) {
    /**
     * Checks if a string is a Terra validator address.
     *
     * @param data string to check
     * @param prefix expected chain prefix
     */
    function validate(data, prefix) {
        return prefix
            ? checkLength(data, 32) === "".concat(prefix, "valoper")
            : /([a-z]{2,20}valoper)/g.test(checkLength(data, 32) || '');
    }
    ValAddress.validate = validate;
    /**
     * Converts a Terra account address to a validator address.
     * @param address account address to convert
     * @param prefix expected chain prefix
     */
    function fromAccAddress(address, prefix) {
        var vals = bech32_1.bech32.decode(address);
        return bech32_1.bech32.encode("".concat(prefix, "valoper"), vals.words);
    }
    ValAddress.fromAccAddress = fromAccAddress;
    /**
     * Get the prefix of a validator address
     *
     * @param address validator address
     */
    function getPrefix(address) {
        var vals = bech32_1.bech32.decode(address);
        return vals.prefix.substring(0, vals.prefix.length - 'valoper'.length);
    }
    ValAddress.getPrefix = getPrefix;
})(ValAddress = exports.ValAddress || (exports.ValAddress = {}));
var ValPubKey;
(function (ValPubKey) {
    /**
     * Checks if a string is a Terra validator pubkey
     * @param data string to check
     * @param prefix expected chain prefix
     */
    function validate(data, prefix) {
        return prefix
            ? checkLength(data, 32) === "".concat(prefix, "valoperpub")
            : /([a-z]{2,20}valoperpub)/g.test(checkLength(data, 32) || '');
    }
    ValPubKey.validate = validate;
    /**
     * Converts a Terra validator operator address to a validator pubkey.
     * @param valAddress account pubkey
     * @param prefix expected chain prefix
     */
    function fromValAddress(valAddress, prefix) {
        var vals = bech32_1.bech32.decode(valAddress);
        return bech32_1.bech32.encode("".concat(prefix, "valoperpub"), vals.words);
    }
    ValPubKey.fromValAddress = fromValAddress;
    /**
     * Get the prefix of a validator public key
     *
     * @param address validator public key
     */
    function getPrefix(address) {
        var vals = bech32_1.bech32.decode(address);
        return vals.prefix.substring(0, vals.prefix.length - 'valoperpub'.length);
    }
    ValPubKey.getPrefix = getPrefix;
})(ValPubKey = exports.ValPubKey || (exports.ValPubKey = {}));
var ValConsAddress;
(function (ValConsAddress) {
    /**
     * Checks if a string is a Terra validator consensus address
     * @param data string to check
     * @param prefix expected chain prefix
     */
    function validate(data, prefix) {
        return prefix
            ? checkLength(data, 32) === "".concat(prefix, "valcons")
            : /([a-z]{2,20}valcons)/g.test(checkLength(data, 32) || '');
    }
    ValConsAddress.validate = validate;
    /**
     * Get the prefix of a validator consensus address
     *
     * @param address validator consensus address
     */
    function getPrefix(address) {
        var vals = bech32_1.bech32.decode(address);
        return vals.prefix.substring(0, vals.prefix.length - 'valcons'.length);
    }
    ValConsAddress.getPrefix = getPrefix;
})(ValConsAddress = exports.ValConsAddress || (exports.ValConsAddress = {}));
//# sourceMappingURL=bech32.js.map