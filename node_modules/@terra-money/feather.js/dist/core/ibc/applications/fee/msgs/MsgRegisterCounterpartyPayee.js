"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgRegisterCounterpartyPayee = void 0;
var json_1 = require("../../../../../util/json");
var any_1 = require("@terra-money/terra.proto/google/protobuf/any");
var tx_1 = require("@terra-money/terra.proto/ibc/applications/fee/v1/tx");
/** MsgRegisterCounterpartyPayee defines the request type for the RegisterCounterpartyPayee rpc */
var MsgRegisterCounterpartyPayee = /** @class */ (function (_super) {
    __extends(MsgRegisterCounterpartyPayee, _super);
    /**
     * @param portId unique port identifier
     * @param channelId unique channel identifier
     * @param relayer the relayer address
     * @param counterpartyPayee the counterparty payee address
     */
    function MsgRegisterCounterpartyPayee(portId, channelId, relayer, counterpartyPayee) {
        var _this = _super.call(this) || this;
        _this.portId = portId;
        _this.channelId = channelId;
        _this.relayer = relayer;
        _this.counterpartyPayee = counterpartyPayee;
        return _this;
    }
    MsgRegisterCounterpartyPayee.fromAmino = function (_, isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        _;
        throw new Error('Amino not supported');
    };
    MsgRegisterCounterpartyPayee.prototype.toAmino = function (isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        throw new Error('Amino not supported');
    };
    MsgRegisterCounterpartyPayee.fromData = function (data, isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        var portId = data.portId, channelId = data.channelId, relayer = data.relayer, counterpartyPayee = data.counterpartyPayee;
        return new MsgRegisterCounterpartyPayee(portId, channelId, relayer, counterpartyPayee);
    };
    MsgRegisterCounterpartyPayee.prototype.toData = function (isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        var _a = this, portId = _a.portId, channelId = _a.channelId, relayer = _a.relayer, counterpartyPayee = _a.counterpartyPayee;
        return {
            '@type': '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee',
            portId: portId,
            channelId: channelId,
            relayer: relayer,
            counterpartyPayee: counterpartyPayee,
        };
    };
    MsgRegisterCounterpartyPayee.fromProto = function (proto, isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        return new MsgRegisterCounterpartyPayee(proto.portId, proto.channelId, proto.relayer, proto.counterpartyPayee);
    };
    MsgRegisterCounterpartyPayee.prototype.toProto = function (isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        var _a = this, portId = _a.portId, channelId = _a.channelId, relayer = _a.relayer, counterpartyPayee = _a.counterpartyPayee;
        return tx_1.MsgRegisterCounterpartyPayee.fromPartial({
            portId: portId,
            channelId: channelId,
            relayer: relayer,
            counterpartyPayee: counterpartyPayee,
        });
    };
    MsgRegisterCounterpartyPayee.prototype.packAny = function (isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        return any_1.Any.fromPartial({
            typeUrl: '/ibc.applications.fee.v1.MsgRegisterCounterpartyPayee',
            value: tx_1.MsgRegisterCounterpartyPayee.encode(this.toProto(isClassic)).finish(),
        });
    };
    MsgRegisterCounterpartyPayee.unpackAny = function (msgAny, isClassic) {
        if (isClassic) {
            throw new Error('Not supported for the network');
        }
        return MsgRegisterCounterpartyPayee.fromProto(tx_1.MsgRegisterCounterpartyPayee.decode(msgAny.value));
    };
    return MsgRegisterCounterpartyPayee;
}(json_1.JSONSerializable));
exports.MsgRegisterCounterpartyPayee = MsgRegisterCounterpartyPayee;
//# sourceMappingURL=MsgRegisterCounterpartyPayee.js.map