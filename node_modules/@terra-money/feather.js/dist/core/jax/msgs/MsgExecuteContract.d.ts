import { JSONSerializable } from '../../../util/json';
import { AccAddress } from '../../bech32';
import { Coins } from '../../Coins';
import { Any } from '@terra-money/terra.proto/google/protobuf/any';
import { MsgExecuteContract as MsgExecuteContract_pb } from '@terra-money/terra.proto/jax/tx';
export declare class MsgExecuteContract extends JSONSerializable<MsgExecuteContract.Amino, MsgExecuteContract.Data, MsgExecuteContract.Proto> {
    sender: AccAddress;
    contract: AccAddress;
    method: string;
    params: string;
    coins: Coins;
    /**
     * @param sender contract user
     * @param contract contract address
     * @param method method name on the contract
     * @param params json stringified params
     * @param coins coins to be sent to contract
     */
    constructor(sender: AccAddress, contract: AccAddress, method: string, params: string, coins?: Coins.Input);
    static fromAmino(data: MsgExecuteContract.Amino, _?: boolean): MsgExecuteContract;
    toAmino(_?: boolean): MsgExecuteContract.Amino;
    static fromProto(proto: MsgExecuteContract.Proto, _?: boolean): MsgExecuteContract;
    toProto(_?: boolean): MsgExecuteContract.Proto;
    packAny(isClassic?: boolean): Any;
    static unpackAny(msgAny: Any, isClassic?: boolean): MsgExecuteContract;
    static fromData(data: MsgExecuteContract.Data, _?: boolean): MsgExecuteContract;
    toData(_?: boolean): MsgExecuteContract.Data;
}
export declare namespace MsgExecuteContract {
    interface AminoV1 {
        type: 'jax/MsgExecuteContract';
        value: {
            sender: AccAddress;
            contract: AccAddress;
            method: string;
            params: string;
            coins: Coins.Amino;
        };
    }
    interface AminoV2 {
        type: 'jax/MsgExecuteContract';
        value: {
            sender: AccAddress;
            contract: AccAddress;
            method: string;
            params: string;
            coins: Coins.Amino;
        };
    }
    interface DataV1 {
        '@type': '/jax.MsgExecuteContract';
        sender: AccAddress;
        contract: AccAddress;
        method: string;
        params: string;
        coins: Coins.Data;
    }
    interface DataV2 {
        '@type': '/jax.MsgExecuteContract';
        sender: AccAddress;
        contract: AccAddress;
        method: string;
        params: string;
        coins: Coins.Data;
    }
    type Amino = AminoV1 | AminoV2;
    type Data = DataV1 | DataV2;
    type Proto = MsgExecuteContract_pb;
}
