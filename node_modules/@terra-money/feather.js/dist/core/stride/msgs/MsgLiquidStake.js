"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgLiquidStake = void 0;
var json_1 = require("../../../util/json");
var any_1 = require("@terra-money/terra.proto/google/protobuf/any");
var tx_1 = require("@terra-money/terra.proto/stride/stakeibc/tx");
// Used on Stride to create liquid staked asset from a native asset
var MsgLiquidStake = /** @class */ (function (_super) {
    __extends(MsgLiquidStake, _super);
    /**
     * @param creator the address of user who wants to create the staked assets
     * @param amount amount of native assets to be staked
     * @param hostDenom the denomination of the asset to be sent to delegate (uluna, uosmo...)
     */
    function MsgLiquidStake(creator, amount, hostDenom) {
        var _this = _super.call(this) || this;
        _this.creator = creator;
        _this.amount = amount;
        _this.hostDenom = hostDenom;
        return _this;
    }
    MsgLiquidStake.prototype.toAmino = function (_) {
        _;
        throw Error('Legacy Amino not supported for MsgLiquidStake messages. Use Protobuf instead.');
    };
    MsgLiquidStake.fromProto = function (proto, _) {
        _;
        return new MsgLiquidStake(proto.creator, proto.amount, proto.hostDenom);
    };
    MsgLiquidStake.prototype.toProto = function (_) {
        _;
        var _a = this, creator = _a.creator, amount = _a.amount, hostDenom = _a.hostDenom;
        return tx_1.MsgLiquidStake.fromPartial({ creator: creator, amount: amount, hostDenom: hostDenom });
    };
    MsgLiquidStake.prototype.packAny = function (_) {
        _;
        return any_1.Any.fromPartial({
            typeUrl: '/stride.stakeibc.MsgLiquidStake',
            value: tx_1.MsgLiquidStake.encode(this.toProto()).finish(),
        });
    };
    MsgLiquidStake.unpackAny = function (msgAny, _) {
        _;
        return MsgLiquidStake.fromProto(tx_1.MsgLiquidStake.decode(msgAny.value));
    };
    MsgLiquidStake.fromData = function (data, _) {
        _;
        var creator = data.creator, amount = data.amount, hostDenom = data.hostDenom;
        return new MsgLiquidStake(creator, amount, hostDenom);
    };
    MsgLiquidStake.prototype.toData = function (_) {
        _;
        var _a = this, creator = _a.creator, amount = _a.amount, hostDenom = _a.hostDenom;
        return {
            '@type': '/stride.stakeibc.MsgLiquidStake',
            creator: creator,
            amount: amount,
            hostDenom: hostDenom,
        };
    };
    return MsgLiquidStake;
}(json_1.JSONSerializable));
exports.MsgLiquidStake = MsgLiquidStake;
//# sourceMappingURL=MsgLiquidStake.js.map