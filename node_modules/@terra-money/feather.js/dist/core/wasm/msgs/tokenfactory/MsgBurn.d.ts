import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@terra-money/terra.proto/google/protobuf/any';
import { MsgBurn as MsgBurn_pb } from '@terra-money/terra.proto/cosmwasm/tokenfactory/v1beta1/tx';
import { Coin } from '../../../Coin';
/**
 * MsgBurn is the sdk.Msg type for allowing an admin account to burn
 * a token.  For now, we only support burning from the sender account.
 */
export declare class MsgBurn extends JSONSerializable<MsgBurn.Amino, MsgBurn.Data, MsgBurn.Proto> {
    sender: AccAddress;
    amount?: Coin | undefined;
    /**
     *
     * @param sender internal account or external sender address
     * @param amount amount of coins to burn
     */
    constructor(sender: AccAddress, amount?: Coin | undefined);
    toAmino(_?: boolean): MsgBurn.Amino;
    static fromProto(proto: MsgBurn.Proto, _?: boolean): MsgBurn;
    toProto(_?: boolean): MsgBurn.Proto;
    packAny(_?: boolean): Any;
    static unpackAny(msgAny: Any, _?: boolean): MsgBurn;
    static fromData(data: MsgBurn.Data, _?: boolean): MsgBurn;
    toData(_?: boolean): MsgBurn.Data;
    static fromAmino(data: MsgBurn.Amino): MsgBurn;
}
export declare namespace MsgBurn {
    interface Amino {
        type: 'osmosis/tokenfactory/burn';
        value: {
            sender: AccAddress;
            amount?: Coin;
        };
    }
    interface Data {
        '@type': '/cosmwasm.tokenfactory.v1beta1.MsgBurn';
        sender: AccAddress;
        amount?: Coin;
    }
    type Proto = MsgBurn_pb;
}
