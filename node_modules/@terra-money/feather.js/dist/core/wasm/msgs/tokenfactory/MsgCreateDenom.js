"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateDenom = void 0;
var json_1 = require("../../../../util/json");
var any_1 = require("@terra-money/terra.proto/google/protobuf/any");
var tx_1 = require("@terra-money/terra.proto/cosmwasm/tokenfactory/v1beta1/tx");
/**
 * MsgCreateDenom defines the message structure for the CreateDenom gRPC service
 * method. It allows an account to create a new denom. It requires a sender
 * address and a sub denomination. The (sender_address, sub_denomination) tuple
 * must be unique and cannot be re-used.
 *
 * The resulting denom created is defined as
 * <factory/{creatorAddress}/{subdenom}>. The resulting denom's admin is
 * originally set to be the creator, but this can be changed later. The token
 * denom does not indicate the current admin.
 */
var MsgCreateDenom = /** @class */ (function (_super) {
    __extends(MsgCreateDenom, _super);
    /**
     *
     * @param sender internal account or external sender address
     * @param subdenom can be up to 44 "alphanumeric" characters long.
     */
    function MsgCreateDenom(sender, subdenom) {
        var _this = _super.call(this) || this;
        _this.sender = sender;
        _this.subdenom = subdenom;
        return _this;
    }
    MsgCreateDenom.prototype.toAmino = function (_) {
        _;
        var _a = this, sender = _a.sender, subdenom = _a.subdenom;
        return {
            type: 'osmosis/tokenfactory/create-denom',
            value: {
                sender: sender,
                subdenom: subdenom,
            },
        };
    };
    MsgCreateDenom.fromProto = function (proto, _) {
        _;
        return new MsgCreateDenom(proto.sender, proto.subdenom);
    };
    MsgCreateDenom.prototype.toProto = function (_) {
        _;
        var _a = this, sender = _a.sender, subdenom = _a.subdenom;
        return tx_1.MsgCreateDenom.fromPartial({
            sender: sender,
            subdenom: subdenom,
        });
    };
    MsgCreateDenom.prototype.packAny = function (_) {
        _;
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.tokenfactory.v1beta1.MsgCreateDenom',
            value: tx_1.MsgCreateDenom.encode(this.toProto()).finish(),
        });
    };
    MsgCreateDenom.unpackAny = function (msgAny, _) {
        _;
        return MsgCreateDenom.fromProto(tx_1.MsgCreateDenom.decode(msgAny.value));
    };
    MsgCreateDenom.fromData = function (data, _) {
        _;
        var sender = data.sender, subdenom = data.subdenom;
        return new MsgCreateDenom(sender, subdenom);
    };
    MsgCreateDenom.prototype.toData = function (_) {
        _;
        var _a = this, sender = _a.sender, subdenom = _a.subdenom;
        return {
            '@type': '/cosmwasm.tokenfactory.v1beta1.MsgCreateDenom',
            sender: sender,
            subdenom: subdenom,
        };
    };
    MsgCreateDenom.fromAmino = function (data) {
        var _a = data.value, sender = _a.sender, subdenom = _a.subdenom;
        return new MsgCreateDenom(sender, subdenom);
    };
    return MsgCreateDenom;
}(json_1.JSONSerializable));
exports.MsgCreateDenom = MsgCreateDenom;
//# sourceMappingURL=MsgCreateDenom.js.map