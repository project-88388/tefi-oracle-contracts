import { JSONSerializable } from '../../../../util/json';
import { AccAddress } from '../../../bech32';
import { Any } from '@terra-money/terra.proto/google/protobuf/any';
import { MsgMint as MsgMint_pb } from '@terra-money/terra.proto/cosmwasm/tokenfactory/v1beta1/tx';
import { Coin } from '../../../Coin';
/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.  For now, we only support minting to the sender account
 */
export declare class MsgMint extends JSONSerializable<MsgMint.Amino, MsgMint.Data, MsgMint.Proto> {
    sender: AccAddress;
    amount?: Coin | undefined;
    /**
     *
     * @param sender internal account or external sender address
     * @param amount amount of coins to mint
     */
    constructor(sender: AccAddress, amount?: Coin | undefined);
    toAmino(_?: boolean): MsgMint.Amino;
    static fromProto(proto: MsgMint.Proto, _?: boolean): MsgMint;
    toProto(_?: boolean): MsgMint.Proto;
    packAny(_?: boolean): Any;
    static unpackAny(msgAny: Any, _?: boolean): MsgMint;
    static fromData(data: MsgMint.Data, _?: boolean): MsgMint;
    toData(_?: boolean): MsgMint.Data;
    static fromAmino(data: MsgMint.Amino): MsgMint;
}
export declare namespace MsgMint {
    interface Amino {
        type: 'osmosis/tokenfactory/mint';
        value: {
            sender: AccAddress;
            amount?: Coin;
        };
    }
    interface Data {
        '@type': '/cosmwasm.tokenfactory.v1beta1.MsgMint';
        sender: AccAddress;
        amount?: Coin;
    }
    type Proto = MsgMint_pb;
}
