"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgMint = void 0;
var json_1 = require("../../../../util/json");
var any_1 = require("@terra-money/terra.proto/google/protobuf/any");
var tx_1 = require("@terra-money/terra.proto/cosmwasm/tokenfactory/v1beta1/tx");
var Coin_1 = require("../../../Coin");
/**
 * MsgMint is the sdk.Msg type for allowing an admin account to mint
 * more of a token.  For now, we only support minting to the sender account
 */
var MsgMint = /** @class */ (function (_super) {
    __extends(MsgMint, _super);
    /**
     *
     * @param sender internal account or external sender address
     * @param amount amount of coins to mint
     */
    function MsgMint(sender, amount) {
        var _this = _super.call(this) || this;
        _this.sender = sender;
        _this.amount = amount;
        return _this;
    }
    MsgMint.prototype.toAmino = function (_) {
        _;
        var _a = this, sender = _a.sender, amount = _a.amount;
        return {
            type: 'osmosis/tokenfactory/mint',
            value: {
                sender: sender,
                amount: amount,
            },
        };
    };
    MsgMint.fromProto = function (proto, _) {
        _;
        return new MsgMint(proto.sender, Coin_1.Coin.fromProto(proto.amount));
    };
    MsgMint.prototype.toProto = function (_) {
        _;
        var _a = this, sender = _a.sender, amount = _a.amount;
        return tx_1.MsgMint.fromPartial({
            sender: sender,
            amount: amount === null || amount === void 0 ? void 0 : amount.toProto(),
        });
    };
    MsgMint.prototype.packAny = function (_) {
        _;
        return any_1.Any.fromPartial({
            typeUrl: '/cosmwasm.tokenfactory.v1beta1.MsgMint',
            value: tx_1.MsgMint.encode(this.toProto()).finish(),
        });
    };
    MsgMint.unpackAny = function (msgAny, _) {
        _;
        return MsgMint.fromProto(tx_1.MsgMint.decode(msgAny.value));
    };
    MsgMint.fromData = function (data, _) {
        _;
        var sender = data.sender, amount = data.amount;
        return new MsgMint(sender, amount);
    };
    MsgMint.prototype.toData = function (_) {
        _;
        var _a = this, sender = _a.sender, amount = _a.amount;
        return {
            '@type': '/cosmwasm.tokenfactory.v1beta1.MsgMint',
            sender: sender,
            amount: amount,
        };
    };
    MsgMint.fromAmino = function (data) {
        var _a = data.value, sender = _a.sender, amount = _a.amount;
        return new MsgMint(sender, amount);
    };
    return MsgMint;
}(json_1.JSONSerializable));
exports.MsgMint = MsgMint;
//# sourceMappingURL=MsgMint.js.map