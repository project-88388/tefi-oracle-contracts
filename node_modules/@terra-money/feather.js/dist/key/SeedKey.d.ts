/// <reference types="node" />
import { RawKey } from './RawKey';
export declare const DEFAULT_COINTYPE = 330;
export interface SeedKeyOptions {
    /**
     * Buffer containing the seed.
     */
    seed: Buffer;
    /**
     * BIP44 account number.
     */
    account?: number;
    /**
     * BIP44 index number
     */
    index?: number;
    /**
     * Coin type. Default is LUNA, 330.
     */
    coinType?: number;
}
/**
 * Implements a BIP39 mnemonic wallet with standard key derivation from a word list. Note
 * that this implementation exposes the private key in memory, so it is not advised to use
 * for applications requiring high security.
 */
export declare class SeedKey extends RawKey {
    /**
     * Buffer containing the seed.
     */
    seed: Buffer;
    /**
     * Creates a new signing key from a seed.
     *
     * ### Providing a seed
     *
     * ```ts
     * import { SeedKey } from 'terra.js';
     *
     * const sk = new SeedKey({ seed: '...' });
     * console.log(mk.accAddress);
     * ```
     *
     * ### Generating a seed from a mnemonic
     *
     * ```ts
     * const seed = SeedKey.seedFromMnemonic('...);
     * console.log(seed);
     * ```
     *
     * @param options
     */
    constructor(options: SeedKeyOptions);
    static seedFromMnemonic(mnemonic: string): Buffer;
}
