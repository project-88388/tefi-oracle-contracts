"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChainIDFromAddress = exports.getAddressPrefix = void 0;
var bech32_1 = require("../core/bech32");
function getAddressPrefix(address) {
    var addressTypes = [
        bech32_1.AccPubKey,
        bech32_1.ValAddress,
        bech32_1.ValConsAddress,
        bech32_1.ValPubKey,
        // this must be the last one
        bech32_1.AccAddress,
    ];
    for (var _i = 0, addressTypes_1 = addressTypes; _i < addressTypes_1.length; _i++) {
        var addressType = addressTypes_1[_i];
        if (addressType.validate(address)) {
            return addressType.getPrefix(address);
        }
    }
    throw new Error("The provided address (".concat(address, ") is not valid."));
}
exports.getAddressPrefix = getAddressPrefix;
function getChainIDFromAddress(address, config) {
    var _a;
    var prefix = getAddressPrefix(address);
    return (_a = Object.values(config).find(function (chain) { return prefix === chain.prefix; })) === null || _a === void 0 ? void 0 : _a.chainID;
}
exports.getChainIDFromAddress = getChainIDFromAddress;
//# sourceMappingURL=bech32.js.map