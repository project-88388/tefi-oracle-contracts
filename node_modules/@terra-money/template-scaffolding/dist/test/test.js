"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const adm_zip_1 = __importDefault(require("adm-zip"));
const fs_1 = __importDefault(require("fs"));
const DataParser_1 = __importDefault(require("../src/DataParser"));
const FileWriter_1 = __importDefault(require("../src/FileWriter"));
const path_1 = __importDefault(require("path"));
describe("parse files", () => {
    test("with default template placeholder", () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const zip = new adm_zip_1.default("./test/mocks/base-mock.zip");
        const options = {
            remoteUrl: "",
            replace: {
                entries: {
                    "replace-me": "World",
                    "should-i-replace": "With whatever",
                },
            }
        };
        // WHEN
        const parsedZip = yield new DataParser_1.default(options).parse(zip);
        // THEN
        expect(parsedZip.readAsText("base-mock/index.template")).toBe("World world!\n\nLorem ipsum dolor sit amet, World...");
        expect(parsedZip.readAsText("base-mock/not-an-index.template")).toBe("With whatever world!\n\nLorem ipsum dolor sit amet, World...");
    }));
    test("with custom template placeholder", () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const zip = new adm_zip_1.default("./test/mocks/custom-placeholders-mock.zip");
        const options = {
            remoteUrl: "",
            replace: {
                prefix: "{{{",
                suffix: "}}}",
                entries: {
                    "replace-me": "World",
                    "should-i-replace": "With whatever",
                },
            }
        };
        // WHEN
        const parsedZip = yield new DataParser_1.default(options).parse(zip);
        // THEN
        expect(parsedZip.readAsText("custom-placeholders-mock/index.template")).toBe("World world!\n\nLorem ipsum dolor sit amet, World...");
        expect(parsedZip.readAsText("custom-placeholders-mock/not-an-index.template")).toBe("With whatever world!\n\nLorem ipsum dolor sit amet, World...");
    }));
});
describe("unzip files", () => {
    test("with default name", () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const zip = new adm_zip_1.default("./test/mocks/base-mock.zip");
        const options = {
            remoteUrl: ""
        };
        // WHEN
        yield new FileWriter_1.default(options).write(zip);
        // THEN
        expect(fs_1.default.existsSync("./base-mock"));
        expect(fs_1.default.existsSync("./base-mock/index.template"));
        expect(fs_1.default.existsSync("./base-mock/not-an-index.template"));
    }));
    test("with default name", () => __awaiter(void 0, void 0, void 0, function* () {
        // GIVEN
        const zip = new adm_zip_1.default("./test/mocks/base-mock.zip");
        const options = {
            remoteUrl: "",
            subFolder: "folder-name"
        };
        // WHEN
        yield new FileWriter_1.default(options).write(zip);
        // THEN
        expect(fs_1.default.existsSync("./folder-name"));
        expect(fs_1.default.existsSync("./folder-name/index.template"));
        expect(fs_1.default.existsSync("./folder-name/not-an-index.template"));
    }));
    afterAll(() => {
        console.log(__dirname);
        fs_1.default.rmSync(path_1.default.join("src", "base-mock"), { recursive: true, force: true });
        fs_1.default.rmSync(path_1.default.join("folder-name"), { recursive: true, force: true });
    });
});
//# sourceMappingURL=test.js.map