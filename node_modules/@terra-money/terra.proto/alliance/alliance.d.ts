import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
import { RewardHistory } from "../alliance/params";
export declare const protobufPackage = "alliance.alliance";
export interface RewardWeightRange {
    min: string;
    max: string;
}
/** key: denom value: AllianceAsset */
export interface AllianceAsset {
    /** Denom of the asset. It could either be a native token or an IBC token */
    denom: string;
    /**
     * The reward weight specifies the ratio of rewards that will be given to each alliance asset
     * It does not need to sum to 1. rate = weight / total_weight
     * Native asset is always assumed to have a weight of 1.s
     */
    rewardWeight: string;
    /**
     * A positive take rate is used for liquid staking derivatives. It defines an rate that is applied per take_rate_interval
     * that will be redirected to the distribution rewards pool
     */
    takeRate: string;
    totalTokens: string;
    totalValidatorShares: string;
    rewardStartTime?: Date;
    rewardChangeRate: string;
    rewardChangeInterval?: Duration;
    lastRewardChangeTime?: Date;
    /** set a bound of weight range to limit how much reward weights can scale. */
    rewardWeightRange?: RewardWeightRange;
    /** flag to check if an asset has completed the initialization process after the reward delay */
    isInitialized: boolean;
}
export interface RewardWeightChangeSnapshot {
    prevRewardWeight: string;
    rewardHistories: RewardHistory[];
}
export declare const RewardWeightRange: {
    encode(message: RewardWeightRange, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardWeightRange;
    fromJSON(object: any): RewardWeightRange;
    toJSON(message: RewardWeightRange): unknown;
    fromPartial(object: DeepPartial<RewardWeightRange>): RewardWeightRange;
};
export declare const AllianceAsset: {
    encode(message: AllianceAsset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): AllianceAsset;
    fromJSON(object: any): AllianceAsset;
    toJSON(message: AllianceAsset): unknown;
    fromPartial(object: DeepPartial<AllianceAsset>): AllianceAsset;
};
export declare const RewardWeightChangeSnapshot: {
    encode(message: RewardWeightChangeSnapshot, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardWeightChangeSnapshot;
    fromJSON(object: any): RewardWeightChangeSnapshot;
    toJSON(message: RewardWeightChangeSnapshot): unknown;
    fromPartial(object: DeepPartial<RewardWeightChangeSnapshot>): RewardWeightChangeSnapshot;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
