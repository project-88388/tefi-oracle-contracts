"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RewardWeightChangeSnapshot = exports.AllianceAsset = exports.RewardWeightRange = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../google/protobuf/duration");
const timestamp_1 = require("../google/protobuf/timestamp");
const params_1 = require("../alliance/params");
exports.protobufPackage = "alliance.alliance";
const baseRewardWeightRange = { min: "", max: "" };
exports.RewardWeightRange = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.min !== "") {
            writer.uint32(10).string(message.min);
        }
        if (message.max !== "") {
            writer.uint32(18).string(message.max);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRewardWeightRange);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.min = reader.string();
                    break;
                case 2:
                    message.max = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRewardWeightRange);
        if (object.min !== undefined && object.min !== null) {
            message.min = String(object.min);
        }
        else {
            message.min = "";
        }
        if (object.max !== undefined && object.max !== null) {
            message.max = String(object.max);
        }
        else {
            message.max = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.min !== undefined && (obj.min = message.min);
        message.max !== undefined && (obj.max = message.max);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRewardWeightRange);
        if (object.min !== undefined && object.min !== null) {
            message.min = object.min;
        }
        else {
            message.min = "";
        }
        if (object.max !== undefined && object.max !== null) {
            message.max = object.max;
        }
        else {
            message.max = "";
        }
        return message;
    },
};
const baseAllianceAsset = {
    denom: "",
    rewardWeight: "",
    takeRate: "",
    totalTokens: "",
    totalValidatorShares: "",
    rewardChangeRate: "",
    isInitialized: false,
};
exports.AllianceAsset = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.rewardWeight !== "") {
            writer.uint32(18).string(message.rewardWeight);
        }
        if (message.takeRate !== "") {
            writer.uint32(26).string(message.takeRate);
        }
        if (message.totalTokens !== "") {
            writer.uint32(34).string(message.totalTokens);
        }
        if (message.totalValidatorShares !== "") {
            writer.uint32(42).string(message.totalValidatorShares);
        }
        if (message.rewardStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.rewardStartTime), writer.uint32(50).fork()).ldelim();
        }
        if (message.rewardChangeRate !== "") {
            writer.uint32(58).string(message.rewardChangeRate);
        }
        if (message.rewardChangeInterval !== undefined) {
            duration_1.Duration.encode(message.rewardChangeInterval, writer.uint32(66).fork()).ldelim();
        }
        if (message.lastRewardChangeTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lastRewardChangeTime), writer.uint32(74).fork()).ldelim();
        }
        if (message.rewardWeightRange !== undefined) {
            exports.RewardWeightRange.encode(message.rewardWeightRange, writer.uint32(82).fork()).ldelim();
        }
        if (message.isInitialized === true) {
            writer.uint32(88).bool(message.isInitialized);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAllianceAsset);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.rewardWeight = reader.string();
                    break;
                case 3:
                    message.takeRate = reader.string();
                    break;
                case 4:
                    message.totalTokens = reader.string();
                    break;
                case 5:
                    message.totalValidatorShares = reader.string();
                    break;
                case 6:
                    message.rewardStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.rewardChangeRate = reader.string();
                    break;
                case 8:
                    message.rewardChangeInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.lastRewardChangeTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.rewardWeightRange = exports.RewardWeightRange.decode(reader, reader.uint32());
                    break;
                case 11:
                    message.isInitialized = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAllianceAsset);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = String(object.takeRate);
        }
        else {
            message.takeRate = "";
        }
        if (object.totalTokens !== undefined && object.totalTokens !== null) {
            message.totalTokens = String(object.totalTokens);
        }
        else {
            message.totalTokens = "";
        }
        if (object.totalValidatorShares !== undefined && object.totalValidatorShares !== null) {
            message.totalValidatorShares = String(object.totalValidatorShares);
        }
        else {
            message.totalValidatorShares = "";
        }
        if (object.rewardStartTime !== undefined && object.rewardStartTime !== null) {
            message.rewardStartTime = fromJsonTimestamp(object.rewardStartTime);
        }
        else {
            message.rewardStartTime = undefined;
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = String(object.rewardChangeRate);
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromJSON(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        if (object.lastRewardChangeTime !== undefined && object.lastRewardChangeTime !== null) {
            message.lastRewardChangeTime = fromJsonTimestamp(object.lastRewardChangeTime);
        }
        else {
            message.lastRewardChangeTime = undefined;
        }
        if (object.rewardWeightRange !== undefined && object.rewardWeightRange !== null) {
            message.rewardWeightRange = exports.RewardWeightRange.fromJSON(object.rewardWeightRange);
        }
        else {
            message.rewardWeightRange = undefined;
        }
        if (object.isInitialized !== undefined && object.isInitialized !== null) {
            message.isInitialized = Boolean(object.isInitialized);
        }
        else {
            message.isInitialized = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        message.takeRate !== undefined && (obj.takeRate = message.takeRate);
        message.totalTokens !== undefined && (obj.totalTokens = message.totalTokens);
        message.totalValidatorShares !== undefined && (obj.totalValidatorShares = message.totalValidatorShares);
        message.rewardStartTime !== undefined && (obj.rewardStartTime = message.rewardStartTime.toISOString());
        message.rewardChangeRate !== undefined && (obj.rewardChangeRate = message.rewardChangeRate);
        message.rewardChangeInterval !== undefined &&
            (obj.rewardChangeInterval = message.rewardChangeInterval
                ? duration_1.Duration.toJSON(message.rewardChangeInterval)
                : undefined);
        message.lastRewardChangeTime !== undefined &&
            (obj.lastRewardChangeTime = message.lastRewardChangeTime.toISOString());
        message.rewardWeightRange !== undefined &&
            (obj.rewardWeightRange = message.rewardWeightRange
                ? exports.RewardWeightRange.toJSON(message.rewardWeightRange)
                : undefined);
        message.isInitialized !== undefined && (obj.isInitialized = message.isInitialized);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAllianceAsset);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = object.takeRate;
        }
        else {
            message.takeRate = "";
        }
        if (object.totalTokens !== undefined && object.totalTokens !== null) {
            message.totalTokens = object.totalTokens;
        }
        else {
            message.totalTokens = "";
        }
        if (object.totalValidatorShares !== undefined && object.totalValidatorShares !== null) {
            message.totalValidatorShares = object.totalValidatorShares;
        }
        else {
            message.totalValidatorShares = "";
        }
        if (object.rewardStartTime !== undefined && object.rewardStartTime !== null) {
            message.rewardStartTime = object.rewardStartTime;
        }
        else {
            message.rewardStartTime = undefined;
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = object.rewardChangeRate;
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromPartial(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        if (object.lastRewardChangeTime !== undefined && object.lastRewardChangeTime !== null) {
            message.lastRewardChangeTime = object.lastRewardChangeTime;
        }
        else {
            message.lastRewardChangeTime = undefined;
        }
        if (object.rewardWeightRange !== undefined && object.rewardWeightRange !== null) {
            message.rewardWeightRange = exports.RewardWeightRange.fromPartial(object.rewardWeightRange);
        }
        else {
            message.rewardWeightRange = undefined;
        }
        if (object.isInitialized !== undefined && object.isInitialized !== null) {
            message.isInitialized = object.isInitialized;
        }
        else {
            message.isInitialized = false;
        }
        return message;
    },
};
const baseRewardWeightChangeSnapshot = { prevRewardWeight: "" };
exports.RewardWeightChangeSnapshot = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.prevRewardWeight !== "") {
            writer.uint32(10).string(message.prevRewardWeight);
        }
        for (const v of message.rewardHistories) {
            params_1.RewardHistory.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRewardWeightChangeSnapshot);
        message.rewardHistories = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.prevRewardWeight = reader.string();
                    break;
                case 2:
                    message.rewardHistories.push(params_1.RewardHistory.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRewardWeightChangeSnapshot);
        message.rewardHistories = [];
        if (object.prevRewardWeight !== undefined && object.prevRewardWeight !== null) {
            message.prevRewardWeight = String(object.prevRewardWeight);
        }
        else {
            message.prevRewardWeight = "";
        }
        if (object.rewardHistories !== undefined && object.rewardHistories !== null) {
            for (const e of object.rewardHistories) {
                message.rewardHistories.push(params_1.RewardHistory.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.prevRewardWeight !== undefined && (obj.prevRewardWeight = message.prevRewardWeight);
        if (message.rewardHistories) {
            obj.rewardHistories = message.rewardHistories.map((e) => (e ? params_1.RewardHistory.toJSON(e) : undefined));
        }
        else {
            obj.rewardHistories = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRewardWeightChangeSnapshot);
        message.rewardHistories = [];
        if (object.prevRewardWeight !== undefined && object.prevRewardWeight !== null) {
            message.prevRewardWeight = object.prevRewardWeight;
        }
        else {
            message.prevRewardWeight = "";
        }
        if (object.rewardHistories !== undefined && object.rewardHistories !== null) {
            for (const e of object.rewardHistories) {
                message.rewardHistories.push(params_1.RewardHistory.fromPartial(e));
            }
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=alliance.js.map