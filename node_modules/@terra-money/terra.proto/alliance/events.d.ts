import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "alliance.alliance";
export interface DelegateAllianceEvent {
    allianceSender: string;
    validator: string;
    coin?: Coin;
    newShares: string;
}
export interface UndelegateAllianceEvent {
    allianceSender: string;
    validator: string;
    coin?: Coin;
    completionTime?: Date;
}
export interface RedelegateAllianceEvent {
    allianceSender: string;
    sourceValidator: string;
    destinationValidator: string;
    coin?: Coin;
    completionTime?: Date;
}
export interface ClaimAllianceRewardsEvent {
    allianceSender: string;
    validator: string;
    coins: Coin[];
}
export declare const DelegateAllianceEvent: {
    encode(message: DelegateAllianceEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DelegateAllianceEvent;
    fromJSON(object: any): DelegateAllianceEvent;
    toJSON(message: DelegateAllianceEvent): unknown;
    fromPartial(object: DeepPartial<DelegateAllianceEvent>): DelegateAllianceEvent;
};
export declare const UndelegateAllianceEvent: {
    encode(message: UndelegateAllianceEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UndelegateAllianceEvent;
    fromJSON(object: any): UndelegateAllianceEvent;
    toJSON(message: UndelegateAllianceEvent): unknown;
    fromPartial(object: DeepPartial<UndelegateAllianceEvent>): UndelegateAllianceEvent;
};
export declare const RedelegateAllianceEvent: {
    encode(message: RedelegateAllianceEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RedelegateAllianceEvent;
    fromJSON(object: any): RedelegateAllianceEvent;
    toJSON(message: RedelegateAllianceEvent): unknown;
    fromPartial(object: DeepPartial<RedelegateAllianceEvent>): RedelegateAllianceEvent;
};
export declare const ClaimAllianceRewardsEvent: {
    encode(message: ClaimAllianceRewardsEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ClaimAllianceRewardsEvent;
    fromJSON(object: any): ClaimAllianceRewardsEvent;
    toJSON(message: ClaimAllianceRewardsEvent): unknown;
    fromPartial(object: DeepPartial<ClaimAllianceRewardsEvent>): ClaimAllianceRewardsEvent;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
