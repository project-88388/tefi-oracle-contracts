"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimAllianceRewardsEvent = exports.RedelegateAllianceEvent = exports.UndelegateAllianceEvent = exports.DelegateAllianceEvent = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const coin_1 = require("../cosmos/base/v1beta1/coin");
const timestamp_1 = require("../google/protobuf/timestamp");
exports.protobufPackage = "alliance.alliance";
const baseDelegateAllianceEvent = { allianceSender: "", validator: "", newShares: "" };
exports.DelegateAllianceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allianceSender !== "") {
            writer.uint32(10).string(message.allianceSender);
        }
        if (message.validator !== "") {
            writer.uint32(18).string(message.validator);
        }
        if (message.coin !== undefined) {
            coin_1.Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        if (message.newShares !== "") {
            writer.uint32(34).string(message.newShares);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDelegateAllianceEvent);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allianceSender = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.coin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.newShares = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = String(object.allianceSender);
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = String(object.validator);
        }
        else {
            message.validator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromJSON(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.newShares !== undefined && object.newShares !== null) {
            message.newShares = String(object.newShares);
        }
        else {
            message.newShares = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.allianceSender !== undefined && (obj.allianceSender = message.allianceSender);
        message.validator !== undefined && (obj.validator = message.validator);
        message.coin !== undefined && (obj.coin = message.coin ? coin_1.Coin.toJSON(message.coin) : undefined);
        message.newShares !== undefined && (obj.newShares = message.newShares);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseDelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = object.allianceSender;
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = object.validator;
        }
        else {
            message.validator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromPartial(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.newShares !== undefined && object.newShares !== null) {
            message.newShares = object.newShares;
        }
        else {
            message.newShares = "";
        }
        return message;
    },
};
const baseUndelegateAllianceEvent = { allianceSender: "", validator: "" };
exports.UndelegateAllianceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allianceSender !== "") {
            writer.uint32(10).string(message.allianceSender);
        }
        if (message.validator !== "") {
            writer.uint32(18).string(message.validator);
        }
        if (message.coin !== undefined) {
            coin_1.Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        if (message.completionTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseUndelegateAllianceEvent);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allianceSender = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.coin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseUndelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = String(object.allianceSender);
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = String(object.validator);
        }
        else {
            message.validator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromJSON(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = fromJsonTimestamp(object.completionTime);
        }
        else {
            message.completionTime = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.allianceSender !== undefined && (obj.allianceSender = message.allianceSender);
        message.validator !== undefined && (obj.validator = message.validator);
        message.coin !== undefined && (obj.coin = message.coin ? coin_1.Coin.toJSON(message.coin) : undefined);
        message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseUndelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = object.allianceSender;
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = object.validator;
        }
        else {
            message.validator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromPartial(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = object.completionTime;
        }
        else {
            message.completionTime = undefined;
        }
        return message;
    },
};
const baseRedelegateAllianceEvent = {
    allianceSender: "",
    sourceValidator: "",
    destinationValidator: "",
};
exports.RedelegateAllianceEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allianceSender !== "") {
            writer.uint32(10).string(message.allianceSender);
        }
        if (message.sourceValidator !== "") {
            writer.uint32(18).string(message.sourceValidator);
        }
        if (message.destinationValidator !== "") {
            writer.uint32(26).string(message.destinationValidator);
        }
        if (message.coin !== undefined) {
            coin_1.Coin.encode(message.coin, writer.uint32(34).fork()).ldelim();
        }
        if (message.completionTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRedelegateAllianceEvent);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allianceSender = reader.string();
                    break;
                case 2:
                    message.sourceValidator = reader.string();
                    break;
                case 3:
                    message.destinationValidator = reader.string();
                    break;
                case 4:
                    message.coin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRedelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = String(object.allianceSender);
        }
        else {
            message.allianceSender = "";
        }
        if (object.sourceValidator !== undefined && object.sourceValidator !== null) {
            message.sourceValidator = String(object.sourceValidator);
        }
        else {
            message.sourceValidator = "";
        }
        if (object.destinationValidator !== undefined && object.destinationValidator !== null) {
            message.destinationValidator = String(object.destinationValidator);
        }
        else {
            message.destinationValidator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromJSON(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = fromJsonTimestamp(object.completionTime);
        }
        else {
            message.completionTime = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.allianceSender !== undefined && (obj.allianceSender = message.allianceSender);
        message.sourceValidator !== undefined && (obj.sourceValidator = message.sourceValidator);
        message.destinationValidator !== undefined && (obj.destinationValidator = message.destinationValidator);
        message.coin !== undefined && (obj.coin = message.coin ? coin_1.Coin.toJSON(message.coin) : undefined);
        message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRedelegateAllianceEvent);
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = object.allianceSender;
        }
        else {
            message.allianceSender = "";
        }
        if (object.sourceValidator !== undefined && object.sourceValidator !== null) {
            message.sourceValidator = object.sourceValidator;
        }
        else {
            message.sourceValidator = "";
        }
        if (object.destinationValidator !== undefined && object.destinationValidator !== null) {
            message.destinationValidator = object.destinationValidator;
        }
        else {
            message.destinationValidator = "";
        }
        if (object.coin !== undefined && object.coin !== null) {
            message.coin = coin_1.Coin.fromPartial(object.coin);
        }
        else {
            message.coin = undefined;
        }
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = object.completionTime;
        }
        else {
            message.completionTime = undefined;
        }
        return message;
    },
};
const baseClaimAllianceRewardsEvent = { allianceSender: "", validator: "" };
exports.ClaimAllianceRewardsEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allianceSender !== "") {
            writer.uint32(10).string(message.allianceSender);
        }
        if (message.validator !== "") {
            writer.uint32(18).string(message.validator);
        }
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseClaimAllianceRewardsEvent);
        message.coins = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allianceSender = reader.string();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseClaimAllianceRewardsEvent);
        message.coins = [];
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = String(object.allianceSender);
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = String(object.validator);
        }
        else {
            message.validator = "";
        }
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.allianceSender !== undefined && (obj.allianceSender = message.allianceSender);
        message.validator !== undefined && (obj.validator = message.validator);
        if (message.coins) {
            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.coins = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseClaimAllianceRewardsEvent);
        message.coins = [];
        if (object.allianceSender !== undefined && object.allianceSender !== null) {
            message.allianceSender = object.allianceSender;
        }
        else {
            message.allianceSender = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = object.validator;
        }
        else {
            message.validator = "";
        }
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=events.js.map