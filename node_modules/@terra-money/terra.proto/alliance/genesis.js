"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.RewardWeightChangeSnapshotState = exports.UndelegationState = exports.RedelegationState = exports.ValidatorInfoState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const delegations_1 = require("../alliance/delegations");
const alliance_1 = require("../alliance/alliance");
const params_1 = require("../alliance/params");
const timestamp_1 = require("../google/protobuf/timestamp");
exports.protobufPackage = "alliance.alliance";
const baseValidatorInfoState = { validatorAddress: "" };
exports.ValidatorInfoState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (message.validator !== undefined) {
            delegations_1.AllianceValidatorInfo.encode(message.validator, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseValidatorInfoState);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.validator = delegations_1.AllianceValidatorInfo.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseValidatorInfoState);
        if (object.validatorAddress !== undefined && object.validatorAddress !== null) {
            message.validatorAddress = String(object.validatorAddress);
        }
        else {
            message.validatorAddress = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = delegations_1.AllianceValidatorInfo.fromJSON(object.validator);
        }
        else {
            message.validator = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.validatorAddress !== undefined && (obj.validatorAddress = message.validatorAddress);
        message.validator !== undefined &&
            (obj.validator = message.validator ? delegations_1.AllianceValidatorInfo.toJSON(message.validator) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseValidatorInfoState);
        if (object.validatorAddress !== undefined && object.validatorAddress !== null) {
            message.validatorAddress = object.validatorAddress;
        }
        else {
            message.validatorAddress = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = delegations_1.AllianceValidatorInfo.fromPartial(object.validator);
        }
        else {
            message.validator = undefined;
        }
        return message;
    },
};
const baseRedelegationState = {};
exports.RedelegationState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.completionTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();
        }
        if (message.redelegation !== undefined) {
            delegations_1.Redelegation.encode(message.redelegation, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRedelegationState);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.redelegation = delegations_1.Redelegation.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRedelegationState);
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = fromJsonTimestamp(object.completionTime);
        }
        else {
            message.completionTime = undefined;
        }
        if (object.redelegation !== undefined && object.redelegation !== null) {
            message.redelegation = delegations_1.Redelegation.fromJSON(object.redelegation);
        }
        else {
            message.redelegation = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());
        message.redelegation !== undefined &&
            (obj.redelegation = message.redelegation ? delegations_1.Redelegation.toJSON(message.redelegation) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRedelegationState);
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = object.completionTime;
        }
        else {
            message.completionTime = undefined;
        }
        if (object.redelegation !== undefined && object.redelegation !== null) {
            message.redelegation = delegations_1.Redelegation.fromPartial(object.redelegation);
        }
        else {
            message.redelegation = undefined;
        }
        return message;
    },
};
const baseUndelegationState = {};
exports.UndelegationState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.completionTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.completionTime), writer.uint32(10).fork()).ldelim();
        }
        if (message.undelegation !== undefined) {
            delegations_1.QueuedUndelegation.encode(message.undelegation, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseUndelegationState);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.completionTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.undelegation = delegations_1.QueuedUndelegation.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseUndelegationState);
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = fromJsonTimestamp(object.completionTime);
        }
        else {
            message.completionTime = undefined;
        }
        if (object.undelegation !== undefined && object.undelegation !== null) {
            message.undelegation = delegations_1.QueuedUndelegation.fromJSON(object.undelegation);
        }
        else {
            message.undelegation = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.completionTime !== undefined && (obj.completionTime = message.completionTime.toISOString());
        message.undelegation !== undefined &&
            (obj.undelegation = message.undelegation ? delegations_1.QueuedUndelegation.toJSON(message.undelegation) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseUndelegationState);
        if (object.completionTime !== undefined && object.completionTime !== null) {
            message.completionTime = object.completionTime;
        }
        else {
            message.completionTime = undefined;
        }
        if (object.undelegation !== undefined && object.undelegation !== null) {
            message.undelegation = delegations_1.QueuedUndelegation.fromPartial(object.undelegation);
        }
        else {
            message.undelegation = undefined;
        }
        return message;
    },
};
const baseRewardWeightChangeSnapshotState = { height: long_1.default.UZERO, validator: "", denom: "" };
exports.RewardWeightChangeSnapshotState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.height.isZero()) {
            writer.uint32(8).uint64(message.height);
        }
        if (message.validator !== "") {
            writer.uint32(18).string(message.validator);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.snapshot !== undefined) {
            alliance_1.RewardWeightChangeSnapshot.encode(message.snapshot, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRewardWeightChangeSnapshotState);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.uint64();
                    break;
                case 2:
                    message.validator = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.snapshot = alliance_1.RewardWeightChangeSnapshot.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRewardWeightChangeSnapshotState);
        if (object.height !== undefined && object.height !== null) {
            message.height = long_1.default.fromString(object.height);
        }
        else {
            message.height = long_1.default.UZERO;
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = String(object.validator);
        }
        else {
            message.validator = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.snapshot !== undefined && object.snapshot !== null) {
            message.snapshot = alliance_1.RewardWeightChangeSnapshot.fromJSON(object.snapshot);
        }
        else {
            message.snapshot = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.height !== undefined && (obj.height = (message.height || long_1.default.UZERO).toString());
        message.validator !== undefined && (obj.validator = message.validator);
        message.denom !== undefined && (obj.denom = message.denom);
        message.snapshot !== undefined &&
            (obj.snapshot = message.snapshot ? alliance_1.RewardWeightChangeSnapshot.toJSON(message.snapshot) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRewardWeightChangeSnapshotState);
        if (object.height !== undefined && object.height !== null) {
            message.height = object.height;
        }
        else {
            message.height = long_1.default.UZERO;
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = object.validator;
        }
        else {
            message.validator = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.snapshot !== undefined && object.snapshot !== null) {
            message.snapshot = alliance_1.RewardWeightChangeSnapshot.fromPartial(object.snapshot);
        }
        else {
            message.snapshot = undefined;
        }
        return message;
    },
};
const baseGenesisState = {};
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.assets) {
            alliance_1.AllianceAsset.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.validatorInfos) {
            exports.ValidatorInfoState.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.rewardWeightChangeSnaphots) {
            exports.RewardWeightChangeSnapshotState.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.delegations) {
            delegations_1.Delegation.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.redelegations) {
            exports.RedelegationState.encode(v, writer.uint32(50).fork()).ldelim();
        }
        for (const v of message.undelegations) {
            exports.UndelegationState.encode(v, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.assets = [];
        message.validatorInfos = [];
        message.rewardWeightChangeSnaphots = [];
        message.delegations = [];
        message.redelegations = [];
        message.undelegations = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.assets.push(alliance_1.AllianceAsset.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.validatorInfos.push(exports.ValidatorInfoState.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.rewardWeightChangeSnaphots.push(exports.RewardWeightChangeSnapshotState.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.delegations.push(delegations_1.Delegation.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.redelegations.push(exports.RedelegationState.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.undelegations.push(exports.UndelegationState.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.assets = [];
        message.validatorInfos = [];
        message.rewardWeightChangeSnaphots = [];
        message.delegations = [];
        message.redelegations = [];
        message.undelegations = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.assets !== undefined && object.assets !== null) {
            for (const e of object.assets) {
                message.assets.push(alliance_1.AllianceAsset.fromJSON(e));
            }
        }
        if (object.validatorInfos !== undefined && object.validatorInfos !== null) {
            for (const e of object.validatorInfos) {
                message.validatorInfos.push(exports.ValidatorInfoState.fromJSON(e));
            }
        }
        if (object.rewardWeightChangeSnaphots !== undefined && object.rewardWeightChangeSnaphots !== null) {
            for (const e of object.rewardWeightChangeSnaphots) {
                message.rewardWeightChangeSnaphots.push(exports.RewardWeightChangeSnapshotState.fromJSON(e));
            }
        }
        if (object.delegations !== undefined && object.delegations !== null) {
            for (const e of object.delegations) {
                message.delegations.push(delegations_1.Delegation.fromJSON(e));
            }
        }
        if (object.redelegations !== undefined && object.redelegations !== null) {
            for (const e of object.redelegations) {
                message.redelegations.push(exports.RedelegationState.fromJSON(e));
            }
        }
        if (object.undelegations !== undefined && object.undelegations !== null) {
            for (const e of object.undelegations) {
                message.undelegations.push(exports.UndelegationState.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        if (message.assets) {
            obj.assets = message.assets.map((e) => (e ? alliance_1.AllianceAsset.toJSON(e) : undefined));
        }
        else {
            obj.assets = [];
        }
        if (message.validatorInfos) {
            obj.validatorInfos = message.validatorInfos.map((e) => (e ? exports.ValidatorInfoState.toJSON(e) : undefined));
        }
        else {
            obj.validatorInfos = [];
        }
        if (message.rewardWeightChangeSnaphots) {
            obj.rewardWeightChangeSnaphots = message.rewardWeightChangeSnaphots.map((e) => e ? exports.RewardWeightChangeSnapshotState.toJSON(e) : undefined);
        }
        else {
            obj.rewardWeightChangeSnaphots = [];
        }
        if (message.delegations) {
            obj.delegations = message.delegations.map((e) => (e ? delegations_1.Delegation.toJSON(e) : undefined));
        }
        else {
            obj.delegations = [];
        }
        if (message.redelegations) {
            obj.redelegations = message.redelegations.map((e) => (e ? exports.RedelegationState.toJSON(e) : undefined));
        }
        else {
            obj.redelegations = [];
        }
        if (message.undelegations) {
            obj.undelegations = message.undelegations.map((e) => (e ? exports.UndelegationState.toJSON(e) : undefined));
        }
        else {
            obj.undelegations = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.assets = [];
        message.validatorInfos = [];
        message.rewardWeightChangeSnaphots = [];
        message.delegations = [];
        message.redelegations = [];
        message.undelegations = [];
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        if (object.assets !== undefined && object.assets !== null) {
            for (const e of object.assets) {
                message.assets.push(alliance_1.AllianceAsset.fromPartial(e));
            }
        }
        if (object.validatorInfos !== undefined && object.validatorInfos !== null) {
            for (const e of object.validatorInfos) {
                message.validatorInfos.push(exports.ValidatorInfoState.fromPartial(e));
            }
        }
        if (object.rewardWeightChangeSnaphots !== undefined && object.rewardWeightChangeSnaphots !== null) {
            for (const e of object.rewardWeightChangeSnaphots) {
                message.rewardWeightChangeSnaphots.push(exports.RewardWeightChangeSnapshotState.fromPartial(e));
            }
        }
        if (object.delegations !== undefined && object.delegations !== null) {
            for (const e of object.delegations) {
                message.delegations.push(delegations_1.Delegation.fromPartial(e));
            }
        }
        if (object.redelegations !== undefined && object.redelegations !== null) {
            for (const e of object.redelegations) {
                message.redelegations.push(exports.RedelegationState.fromPartial(e));
            }
        }
        if (object.undelegations !== undefined && object.undelegations !== null) {
            for (const e of object.undelegations) {
                message.undelegations.push(exports.UndelegationState.fromPartial(e));
            }
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map