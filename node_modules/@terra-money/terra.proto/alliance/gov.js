"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgDeleteAllianceProposal = exports.MsgUpdateAllianceProposal = exports.MsgCreateAllianceProposal = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../google/protobuf/duration");
const alliance_1 = require("../alliance/alliance");
exports.protobufPackage = "alliance.alliance";
const baseMsgCreateAllianceProposal = {
    title: "",
    description: "",
    denom: "",
    rewardWeight: "",
    takeRate: "",
    rewardChangeRate: "",
};
exports.MsgCreateAllianceProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.rewardWeight !== "") {
            writer.uint32(34).string(message.rewardWeight);
        }
        if (message.takeRate !== "") {
            writer.uint32(42).string(message.takeRate);
        }
        if (message.rewardChangeRate !== "") {
            writer.uint32(50).string(message.rewardChangeRate);
        }
        if (message.rewardChangeInterval !== undefined) {
            duration_1.Duration.encode(message.rewardChangeInterval, writer.uint32(58).fork()).ldelim();
        }
        if (message.rewardWeightRange !== undefined) {
            alliance_1.RewardWeightRange.encode(message.rewardWeightRange, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgCreateAllianceProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.rewardWeight = reader.string();
                    break;
                case 5:
                    message.takeRate = reader.string();
                    break;
                case 6:
                    message.rewardChangeRate = reader.string();
                    break;
                case 7:
                    message.rewardChangeInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.rewardWeightRange = alliance_1.RewardWeightRange.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgCreateAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = String(object.takeRate);
        }
        else {
            message.takeRate = "";
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = String(object.rewardChangeRate);
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromJSON(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        if (object.rewardWeightRange !== undefined && object.rewardWeightRange !== null) {
            message.rewardWeightRange = alliance_1.RewardWeightRange.fromJSON(object.rewardWeightRange);
        }
        else {
            message.rewardWeightRange = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        message.takeRate !== undefined && (obj.takeRate = message.takeRate);
        message.rewardChangeRate !== undefined && (obj.rewardChangeRate = message.rewardChangeRate);
        message.rewardChangeInterval !== undefined &&
            (obj.rewardChangeInterval = message.rewardChangeInterval
                ? duration_1.Duration.toJSON(message.rewardChangeInterval)
                : undefined);
        message.rewardWeightRange !== undefined &&
            (obj.rewardWeightRange = message.rewardWeightRange
                ? alliance_1.RewardWeightRange.toJSON(message.rewardWeightRange)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgCreateAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = object.takeRate;
        }
        else {
            message.takeRate = "";
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = object.rewardChangeRate;
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromPartial(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        if (object.rewardWeightRange !== undefined && object.rewardWeightRange !== null) {
            message.rewardWeightRange = alliance_1.RewardWeightRange.fromPartial(object.rewardWeightRange);
        }
        else {
            message.rewardWeightRange = undefined;
        }
        return message;
    },
};
const baseMsgUpdateAllianceProposal = {
    title: "",
    description: "",
    denom: "",
    rewardWeight: "",
    takeRate: "",
    rewardChangeRate: "",
};
exports.MsgUpdateAllianceProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.rewardWeight !== "") {
            writer.uint32(34).string(message.rewardWeight);
        }
        if (message.takeRate !== "") {
            writer.uint32(42).string(message.takeRate);
        }
        if (message.rewardChangeRate !== "") {
            writer.uint32(50).string(message.rewardChangeRate);
        }
        if (message.rewardChangeInterval !== undefined) {
            duration_1.Duration.encode(message.rewardChangeInterval, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgUpdateAllianceProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.rewardWeight = reader.string();
                    break;
                case 5:
                    message.takeRate = reader.string();
                    break;
                case 6:
                    message.rewardChangeRate = reader.string();
                    break;
                case 7:
                    message.rewardChangeInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgUpdateAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = String(object.rewardWeight);
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = String(object.takeRate);
        }
        else {
            message.takeRate = "";
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = String(object.rewardChangeRate);
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromJSON(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.rewardWeight !== undefined && (obj.rewardWeight = message.rewardWeight);
        message.takeRate !== undefined && (obj.takeRate = message.takeRate);
        message.rewardChangeRate !== undefined && (obj.rewardChangeRate = message.rewardChangeRate);
        message.rewardChangeInterval !== undefined &&
            (obj.rewardChangeInterval = message.rewardChangeInterval
                ? duration_1.Duration.toJSON(message.rewardChangeInterval)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgUpdateAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.rewardWeight !== undefined && object.rewardWeight !== null) {
            message.rewardWeight = object.rewardWeight;
        }
        else {
            message.rewardWeight = "";
        }
        if (object.takeRate !== undefined && object.takeRate !== null) {
            message.takeRate = object.takeRate;
        }
        else {
            message.takeRate = "";
        }
        if (object.rewardChangeRate !== undefined && object.rewardChangeRate !== null) {
            message.rewardChangeRate = object.rewardChangeRate;
        }
        else {
            message.rewardChangeRate = "";
        }
        if (object.rewardChangeInterval !== undefined && object.rewardChangeInterval !== null) {
            message.rewardChangeInterval = duration_1.Duration.fromPartial(object.rewardChangeInterval);
        }
        else {
            message.rewardChangeInterval = undefined;
        }
        return message;
    },
};
const baseMsgDeleteAllianceProposal = { title: "", description: "", denom: "" };
exports.MsgDeleteAllianceProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgDeleteAllianceProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgDeleteAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgDeleteAllianceProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=gov.js.map