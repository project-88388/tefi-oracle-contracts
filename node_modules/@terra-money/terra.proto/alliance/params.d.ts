import Long from "long";
import _m0 from "protobufjs/minimal";
import { Duration } from "../google/protobuf/duration";
export declare const protobufPackage = "alliance.alliance";
export interface Params {
    rewardDelayTime?: Duration;
    /** Time interval between consecutive applications of `take_rate` */
    takeRateClaimInterval?: Duration;
    /** Last application of `take_rate` on assets */
    lastTakeRateClaimTime?: Date;
}
export interface RewardHistory {
    denom: string;
    index: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial(object: DeepPartial<Params>): Params;
};
export declare const RewardHistory: {
    encode(message: RewardHistory, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RewardHistory;
    fromJSON(object: any): RewardHistory;
    toJSON(message: RewardHistory): unknown;
    fromPartial(object: DeepPartial<RewardHistory>): RewardHistory;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
