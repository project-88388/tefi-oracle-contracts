"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RewardHistory = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../google/protobuf/duration");
const timestamp_1 = require("../google/protobuf/timestamp");
exports.protobufPackage = "alliance.alliance";
const baseParams = {};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rewardDelayTime !== undefined) {
            duration_1.Duration.encode(message.rewardDelayTime, writer.uint32(10).fork()).ldelim();
        }
        if (message.takeRateClaimInterval !== undefined) {
            duration_1.Duration.encode(message.takeRateClaimInterval, writer.uint32(18).fork()).ldelim();
        }
        if (message.lastTakeRateClaimTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.lastTakeRateClaimTime), writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardDelayTime = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.takeRateClaimInterval = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.lastTakeRateClaimTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        if (object.rewardDelayTime !== undefined && object.rewardDelayTime !== null) {
            message.rewardDelayTime = duration_1.Duration.fromJSON(object.rewardDelayTime);
        }
        else {
            message.rewardDelayTime = undefined;
        }
        if (object.takeRateClaimInterval !== undefined && object.takeRateClaimInterval !== null) {
            message.takeRateClaimInterval = duration_1.Duration.fromJSON(object.takeRateClaimInterval);
        }
        else {
            message.takeRateClaimInterval = undefined;
        }
        if (object.lastTakeRateClaimTime !== undefined && object.lastTakeRateClaimTime !== null) {
            message.lastTakeRateClaimTime = fromJsonTimestamp(object.lastTakeRateClaimTime);
        }
        else {
            message.lastTakeRateClaimTime = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rewardDelayTime !== undefined &&
            (obj.rewardDelayTime = message.rewardDelayTime ? duration_1.Duration.toJSON(message.rewardDelayTime) : undefined);
        message.takeRateClaimInterval !== undefined &&
            (obj.takeRateClaimInterval = message.takeRateClaimInterval
                ? duration_1.Duration.toJSON(message.takeRateClaimInterval)
                : undefined);
        message.lastTakeRateClaimTime !== undefined &&
            (obj.lastTakeRateClaimTime = message.lastTakeRateClaimTime.toISOString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        if (object.rewardDelayTime !== undefined && object.rewardDelayTime !== null) {
            message.rewardDelayTime = duration_1.Duration.fromPartial(object.rewardDelayTime);
        }
        else {
            message.rewardDelayTime = undefined;
        }
        if (object.takeRateClaimInterval !== undefined && object.takeRateClaimInterval !== null) {
            message.takeRateClaimInterval = duration_1.Duration.fromPartial(object.takeRateClaimInterval);
        }
        else {
            message.takeRateClaimInterval = undefined;
        }
        if (object.lastTakeRateClaimTime !== undefined && object.lastTakeRateClaimTime !== null) {
            message.lastTakeRateClaimTime = object.lastTakeRateClaimTime;
        }
        else {
            message.lastTakeRateClaimTime = undefined;
        }
        return message;
    },
};
const baseRewardHistory = { denom: "", index: "" };
exports.RewardHistory = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.index !== "") {
            writer.uint32(18).string(message.index);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRewardHistory);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.index = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRewardHistory);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.index !== undefined && object.index !== null) {
            message.index = String(object.index);
        }
        else {
            message.index = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.index !== undefined && (obj.index = message.index);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRewardHistory);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.index !== undefined && object.index !== null) {
            message.index = object.index;
        }
        else {
            message.index = "";
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=params.js.map