import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Coin } from "../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "alliance.alliance";
export interface MsgDelegate {
    delegatorAddress: string;
    validatorAddress: string;
    amount?: Coin;
}
export interface MsgDelegateResponse {
}
export interface MsgUndelegate {
    delegatorAddress: string;
    validatorAddress: string;
    amount?: Coin;
}
export interface MsgUndelegateResponse {
}
export interface MsgRedelegate {
    delegatorAddress: string;
    validatorSrcAddress: string;
    validatorDstAddress: string;
    amount?: Coin;
}
export interface MsgRedelegateResponse {
}
export interface MsgClaimDelegationRewards {
    delegatorAddress: string;
    validatorAddress: string;
    denom: string;
}
export interface MsgClaimDelegationRewardsResponse {
}
export declare const MsgDelegate: {
    encode(message: MsgDelegate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDelegate;
    fromJSON(object: any): MsgDelegate;
    toJSON(message: MsgDelegate): unknown;
    fromPartial(object: DeepPartial<MsgDelegate>): MsgDelegate;
};
export declare const MsgDelegateResponse: {
    encode(_: MsgDelegateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDelegateResponse;
    fromJSON(_: any): MsgDelegateResponse;
    toJSON(_: MsgDelegateResponse): unknown;
    fromPartial(_: DeepPartial<MsgDelegateResponse>): MsgDelegateResponse;
};
export declare const MsgUndelegate: {
    encode(message: MsgUndelegate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUndelegate;
    fromJSON(object: any): MsgUndelegate;
    toJSON(message: MsgUndelegate): unknown;
    fromPartial(object: DeepPartial<MsgUndelegate>): MsgUndelegate;
};
export declare const MsgUndelegateResponse: {
    encode(_: MsgUndelegateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUndelegateResponse;
    fromJSON(_: any): MsgUndelegateResponse;
    toJSON(_: MsgUndelegateResponse): unknown;
    fromPartial(_: DeepPartial<MsgUndelegateResponse>): MsgUndelegateResponse;
};
export declare const MsgRedelegate: {
    encode(message: MsgRedelegate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedelegate;
    fromJSON(object: any): MsgRedelegate;
    toJSON(message: MsgRedelegate): unknown;
    fromPartial(object: DeepPartial<MsgRedelegate>): MsgRedelegate;
};
export declare const MsgRedelegateResponse: {
    encode(_: MsgRedelegateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedelegateResponse;
    fromJSON(_: any): MsgRedelegateResponse;
    toJSON(_: MsgRedelegateResponse): unknown;
    fromPartial(_: DeepPartial<MsgRedelegateResponse>): MsgRedelegateResponse;
};
export declare const MsgClaimDelegationRewards: {
    encode(message: MsgClaimDelegationRewards, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimDelegationRewards;
    fromJSON(object: any): MsgClaimDelegationRewards;
    toJSON(message: MsgClaimDelegationRewards): unknown;
    fromPartial(object: DeepPartial<MsgClaimDelegationRewards>): MsgClaimDelegationRewards;
};
export declare const MsgClaimDelegationRewardsResponse: {
    encode(_: MsgClaimDelegationRewardsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimDelegationRewardsResponse;
    fromJSON(_: any): MsgClaimDelegationRewardsResponse;
    toJSON(_: MsgClaimDelegationRewardsResponse): unknown;
    fromPartial(_: DeepPartial<MsgClaimDelegationRewardsResponse>): MsgClaimDelegationRewardsResponse;
};
export interface Msg {
    Delegate(request: DeepPartial<MsgDelegate>, metadata?: grpc.Metadata): Promise<MsgDelegateResponse>;
    Redelegate(request: DeepPartial<MsgRedelegate>, metadata?: grpc.Metadata): Promise<MsgRedelegateResponse>;
    Undelegate(request: DeepPartial<MsgUndelegate>, metadata?: grpc.Metadata): Promise<MsgUndelegateResponse>;
    ClaimDelegationRewards(request: DeepPartial<MsgClaimDelegationRewards>, metadata?: grpc.Metadata): Promise<MsgClaimDelegationRewardsResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    Delegate(request: DeepPartial<MsgDelegate>, metadata?: grpc.Metadata): Promise<MsgDelegateResponse>;
    Redelegate(request: DeepPartial<MsgRedelegate>, metadata?: grpc.Metadata): Promise<MsgRedelegateResponse>;
    Undelegate(request: DeepPartial<MsgUndelegate>, metadata?: grpc.Metadata): Promise<MsgUndelegateResponse>;
    ClaimDelegationRewards(request: DeepPartial<MsgClaimDelegationRewards>, metadata?: grpc.Metadata): Promise<MsgClaimDelegationRewardsResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgDelegateDesc: UnaryMethodDefinitionish;
export declare const MsgRedelegateDesc: UnaryMethodDefinitionish;
export declare const MsgUndelegateDesc: UnaryMethodDefinitionish;
export declare const MsgClaimDelegationRewardsDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
