"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrateFromInfo = exports.PackageReference = exports.ModuleDescriptor = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.app.v1alpha1";
const baseModuleDescriptor = { goImport: "" };
exports.ModuleDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.goImport !== "") {
            writer.uint32(10).string(message.goImport);
        }
        for (const v of message.usePackage) {
            exports.PackageReference.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.canMigrateFrom) {
            exports.MigrateFromInfo.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseModuleDescriptor);
        message.usePackage = [];
        message.canMigrateFrom = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.goImport = reader.string();
                    break;
                case 2:
                    message.usePackage.push(exports.PackageReference.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.canMigrateFrom.push(exports.MigrateFromInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseModuleDescriptor);
        message.usePackage = [];
        message.canMigrateFrom = [];
        if (object.goImport !== undefined && object.goImport !== null) {
            message.goImport = String(object.goImport);
        }
        else {
            message.goImport = "";
        }
        if (object.usePackage !== undefined && object.usePackage !== null) {
            for (const e of object.usePackage) {
                message.usePackage.push(exports.PackageReference.fromJSON(e));
            }
        }
        if (object.canMigrateFrom !== undefined && object.canMigrateFrom !== null) {
            for (const e of object.canMigrateFrom) {
                message.canMigrateFrom.push(exports.MigrateFromInfo.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.goImport !== undefined && (obj.goImport = message.goImport);
        if (message.usePackage) {
            obj.usePackage = message.usePackage.map((e) => (e ? exports.PackageReference.toJSON(e) : undefined));
        }
        else {
            obj.usePackage = [];
        }
        if (message.canMigrateFrom) {
            obj.canMigrateFrom = message.canMigrateFrom.map((e) => (e ? exports.MigrateFromInfo.toJSON(e) : undefined));
        }
        else {
            obj.canMigrateFrom = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseModuleDescriptor);
        message.usePackage = [];
        message.canMigrateFrom = [];
        if (object.goImport !== undefined && object.goImport !== null) {
            message.goImport = object.goImport;
        }
        else {
            message.goImport = "";
        }
        if (object.usePackage !== undefined && object.usePackage !== null) {
            for (const e of object.usePackage) {
                message.usePackage.push(exports.PackageReference.fromPartial(e));
            }
        }
        if (object.canMigrateFrom !== undefined && object.canMigrateFrom !== null) {
            for (const e of object.canMigrateFrom) {
                message.canMigrateFrom.push(exports.MigrateFromInfo.fromPartial(e));
            }
        }
        return message;
    },
};
const basePackageReference = { name: "", revision: 0 };
exports.PackageReference = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.revision !== 0) {
            writer.uint32(16).uint32(message.revision);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePackageReference);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.revision = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePackageReference);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.revision !== undefined && object.revision !== null) {
            message.revision = Number(object.revision);
        }
        else {
            message.revision = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.revision !== undefined && (obj.revision = message.revision);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePackageReference);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.revision !== undefined && object.revision !== null) {
            message.revision = object.revision;
        }
        else {
            message.revision = 0;
        }
        return message;
    },
};
const baseMigrateFromInfo = { module: "" };
exports.MigrateFromInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.module !== "") {
            writer.uint32(10).string(message.module);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMigrateFromInfo);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.module = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMigrateFromInfo);
        if (object.module !== undefined && object.module !== null) {
            message.module = String(object.module);
        }
        else {
            message.module = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.module !== undefined && (obj.module = message.module);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMigrateFromInfo);
        if (object.module !== undefined && object.module !== null) {
            message.module = object.module;
        }
        else {
            message.module = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=module.js.map