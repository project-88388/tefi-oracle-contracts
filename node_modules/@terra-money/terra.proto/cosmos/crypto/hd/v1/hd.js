"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BIP44Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.crypto.hd.v1";
const baseBIP44Params = { purpose: 0, coinType: 0, account: 0, change: false, addressIndex: 0 };
exports.BIP44Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.purpose !== 0) {
            writer.uint32(8).uint32(message.purpose);
        }
        if (message.coinType !== 0) {
            writer.uint32(16).uint32(message.coinType);
        }
        if (message.account !== 0) {
            writer.uint32(24).uint32(message.account);
        }
        if (message.change === true) {
            writer.uint32(32).bool(message.change);
        }
        if (message.addressIndex !== 0) {
            writer.uint32(40).uint32(message.addressIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseBIP44Params);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.purpose = reader.uint32();
                    break;
                case 2:
                    message.coinType = reader.uint32();
                    break;
                case 3:
                    message.account = reader.uint32();
                    break;
                case 4:
                    message.change = reader.bool();
                    break;
                case 5:
                    message.addressIndex = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseBIP44Params);
        if (object.purpose !== undefined && object.purpose !== null) {
            message.purpose = Number(object.purpose);
        }
        else {
            message.purpose = 0;
        }
        if (object.coinType !== undefined && object.coinType !== null) {
            message.coinType = Number(object.coinType);
        }
        else {
            message.coinType = 0;
        }
        if (object.account !== undefined && object.account !== null) {
            message.account = Number(object.account);
        }
        else {
            message.account = 0;
        }
        if (object.change !== undefined && object.change !== null) {
            message.change = Boolean(object.change);
        }
        else {
            message.change = false;
        }
        if (object.addressIndex !== undefined && object.addressIndex !== null) {
            message.addressIndex = Number(object.addressIndex);
        }
        else {
            message.addressIndex = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.purpose !== undefined && (obj.purpose = message.purpose);
        message.coinType !== undefined && (obj.coinType = message.coinType);
        message.account !== undefined && (obj.account = message.account);
        message.change !== undefined && (obj.change = message.change);
        message.addressIndex !== undefined && (obj.addressIndex = message.addressIndex);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseBIP44Params);
        if (object.purpose !== undefined && object.purpose !== null) {
            message.purpose = object.purpose;
        }
        else {
            message.purpose = 0;
        }
        if (object.coinType !== undefined && object.coinType !== null) {
            message.coinType = object.coinType;
        }
        else {
            message.coinType = 0;
        }
        if (object.account !== undefined && object.account !== null) {
            message.account = object.account;
        }
        else {
            message.account = 0;
        }
        if (object.change !== undefined && object.change !== null) {
            message.change = object.change;
        }
        else {
            message.change = false;
        }
        if (object.addressIndex !== undefined && object.addressIndex !== null) {
            message.addressIndex = object.addressIndex;
        }
        else {
            message.addressIndex = 0;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=hd.js.map