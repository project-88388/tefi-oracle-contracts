"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const types_1 = require("../../../cosmos/group/v1/types");
exports.protobufPackage = "cosmos.group.v1";
const baseGenesisState = {
    groupSeq: long_1.default.UZERO,
    groupPolicySeq: long_1.default.UZERO,
    proposalSeq: long_1.default.UZERO,
};
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.groupSeq.isZero()) {
            writer.uint32(8).uint64(message.groupSeq);
        }
        for (const v of message.groups) {
            types_1.GroupInfo.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.groupMembers) {
            types_1.GroupMember.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (!message.groupPolicySeq.isZero()) {
            writer.uint32(32).uint64(message.groupPolicySeq);
        }
        for (const v of message.groupPolicies) {
            types_1.GroupPolicyInfo.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (!message.proposalSeq.isZero()) {
            writer.uint32(48).uint64(message.proposalSeq);
        }
        for (const v of message.proposals) {
            types_1.Proposal.encode(v, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.votes) {
            types_1.Vote.encode(v, writer.uint32(66).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.groups = [];
        message.groupMembers = [];
        message.groupPolicies = [];
        message.proposals = [];
        message.votes = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.groupSeq = reader.uint64();
                    break;
                case 2:
                    message.groups.push(types_1.GroupInfo.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.groupMembers.push(types_1.GroupMember.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.groupPolicySeq = reader.uint64();
                    break;
                case 5:
                    message.groupPolicies.push(types_1.GroupPolicyInfo.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.proposalSeq = reader.uint64();
                    break;
                case 7:
                    message.proposals.push(types_1.Proposal.decode(reader, reader.uint32()));
                    break;
                case 8:
                    message.votes.push(types_1.Vote.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.groups = [];
        message.groupMembers = [];
        message.groupPolicies = [];
        message.proposals = [];
        message.votes = [];
        if (object.groupSeq !== undefined && object.groupSeq !== null) {
            message.groupSeq = long_1.default.fromString(object.groupSeq);
        }
        else {
            message.groupSeq = long_1.default.UZERO;
        }
        if (object.groups !== undefined && object.groups !== null) {
            for (const e of object.groups) {
                message.groups.push(types_1.GroupInfo.fromJSON(e));
            }
        }
        if (object.groupMembers !== undefined && object.groupMembers !== null) {
            for (const e of object.groupMembers) {
                message.groupMembers.push(types_1.GroupMember.fromJSON(e));
            }
        }
        if (object.groupPolicySeq !== undefined && object.groupPolicySeq !== null) {
            message.groupPolicySeq = long_1.default.fromString(object.groupPolicySeq);
        }
        else {
            message.groupPolicySeq = long_1.default.UZERO;
        }
        if (object.groupPolicies !== undefined && object.groupPolicies !== null) {
            for (const e of object.groupPolicies) {
                message.groupPolicies.push(types_1.GroupPolicyInfo.fromJSON(e));
            }
        }
        if (object.proposalSeq !== undefined && object.proposalSeq !== null) {
            message.proposalSeq = long_1.default.fromString(object.proposalSeq);
        }
        else {
            message.proposalSeq = long_1.default.UZERO;
        }
        if (object.proposals !== undefined && object.proposals !== null) {
            for (const e of object.proposals) {
                message.proposals.push(types_1.Proposal.fromJSON(e));
            }
        }
        if (object.votes !== undefined && object.votes !== null) {
            for (const e of object.votes) {
                message.votes.push(types_1.Vote.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.groupSeq !== undefined && (obj.groupSeq = (message.groupSeq || long_1.default.UZERO).toString());
        if (message.groups) {
            obj.groups = message.groups.map((e) => (e ? types_1.GroupInfo.toJSON(e) : undefined));
        }
        else {
            obj.groups = [];
        }
        if (message.groupMembers) {
            obj.groupMembers = message.groupMembers.map((e) => (e ? types_1.GroupMember.toJSON(e) : undefined));
        }
        else {
            obj.groupMembers = [];
        }
        message.groupPolicySeq !== undefined &&
            (obj.groupPolicySeq = (message.groupPolicySeq || long_1.default.UZERO).toString());
        if (message.groupPolicies) {
            obj.groupPolicies = message.groupPolicies.map((e) => (e ? types_1.GroupPolicyInfo.toJSON(e) : undefined));
        }
        else {
            obj.groupPolicies = [];
        }
        message.proposalSeq !== undefined && (obj.proposalSeq = (message.proposalSeq || long_1.default.UZERO).toString());
        if (message.proposals) {
            obj.proposals = message.proposals.map((e) => (e ? types_1.Proposal.toJSON(e) : undefined));
        }
        else {
            obj.proposals = [];
        }
        if (message.votes) {
            obj.votes = message.votes.map((e) => (e ? types_1.Vote.toJSON(e) : undefined));
        }
        else {
            obj.votes = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.groups = [];
        message.groupMembers = [];
        message.groupPolicies = [];
        message.proposals = [];
        message.votes = [];
        if (object.groupSeq !== undefined && object.groupSeq !== null) {
            message.groupSeq = object.groupSeq;
        }
        else {
            message.groupSeq = long_1.default.UZERO;
        }
        if (object.groups !== undefined && object.groups !== null) {
            for (const e of object.groups) {
                message.groups.push(types_1.GroupInfo.fromPartial(e));
            }
        }
        if (object.groupMembers !== undefined && object.groupMembers !== null) {
            for (const e of object.groupMembers) {
                message.groupMembers.push(types_1.GroupMember.fromPartial(e));
            }
        }
        if (object.groupPolicySeq !== undefined && object.groupPolicySeq !== null) {
            message.groupPolicySeq = object.groupPolicySeq;
        }
        else {
            message.groupPolicySeq = long_1.default.UZERO;
        }
        if (object.groupPolicies !== undefined && object.groupPolicies !== null) {
            for (const e of object.groupPolicies) {
                message.groupPolicies.push(types_1.GroupPolicyInfo.fromPartial(e));
            }
        }
        if (object.proposalSeq !== undefined && object.proposalSeq !== null) {
            message.proposalSeq = object.proposalSeq;
        }
        else {
            message.proposalSeq = long_1.default.UZERO;
        }
        if (object.proposals !== undefined && object.proposals !== null) {
            for (const e of object.proposals) {
                message.proposals.push(types_1.Proposal.fromPartial(e));
            }
        }
        if (object.votes !== undefined && object.votes !== null) {
            for (const e of object.votes) {
                message.votes.push(types_1.Vote.fromPartial(e));
            }
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map