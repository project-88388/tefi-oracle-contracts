"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SingletonDescriptor = exports.SecondaryIndexDescriptor = exports.PrimaryKeyDescriptor = exports.TableDescriptor = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "cosmos.orm.v1";
const baseTableDescriptor = { id: 0 };
exports.TableDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.primaryKey !== undefined) {
            exports.PrimaryKeyDescriptor.encode(message.primaryKey, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.index) {
            exports.SecondaryIndexDescriptor.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.id !== 0) {
            writer.uint32(24).uint32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseTableDescriptor);
        message.index = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.primaryKey = exports.PrimaryKeyDescriptor.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.index.push(exports.SecondaryIndexDescriptor.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseTableDescriptor);
        message.index = [];
        if (object.primaryKey !== undefined && object.primaryKey !== null) {
            message.primaryKey = exports.PrimaryKeyDescriptor.fromJSON(object.primaryKey);
        }
        else {
            message.primaryKey = undefined;
        }
        if (object.index !== undefined && object.index !== null) {
            for (const e of object.index) {
                message.index.push(exports.SecondaryIndexDescriptor.fromJSON(e));
            }
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = Number(object.id);
        }
        else {
            message.id = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.primaryKey !== undefined &&
            (obj.primaryKey = message.primaryKey ? exports.PrimaryKeyDescriptor.toJSON(message.primaryKey) : undefined);
        if (message.index) {
            obj.index = message.index.map((e) => (e ? exports.SecondaryIndexDescriptor.toJSON(e) : undefined));
        }
        else {
            obj.index = [];
        }
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseTableDescriptor);
        message.index = [];
        if (object.primaryKey !== undefined && object.primaryKey !== null) {
            message.primaryKey = exports.PrimaryKeyDescriptor.fromPartial(object.primaryKey);
        }
        else {
            message.primaryKey = undefined;
        }
        if (object.index !== undefined && object.index !== null) {
            for (const e of object.index) {
                message.index.push(exports.SecondaryIndexDescriptor.fromPartial(e));
            }
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = 0;
        }
        return message;
    },
};
const basePrimaryKeyDescriptor = { fields: "", autoIncrement: false };
exports.PrimaryKeyDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fields !== "") {
            writer.uint32(10).string(message.fields);
        }
        if (message.autoIncrement === true) {
            writer.uint32(16).bool(message.autoIncrement);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePrimaryKeyDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fields = reader.string();
                    break;
                case 2:
                    message.autoIncrement = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePrimaryKeyDescriptor);
        if (object.fields !== undefined && object.fields !== null) {
            message.fields = String(object.fields);
        }
        else {
            message.fields = "";
        }
        if (object.autoIncrement !== undefined && object.autoIncrement !== null) {
            message.autoIncrement = Boolean(object.autoIncrement);
        }
        else {
            message.autoIncrement = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fields !== undefined && (obj.fields = message.fields);
        message.autoIncrement !== undefined && (obj.autoIncrement = message.autoIncrement);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePrimaryKeyDescriptor);
        if (object.fields !== undefined && object.fields !== null) {
            message.fields = object.fields;
        }
        else {
            message.fields = "";
        }
        if (object.autoIncrement !== undefined && object.autoIncrement !== null) {
            message.autoIncrement = object.autoIncrement;
        }
        else {
            message.autoIncrement = false;
        }
        return message;
    },
};
const baseSecondaryIndexDescriptor = { fields: "", id: 0, unique: false };
exports.SecondaryIndexDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.fields !== "") {
            writer.uint32(10).string(message.fields);
        }
        if (message.id !== 0) {
            writer.uint32(16).uint32(message.id);
        }
        if (message.unique === true) {
            writer.uint32(24).bool(message.unique);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseSecondaryIndexDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fields = reader.string();
                    break;
                case 2:
                    message.id = reader.uint32();
                    break;
                case 3:
                    message.unique = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseSecondaryIndexDescriptor);
        if (object.fields !== undefined && object.fields !== null) {
            message.fields = String(object.fields);
        }
        else {
            message.fields = "";
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = Number(object.id);
        }
        else {
            message.id = 0;
        }
        if (object.unique !== undefined && object.unique !== null) {
            message.unique = Boolean(object.unique);
        }
        else {
            message.unique = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.fields !== undefined && (obj.fields = message.fields);
        message.id !== undefined && (obj.id = message.id);
        message.unique !== undefined && (obj.unique = message.unique);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseSecondaryIndexDescriptor);
        if (object.fields !== undefined && object.fields !== null) {
            message.fields = object.fields;
        }
        else {
            message.fields = "";
        }
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = 0;
        }
        if (object.unique !== undefined && object.unique !== null) {
            message.unique = object.unique;
        }
        else {
            message.unique = false;
        }
        return message;
    },
};
const baseSingletonDescriptor = { id: 0 };
exports.SingletonDescriptor = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== 0) {
            writer.uint32(8).uint32(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseSingletonDescriptor);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseSingletonDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = Number(object.id);
        }
        else {
            message.id = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseSingletonDescriptor);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = 0;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=orm.js.map