"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AcceptedMessagesFilter = exports.AcceptedMessageKeysFilter = exports.AllowAllMessagesFilter = exports.CombinedLimit = exports.MaxFundsLimit = exports.MaxCallsLimit = exports.ContractGrant = exports.ContractMigrationAuthorization = exports.ContractExecutionAuthorization = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const any_1 = require("../../../google/protobuf/any");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "cosmwasm.wasm.v1";
const baseContractExecutionAuthorization = {};
exports.ContractExecutionAuthorization = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.grants) {
            exports.ContractGrant.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseContractExecutionAuthorization);
        message.grants = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.grants.push(exports.ContractGrant.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseContractExecutionAuthorization);
        message.grants = [];
        if (object.grants !== undefined && object.grants !== null) {
            for (const e of object.grants) {
                message.grants.push(exports.ContractGrant.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.grants) {
            obj.grants = message.grants.map((e) => (e ? exports.ContractGrant.toJSON(e) : undefined));
        }
        else {
            obj.grants = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseContractExecutionAuthorization);
        message.grants = [];
        if (object.grants !== undefined && object.grants !== null) {
            for (const e of object.grants) {
                message.grants.push(exports.ContractGrant.fromPartial(e));
            }
        }
        return message;
    },
};
const baseContractMigrationAuthorization = {};
exports.ContractMigrationAuthorization = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.grants) {
            exports.ContractGrant.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseContractMigrationAuthorization);
        message.grants = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.grants.push(exports.ContractGrant.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseContractMigrationAuthorization);
        message.grants = [];
        if (object.grants !== undefined && object.grants !== null) {
            for (const e of object.grants) {
                message.grants.push(exports.ContractGrant.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.grants) {
            obj.grants = message.grants.map((e) => (e ? exports.ContractGrant.toJSON(e) : undefined));
        }
        else {
            obj.grants = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseContractMigrationAuthorization);
        message.grants = [];
        if (object.grants !== undefined && object.grants !== null) {
            for (const e of object.grants) {
                message.grants.push(exports.ContractGrant.fromPartial(e));
            }
        }
        return message;
    },
};
const baseContractGrant = { contract: "" };
exports.ContractGrant = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.contract !== "") {
            writer.uint32(10).string(message.contract);
        }
        if (message.limit !== undefined) {
            any_1.Any.encode(message.limit, writer.uint32(18).fork()).ldelim();
        }
        if (message.filter !== undefined) {
            any_1.Any.encode(message.filter, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseContractGrant);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contract = reader.string();
                    break;
                case 2:
                    message.limit = any_1.Any.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.filter = any_1.Any.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseContractGrant);
        if (object.contract !== undefined && object.contract !== null) {
            message.contract = String(object.contract);
        }
        else {
            message.contract = "";
        }
        if (object.limit !== undefined && object.limit !== null) {
            message.limit = any_1.Any.fromJSON(object.limit);
        }
        else {
            message.limit = undefined;
        }
        if (object.filter !== undefined && object.filter !== null) {
            message.filter = any_1.Any.fromJSON(object.filter);
        }
        else {
            message.filter = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.contract !== undefined && (obj.contract = message.contract);
        message.limit !== undefined && (obj.limit = message.limit ? any_1.Any.toJSON(message.limit) : undefined);
        message.filter !== undefined && (obj.filter = message.filter ? any_1.Any.toJSON(message.filter) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseContractGrant);
        if (object.contract !== undefined && object.contract !== null) {
            message.contract = object.contract;
        }
        else {
            message.contract = "";
        }
        if (object.limit !== undefined && object.limit !== null) {
            message.limit = any_1.Any.fromPartial(object.limit);
        }
        else {
            message.limit = undefined;
        }
        if (object.filter !== undefined && object.filter !== null) {
            message.filter = any_1.Any.fromPartial(object.filter);
        }
        else {
            message.filter = undefined;
        }
        return message;
    },
};
const baseMaxCallsLimit = { remaining: long_1.default.UZERO };
exports.MaxCallsLimit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.remaining.isZero()) {
            writer.uint32(8).uint64(message.remaining);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMaxCallsLimit);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.remaining = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMaxCallsLimit);
        if (object.remaining !== undefined && object.remaining !== null) {
            message.remaining = long_1.default.fromString(object.remaining);
        }
        else {
            message.remaining = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.remaining !== undefined && (obj.remaining = (message.remaining || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMaxCallsLimit);
        if (object.remaining !== undefined && object.remaining !== null) {
            message.remaining = object.remaining;
        }
        else {
            message.remaining = long_1.default.UZERO;
        }
        return message;
    },
};
const baseMaxFundsLimit = {};
exports.MaxFundsLimit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.amounts) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMaxFundsLimit);
        message.amounts = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amounts.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMaxFundsLimit);
        message.amounts = [];
        if (object.amounts !== undefined && object.amounts !== null) {
            for (const e of object.amounts) {
                message.amounts.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.amounts) {
            obj.amounts = message.amounts.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.amounts = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMaxFundsLimit);
        message.amounts = [];
        if (object.amounts !== undefined && object.amounts !== null) {
            for (const e of object.amounts) {
                message.amounts.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseCombinedLimit = { callsRemaining: long_1.default.UZERO };
exports.CombinedLimit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.callsRemaining.isZero()) {
            writer.uint32(8).uint64(message.callsRemaining);
        }
        for (const v of message.amounts) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseCombinedLimit);
        message.amounts = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.callsRemaining = reader.uint64();
                    break;
                case 2:
                    message.amounts.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseCombinedLimit);
        message.amounts = [];
        if (object.callsRemaining !== undefined && object.callsRemaining !== null) {
            message.callsRemaining = long_1.default.fromString(object.callsRemaining);
        }
        else {
            message.callsRemaining = long_1.default.UZERO;
        }
        if (object.amounts !== undefined && object.amounts !== null) {
            for (const e of object.amounts) {
                message.amounts.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.callsRemaining !== undefined &&
            (obj.callsRemaining = (message.callsRemaining || long_1.default.UZERO).toString());
        if (message.amounts) {
            obj.amounts = message.amounts.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.amounts = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseCombinedLimit);
        message.amounts = [];
        if (object.callsRemaining !== undefined && object.callsRemaining !== null) {
            message.callsRemaining = object.callsRemaining;
        }
        else {
            message.callsRemaining = long_1.default.UZERO;
        }
        if (object.amounts !== undefined && object.amounts !== null) {
            for (const e of object.amounts) {
                message.amounts.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseAllowAllMessagesFilter = {};
exports.AllowAllMessagesFilter = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAllowAllMessagesFilter);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseAllowAllMessagesFilter);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseAllowAllMessagesFilter);
        return message;
    },
};
const baseAcceptedMessageKeysFilter = { keys: "" };
exports.AcceptedMessageKeysFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.keys) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAcceptedMessageKeysFilter);
        message.keys = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.keys.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAcceptedMessageKeysFilter);
        message.keys = [];
        if (object.keys !== undefined && object.keys !== null) {
            for (const e of object.keys) {
                message.keys.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.keys) {
            obj.keys = message.keys.map((e) => e);
        }
        else {
            obj.keys = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAcceptedMessageKeysFilter);
        message.keys = [];
        if (object.keys !== undefined && object.keys !== null) {
            for (const e of object.keys) {
                message.keys.push(e);
            }
        }
        return message;
    },
};
const baseAcceptedMessagesFilter = {};
exports.AcceptedMessagesFilter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.messages) {
            writer.uint32(10).bytes(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAcceptedMessagesFilter);
        message.messages = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.messages.push(reader.bytes());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAcceptedMessagesFilter);
        message.messages = [];
        if (object.messages !== undefined && object.messages !== null) {
            for (const e of object.messages) {
                message.messages.push(bytesFromBase64(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.messages) {
            obj.messages = message.messages.map((e) => base64FromBytes(e !== undefined ? e : new Uint8Array()));
        }
        else {
            obj.messages = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAcceptedMessagesFilter);
        message.messages = [];
        if (object.messages !== undefined && object.messages !== null) {
            for (const e of object.messages) {
                message.messages.push(e);
            }
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=authz.js.map