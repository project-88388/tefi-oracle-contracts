"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForwardRelayerAddress = exports.RegisteredCounterpartyPayee = exports.RegisteredPayee = exports.FeeEnabledChannel = exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const channel_1 = require("../../../../ibc/core/channel/v1/channel");
const fee_1 = require("../../../../ibc/applications/fee/v1/fee");
exports.protobufPackage = "ibc.applications.fee.v1";
const baseGenesisState = {};
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.identifiedFees) {
            fee_1.IdentifiedPacketFees.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.feeEnabledChannels) {
            exports.FeeEnabledChannel.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.registeredPayees) {
            exports.RegisteredPayee.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.registeredCounterpartyPayees) {
            exports.RegisteredCounterpartyPayee.encode(v, writer.uint32(34).fork()).ldelim();
        }
        for (const v of message.forwardRelayers) {
            exports.ForwardRelayerAddress.encode(v, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.identifiedFees = [];
        message.feeEnabledChannels = [];
        message.registeredPayees = [];
        message.registeredCounterpartyPayees = [];
        message.forwardRelayers = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.identifiedFees.push(fee_1.IdentifiedPacketFees.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.feeEnabledChannels.push(exports.FeeEnabledChannel.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.registeredPayees.push(exports.RegisteredPayee.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.registeredCounterpartyPayees.push(exports.RegisteredCounterpartyPayee.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.forwardRelayers.push(exports.ForwardRelayerAddress.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.identifiedFees = [];
        message.feeEnabledChannels = [];
        message.registeredPayees = [];
        message.registeredCounterpartyPayees = [];
        message.forwardRelayers = [];
        if (object.identifiedFees !== undefined && object.identifiedFees !== null) {
            for (const e of object.identifiedFees) {
                message.identifiedFees.push(fee_1.IdentifiedPacketFees.fromJSON(e));
            }
        }
        if (object.feeEnabledChannels !== undefined && object.feeEnabledChannels !== null) {
            for (const e of object.feeEnabledChannels) {
                message.feeEnabledChannels.push(exports.FeeEnabledChannel.fromJSON(e));
            }
        }
        if (object.registeredPayees !== undefined && object.registeredPayees !== null) {
            for (const e of object.registeredPayees) {
                message.registeredPayees.push(exports.RegisteredPayee.fromJSON(e));
            }
        }
        if (object.registeredCounterpartyPayees !== undefined && object.registeredCounterpartyPayees !== null) {
            for (const e of object.registeredCounterpartyPayees) {
                message.registeredCounterpartyPayees.push(exports.RegisteredCounterpartyPayee.fromJSON(e));
            }
        }
        if (object.forwardRelayers !== undefined && object.forwardRelayers !== null) {
            for (const e of object.forwardRelayers) {
                message.forwardRelayers.push(exports.ForwardRelayerAddress.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.identifiedFees) {
            obj.identifiedFees = message.identifiedFees.map((e) => e ? fee_1.IdentifiedPacketFees.toJSON(e) : undefined);
        }
        else {
            obj.identifiedFees = [];
        }
        if (message.feeEnabledChannels) {
            obj.feeEnabledChannels = message.feeEnabledChannels.map((e) => e ? exports.FeeEnabledChannel.toJSON(e) : undefined);
        }
        else {
            obj.feeEnabledChannels = [];
        }
        if (message.registeredPayees) {
            obj.registeredPayees = message.registeredPayees.map((e) => (e ? exports.RegisteredPayee.toJSON(e) : undefined));
        }
        else {
            obj.registeredPayees = [];
        }
        if (message.registeredCounterpartyPayees) {
            obj.registeredCounterpartyPayees = message.registeredCounterpartyPayees.map((e) => e ? exports.RegisteredCounterpartyPayee.toJSON(e) : undefined);
        }
        else {
            obj.registeredCounterpartyPayees = [];
        }
        if (message.forwardRelayers) {
            obj.forwardRelayers = message.forwardRelayers.map((e) => e ? exports.ForwardRelayerAddress.toJSON(e) : undefined);
        }
        else {
            obj.forwardRelayers = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.identifiedFees = [];
        message.feeEnabledChannels = [];
        message.registeredPayees = [];
        message.registeredCounterpartyPayees = [];
        message.forwardRelayers = [];
        if (object.identifiedFees !== undefined && object.identifiedFees !== null) {
            for (const e of object.identifiedFees) {
                message.identifiedFees.push(fee_1.IdentifiedPacketFees.fromPartial(e));
            }
        }
        if (object.feeEnabledChannels !== undefined && object.feeEnabledChannels !== null) {
            for (const e of object.feeEnabledChannels) {
                message.feeEnabledChannels.push(exports.FeeEnabledChannel.fromPartial(e));
            }
        }
        if (object.registeredPayees !== undefined && object.registeredPayees !== null) {
            for (const e of object.registeredPayees) {
                message.registeredPayees.push(exports.RegisteredPayee.fromPartial(e));
            }
        }
        if (object.registeredCounterpartyPayees !== undefined && object.registeredCounterpartyPayees !== null) {
            for (const e of object.registeredCounterpartyPayees) {
                message.registeredCounterpartyPayees.push(exports.RegisteredCounterpartyPayee.fromPartial(e));
            }
        }
        if (object.forwardRelayers !== undefined && object.forwardRelayers !== null) {
            for (const e of object.forwardRelayers) {
                message.forwardRelayers.push(exports.ForwardRelayerAddress.fromPartial(e));
            }
        }
        return message;
    },
};
const baseFeeEnabledChannel = { portId: "", channelId: "" };
exports.FeeEnabledChannel = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.portId !== "") {
            writer.uint32(10).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(18).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseFeeEnabledChannel);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.portId = reader.string();
                    break;
                case 2:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseFeeEnabledChannel);
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = String(object.portId);
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseFeeEnabledChannel);
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = object.portId;
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseRegisteredPayee = { channelId: "", relayer: "", payee: "" };
exports.RegisteredPayee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        if (message.relayer !== "") {
            writer.uint32(18).string(message.relayer);
        }
        if (message.payee !== "") {
            writer.uint32(26).string(message.payee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRegisteredPayee);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channelId = reader.string();
                    break;
                case 2:
                    message.relayer = reader.string();
                    break;
                case 3:
                    message.payee = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRegisteredPayee);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.relayer !== undefined && object.relayer !== null) {
            message.relayer = String(object.relayer);
        }
        else {
            message.relayer = "";
        }
        if (object.payee !== undefined && object.payee !== null) {
            message.payee = String(object.payee);
        }
        else {
            message.payee = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.relayer !== undefined && (obj.relayer = message.relayer);
        message.payee !== undefined && (obj.payee = message.payee);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRegisteredPayee);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.relayer !== undefined && object.relayer !== null) {
            message.relayer = object.relayer;
        }
        else {
            message.relayer = "";
        }
        if (object.payee !== undefined && object.payee !== null) {
            message.payee = object.payee;
        }
        else {
            message.payee = "";
        }
        return message;
    },
};
const baseRegisteredCounterpartyPayee = { channelId: "", relayer: "", counterpartyPayee: "" };
exports.RegisteredCounterpartyPayee = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        if (message.relayer !== "") {
            writer.uint32(18).string(message.relayer);
        }
        if (message.counterpartyPayee !== "") {
            writer.uint32(26).string(message.counterpartyPayee);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRegisteredCounterpartyPayee);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channelId = reader.string();
                    break;
                case 2:
                    message.relayer = reader.string();
                    break;
                case 3:
                    message.counterpartyPayee = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRegisteredCounterpartyPayee);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.relayer !== undefined && object.relayer !== null) {
            message.relayer = String(object.relayer);
        }
        else {
            message.relayer = "";
        }
        if (object.counterpartyPayee !== undefined && object.counterpartyPayee !== null) {
            message.counterpartyPayee = String(object.counterpartyPayee);
        }
        else {
            message.counterpartyPayee = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.relayer !== undefined && (obj.relayer = message.relayer);
        message.counterpartyPayee !== undefined && (obj.counterpartyPayee = message.counterpartyPayee);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRegisteredCounterpartyPayee);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.relayer !== undefined && object.relayer !== null) {
            message.relayer = object.relayer;
        }
        else {
            message.relayer = "";
        }
        if (object.counterpartyPayee !== undefined && object.counterpartyPayee !== null) {
            message.counterpartyPayee = object.counterpartyPayee;
        }
        else {
            message.counterpartyPayee = "";
        }
        return message;
    },
};
const baseForwardRelayerAddress = { address: "" };
exports.ForwardRelayerAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseForwardRelayerAddress);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                case 2:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseForwardRelayerAddress);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromJSON(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        message.packetId !== undefined &&
            (obj.packetId = message.packetId ? channel_1.PacketId.toJSON(message.packetId) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseForwardRelayerAddress);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.packetId !== undefined && object.packetId !== null) {
            message.packetId = channel_1.PacketId.fromPartial(object.packetId);
        }
        else {
            message.packetId = undefined;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map