"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClaimRecord = exports.actionToJSON = exports.actionFromJSON = exports.Action = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.claim";
var Action;
(function (Action) {
    Action[Action["ACTION_FREE"] = 0] = "ACTION_FREE";
    Action[Action["ACTION_LIQUID_STAKE"] = 1] = "ACTION_LIQUID_STAKE";
    Action[Action["ACTION_DELEGATE_STAKE"] = 2] = "ACTION_DELEGATE_STAKE";
    Action[Action["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Action = exports.Action || (exports.Action = {}));
function actionFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTION_FREE":
            return Action.ACTION_FREE;
        case 1:
        case "ACTION_LIQUID_STAKE":
            return Action.ACTION_LIQUID_STAKE;
        case 2:
        case "ACTION_DELEGATE_STAKE":
            return Action.ACTION_DELEGATE_STAKE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Action.UNRECOGNIZED;
    }
}
exports.actionFromJSON = actionFromJSON;
function actionToJSON(object) {
    switch (object) {
        case Action.ACTION_FREE:
            return "ACTION_FREE";
        case Action.ACTION_LIQUID_STAKE:
            return "ACTION_LIQUID_STAKE";
        case Action.ACTION_DELEGATE_STAKE:
            return "ACTION_DELEGATE_STAKE";
        default:
            return "UNKNOWN";
    }
}
exports.actionToJSON = actionToJSON;
const baseClaimRecord = { airdropIdentifier: "", address: "", weight: "", actionCompleted: false };
exports.ClaimRecord = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.weight !== "") {
            writer.uint32(26).string(message.weight);
        }
        writer.uint32(34).fork();
        for (const v of message.actionCompleted) {
            writer.bool(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseClaimRecord);
        message.actionCompleted = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 3:
                    message.weight = reader.string();
                    break;
                case 4:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.actionCompleted.push(reader.bool());
                        }
                    }
                    else {
                        message.actionCompleted.push(reader.bool());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseClaimRecord);
        message.actionCompleted = [];
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.weight !== undefined && object.weight !== null) {
            message.weight = String(object.weight);
        }
        else {
            message.weight = "";
        }
        if (object.actionCompleted !== undefined && object.actionCompleted !== null) {
            for (const e of object.actionCompleted) {
                message.actionCompleted.push(Boolean(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        message.address !== undefined && (obj.address = message.address);
        message.weight !== undefined && (obj.weight = message.weight);
        if (message.actionCompleted) {
            obj.actionCompleted = message.actionCompleted.map((e) => e);
        }
        else {
            obj.actionCompleted = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseClaimRecord);
        message.actionCompleted = [];
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.weight !== undefined && object.weight !== null) {
            message.weight = object.weight;
        }
        else {
            message.weight = "";
        }
        if (object.actionCompleted !== undefined && object.actionCompleted !== null) {
            for (const e of object.actionCompleted) {
                message.actionCompleted.push(e);
            }
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=claim.js.map