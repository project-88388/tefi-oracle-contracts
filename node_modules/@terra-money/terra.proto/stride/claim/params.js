"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Airdrop = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../../google/protobuf/duration");
const timestamp_1 = require("../../google/protobuf/timestamp");
exports.protobufPackage = "stride.claim";
const baseParams = {};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.airdrops) {
            exports.Airdrop.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        message.airdrops = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdrops.push(exports.Airdrop.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        message.airdrops = [];
        if (object.airdrops !== undefined && object.airdrops !== null) {
            for (const e of object.airdrops) {
                message.airdrops.push(exports.Airdrop.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.airdrops) {
            obj.airdrops = message.airdrops.map((e) => (e ? exports.Airdrop.toJSON(e) : undefined));
        }
        else {
            obj.airdrops = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        message.airdrops = [];
        if (object.airdrops !== undefined && object.airdrops !== null) {
            for (const e of object.airdrops) {
                message.airdrops.push(exports.Airdrop.fromPartial(e));
            }
        }
        return message;
    },
};
const baseAirdrop = {
    airdropIdentifier: "",
    claimDenom: "",
    distributorAddress: "",
    claimedSoFar: "",
};
exports.Airdrop = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        if (message.airdropStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.airdropStartTime), writer.uint32(18).fork()).ldelim();
        }
        if (message.airdropDuration !== undefined) {
            duration_1.Duration.encode(message.airdropDuration, writer.uint32(26).fork()).ldelim();
        }
        if (message.claimDenom !== "") {
            writer.uint32(34).string(message.claimDenom);
        }
        if (message.distributorAddress !== "") {
            writer.uint32(42).string(message.distributorAddress);
        }
        if (message.claimedSoFar !== "") {
            writer.uint32(50).string(message.claimedSoFar);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAirdrop);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                case 2:
                    message.airdropStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.airdropDuration = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.claimDenom = reader.string();
                    break;
                case 5:
                    message.distributorAddress = reader.string();
                    break;
                case 6:
                    message.claimedSoFar = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAirdrop);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.airdropStartTime !== undefined && object.airdropStartTime !== null) {
            message.airdropStartTime = fromJsonTimestamp(object.airdropStartTime);
        }
        else {
            message.airdropStartTime = undefined;
        }
        if (object.airdropDuration !== undefined && object.airdropDuration !== null) {
            message.airdropDuration = duration_1.Duration.fromJSON(object.airdropDuration);
        }
        else {
            message.airdropDuration = undefined;
        }
        if (object.claimDenom !== undefined && object.claimDenom !== null) {
            message.claimDenom = String(object.claimDenom);
        }
        else {
            message.claimDenom = "";
        }
        if (object.distributorAddress !== undefined && object.distributorAddress !== null) {
            message.distributorAddress = String(object.distributorAddress);
        }
        else {
            message.distributorAddress = "";
        }
        if (object.claimedSoFar !== undefined && object.claimedSoFar !== null) {
            message.claimedSoFar = String(object.claimedSoFar);
        }
        else {
            message.claimedSoFar = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        message.airdropStartTime !== undefined && (obj.airdropStartTime = message.airdropStartTime.toISOString());
        message.airdropDuration !== undefined &&
            (obj.airdropDuration = message.airdropDuration ? duration_1.Duration.toJSON(message.airdropDuration) : undefined);
        message.claimDenom !== undefined && (obj.claimDenom = message.claimDenom);
        message.distributorAddress !== undefined && (obj.distributorAddress = message.distributorAddress);
        message.claimedSoFar !== undefined && (obj.claimedSoFar = message.claimedSoFar);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAirdrop);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.airdropStartTime !== undefined && object.airdropStartTime !== null) {
            message.airdropStartTime = object.airdropStartTime;
        }
        else {
            message.airdropStartTime = undefined;
        }
        if (object.airdropDuration !== undefined && object.airdropDuration !== null) {
            message.airdropDuration = duration_1.Duration.fromPartial(object.airdropDuration);
        }
        else {
            message.airdropDuration = undefined;
        }
        if (object.claimDenom !== undefined && object.claimDenom !== null) {
            message.claimDenom = object.claimDenom;
        }
        else {
            message.claimDenom = "";
        }
        if (object.distributorAddress !== undefined && object.distributorAddress !== null) {
            message.distributorAddress = object.distributorAddress;
        }
        else {
            message.distributorAddress = "";
        }
        if (object.claimedSoFar !== undefined && object.claimedSoFar !== null) {
            message.claimedSoFar = object.claimedSoFar;
        }
        else {
            message.claimedSoFar = "";
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=params.js.map