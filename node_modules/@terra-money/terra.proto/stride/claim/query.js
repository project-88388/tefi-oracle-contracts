"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryUserVestingsDesc = exports.QueryTotalClaimableDesc = exports.QueryClaimableForActionDesc = exports.QueryClaimRecordDesc = exports.QueryParamsDesc = exports.QueryDistributorAccountBalanceDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryUserVestingsResponse = exports.QueryUserVestingsRequest = exports.QueryTotalClaimableResponse = exports.QueryTotalClaimableRequest = exports.QueryClaimableForActionResponse = exports.QueryClaimableForActionRequest = exports.QueryClaimRecordResponse = exports.QueryClaimRecordRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryDistributorAccountBalanceResponse = exports.QueryDistributorAccountBalanceRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const params_1 = require("../../stride/claim/params");
const claim_1 = require("../../stride/claim/claim");
const browser_headers_1 = require("browser-headers");
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const vesting_1 = require("../../stride/vesting/vesting");
exports.protobufPackage = "stride.claim";
const baseQueryDistributorAccountBalanceRequest = { airdropIdentifier: "" };
exports.QueryDistributorAccountBalanceRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryDistributorAccountBalanceRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryDistributorAccountBalanceRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryDistributorAccountBalanceRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        return message;
    },
};
const baseQueryDistributorAccountBalanceResponse = {};
exports.QueryDistributorAccountBalanceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.distributorAccountBalance) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryDistributorAccountBalanceResponse);
        message.distributorAccountBalance = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.distributorAccountBalance.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryDistributorAccountBalanceResponse);
        message.distributorAccountBalance = [];
        if (object.distributorAccountBalance !== undefined && object.distributorAccountBalance !== null) {
            for (const e of object.distributorAccountBalance) {
                message.distributorAccountBalance.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.distributorAccountBalance) {
            obj.distributorAccountBalance = message.distributorAccountBalance.map((e) => e ? coin_1.Coin.toJSON(e) : undefined);
        }
        else {
            obj.distributorAccountBalance = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryDistributorAccountBalanceResponse);
        message.distributorAccountBalance = [];
        if (object.distributorAccountBalance !== undefined && object.distributorAccountBalance !== null) {
            for (const e of object.distributorAccountBalance) {
                message.distributorAccountBalance.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
const baseQueryClaimRecordRequest = { airdropIdentifier: "", address: "" };
exports.QueryClaimRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryClaimRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryClaimRecordRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryClaimRecordRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        return message;
    },
};
const baseQueryClaimRecordResponse = {};
exports.QueryClaimRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.claimRecord !== undefined) {
            claim_1.ClaimRecord.encode(message.claimRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryClaimRecordResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.claimRecord = claim_1.ClaimRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryClaimRecordResponse);
        if (object.claimRecord !== undefined && object.claimRecord !== null) {
            message.claimRecord = claim_1.ClaimRecord.fromJSON(object.claimRecord);
        }
        else {
            message.claimRecord = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.claimRecord !== undefined &&
            (obj.claimRecord = message.claimRecord ? claim_1.ClaimRecord.toJSON(message.claimRecord) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryClaimRecordResponse);
        if (object.claimRecord !== undefined && object.claimRecord !== null) {
            message.claimRecord = claim_1.ClaimRecord.fromPartial(object.claimRecord);
        }
        else {
            message.claimRecord = undefined;
        }
        return message;
    },
};
const baseQueryClaimableForActionRequest = { airdropIdentifier: "", address: "", action: 0 };
exports.QueryClaimableForActionRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.action !== 0) {
            writer.uint32(24).int32(message.action);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryClaimableForActionRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 3:
                    message.action = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryClaimableForActionRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = claim_1.actionFromJSON(object.action);
        }
        else {
            message.action = 0;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        message.address !== undefined && (obj.address = message.address);
        message.action !== undefined && (obj.action = claim_1.actionToJSON(message.action));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryClaimableForActionRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.action !== undefined && object.action !== null) {
            message.action = object.action;
        }
        else {
            message.action = 0;
        }
        return message;
    },
};
const baseQueryClaimableForActionResponse = {};
exports.QueryClaimableForActionResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryClaimableForActionResponse);
        message.coins = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryClaimableForActionResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.coins) {
            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.coins = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryClaimableForActionResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryTotalClaimableRequest = { airdropIdentifier: "", address: "", includeClaimed: false };
exports.QueryTotalClaimableRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.airdropIdentifier !== "") {
            writer.uint32(10).string(message.airdropIdentifier);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.includeClaimed === true) {
            writer.uint32(24).bool(message.includeClaimed);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalClaimableRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropIdentifier = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 3:
                    message.includeClaimed = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalClaimableRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.includeClaimed !== undefined && object.includeClaimed !== null) {
            message.includeClaimed = Boolean(object.includeClaimed);
        }
        else {
            message.includeClaimed = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        message.address !== undefined && (obj.address = message.address);
        message.includeClaimed !== undefined && (obj.includeClaimed = message.includeClaimed);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalClaimableRequest);
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.includeClaimed !== undefined && object.includeClaimed !== null) {
            message.includeClaimed = object.includeClaimed;
        }
        else {
            message.includeClaimed = false;
        }
        return message;
    },
};
const baseQueryTotalClaimableResponse = {};
exports.QueryTotalClaimableResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryTotalClaimableResponse);
        message.coins = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryTotalClaimableResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.coins) {
            obj.coins = message.coins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.coins = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryTotalClaimableResponse);
        message.coins = [];
        if (object.coins !== undefined && object.coins !== null) {
            for (const e of object.coins) {
                message.coins.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryUserVestingsRequest = { address: "" };
exports.QueryUserVestingsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.address !== "") {
            writer.uint32(10).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryUserVestingsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryUserVestingsRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryUserVestingsRequest);
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        return message;
    },
};
const baseQueryUserVestingsResponse = {};
exports.QueryUserVestingsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.spendableCoins) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.periods) {
            vesting_1.Period.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryUserVestingsResponse);
        message.spendableCoins = [];
        message.periods = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3:
                    message.spendableCoins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 1:
                    message.periods.push(vesting_1.Period.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryUserVestingsResponse);
        message.spendableCoins = [];
        message.periods = [];
        if (object.spendableCoins !== undefined && object.spendableCoins !== null) {
            for (const e of object.spendableCoins) {
                message.spendableCoins.push(coin_1.Coin.fromJSON(e));
            }
        }
        if (object.periods !== undefined && object.periods !== null) {
            for (const e of object.periods) {
                message.periods.push(vesting_1.Period.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.spendableCoins) {
            obj.spendableCoins = message.spendableCoins.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.spendableCoins = [];
        }
        if (message.periods) {
            obj.periods = message.periods.map((e) => (e ? vesting_1.Period.toJSON(e) : undefined));
        }
        else {
            obj.periods = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryUserVestingsResponse);
        message.spendableCoins = [];
        message.periods = [];
        if (object.spendableCoins !== undefined && object.spendableCoins !== null) {
            for (const e of object.spendableCoins) {
                message.spendableCoins.push(coin_1.Coin.fromPartial(e));
            }
        }
        if (object.periods !== undefined && object.periods !== null) {
            for (const e of object.periods) {
                message.periods.push(vesting_1.Period.fromPartial(e));
            }
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.DistributorAccountBalance = this.DistributorAccountBalance.bind(this);
        this.Params = this.Params.bind(this);
        this.ClaimRecord = this.ClaimRecord.bind(this);
        this.ClaimableForAction = this.ClaimableForAction.bind(this);
        this.TotalClaimable = this.TotalClaimable.bind(this);
        this.UserVestings = this.UserVestings.bind(this);
    }
    DistributorAccountBalance(request, metadata) {
        return this.rpc.unary(exports.QueryDistributorAccountBalanceDesc, exports.QueryDistributorAccountBalanceRequest.fromPartial(request), metadata);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
    ClaimRecord(request, metadata) {
        return this.rpc.unary(exports.QueryClaimRecordDesc, exports.QueryClaimRecordRequest.fromPartial(request), metadata);
    }
    ClaimableForAction(request, metadata) {
        return this.rpc.unary(exports.QueryClaimableForActionDesc, exports.QueryClaimableForActionRequest.fromPartial(request), metadata);
    }
    TotalClaimable(request, metadata) {
        return this.rpc.unary(exports.QueryTotalClaimableDesc, exports.QueryTotalClaimableRequest.fromPartial(request), metadata);
    }
    UserVestings(request, metadata) {
        return this.rpc.unary(exports.QueryUserVestingsDesc, exports.QueryUserVestingsRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "stride.claim.Query",
};
exports.QueryDistributorAccountBalanceDesc = {
    methodName: "DistributorAccountBalance",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryDistributorAccountBalanceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryDistributorAccountBalanceResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryClaimRecordDesc = {
    methodName: "ClaimRecord",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryClaimRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryClaimRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryClaimableForActionDesc = {
    methodName: "ClaimableForAction",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryClaimableForActionRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryClaimableForActionResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryTotalClaimableDesc = {
    methodName: "TotalClaimable",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryTotalClaimableRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryTotalClaimableResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryUserVestingsDesc = {
    methodName: "UserVestings",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryUserVestingsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryUserVestingsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map