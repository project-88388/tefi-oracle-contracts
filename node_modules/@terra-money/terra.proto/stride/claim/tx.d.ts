import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "stride.claim";
export interface MsgSetAirdropAllocations {
    allocator: string;
    airdropIdentifier: string;
    users: string[];
    weights: string[];
}
export interface MsgSetAirdropAllocationsResponse {
}
export interface MsgClaimFreeAmount {
    user: string;
}
export interface MsgClaimFreeAmountResponse {
    claimedAmount: Coin[];
}
export interface MsgCreateAirdrop {
    distributor: string;
    identifier: string;
    startTime: Long;
    duration: Long;
    denom: string;
}
export interface MsgCreateAirdropResponse {
}
export interface MsgDeleteAirdrop {
    distributor: string;
    identifier: string;
}
export interface MsgDeleteAirdropResponse {
}
export declare const MsgSetAirdropAllocations: {
    encode(message: MsgSetAirdropAllocations, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSetAirdropAllocations;
    fromJSON(object: any): MsgSetAirdropAllocations;
    toJSON(message: MsgSetAirdropAllocations): unknown;
    fromPartial(object: DeepPartial<MsgSetAirdropAllocations>): MsgSetAirdropAllocations;
};
export declare const MsgSetAirdropAllocationsResponse: {
    encode(_: MsgSetAirdropAllocationsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgSetAirdropAllocationsResponse;
    fromJSON(_: any): MsgSetAirdropAllocationsResponse;
    toJSON(_: MsgSetAirdropAllocationsResponse): unknown;
    fromPartial(_: DeepPartial<MsgSetAirdropAllocationsResponse>): MsgSetAirdropAllocationsResponse;
};
export declare const MsgClaimFreeAmount: {
    encode(message: MsgClaimFreeAmount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimFreeAmount;
    fromJSON(object: any): MsgClaimFreeAmount;
    toJSON(message: MsgClaimFreeAmount): unknown;
    fromPartial(object: DeepPartial<MsgClaimFreeAmount>): MsgClaimFreeAmount;
};
export declare const MsgClaimFreeAmountResponse: {
    encode(message: MsgClaimFreeAmountResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimFreeAmountResponse;
    fromJSON(object: any): MsgClaimFreeAmountResponse;
    toJSON(message: MsgClaimFreeAmountResponse): unknown;
    fromPartial(object: DeepPartial<MsgClaimFreeAmountResponse>): MsgClaimFreeAmountResponse;
};
export declare const MsgCreateAirdrop: {
    encode(message: MsgCreateAirdrop, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgCreateAirdrop;
    fromJSON(object: any): MsgCreateAirdrop;
    toJSON(message: MsgCreateAirdrop): unknown;
    fromPartial(object: DeepPartial<MsgCreateAirdrop>): MsgCreateAirdrop;
};
export declare const MsgCreateAirdropResponse: {
    encode(_: MsgCreateAirdropResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgCreateAirdropResponse;
    fromJSON(_: any): MsgCreateAirdropResponse;
    toJSON(_: MsgCreateAirdropResponse): unknown;
    fromPartial(_: DeepPartial<MsgCreateAirdropResponse>): MsgCreateAirdropResponse;
};
export declare const MsgDeleteAirdrop: {
    encode(message: MsgDeleteAirdrop, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeleteAirdrop;
    fromJSON(object: any): MsgDeleteAirdrop;
    toJSON(message: MsgDeleteAirdrop): unknown;
    fromPartial(object: DeepPartial<MsgDeleteAirdrop>): MsgDeleteAirdrop;
};
export declare const MsgDeleteAirdropResponse: {
    encode(_: MsgDeleteAirdropResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeleteAirdropResponse;
    fromJSON(_: any): MsgDeleteAirdropResponse;
    toJSON(_: MsgDeleteAirdropResponse): unknown;
    fromPartial(_: DeepPartial<MsgDeleteAirdropResponse>): MsgDeleteAirdropResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    SetAirdropAllocations(request: DeepPartial<MsgSetAirdropAllocations>, metadata?: grpc.Metadata): Promise<MsgSetAirdropAllocationsResponse>;
    ClaimFreeAmount(request: DeepPartial<MsgClaimFreeAmount>, metadata?: grpc.Metadata): Promise<MsgClaimFreeAmountResponse>;
    CreateAirdrop(request: DeepPartial<MsgCreateAirdrop>, metadata?: grpc.Metadata): Promise<MsgCreateAirdropResponse>;
    DeleteAirdrop(request: DeepPartial<MsgDeleteAirdrop>, metadata?: grpc.Metadata): Promise<MsgDeleteAirdropResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    SetAirdropAllocations(request: DeepPartial<MsgSetAirdropAllocations>, metadata?: grpc.Metadata): Promise<MsgSetAirdropAllocationsResponse>;
    ClaimFreeAmount(request: DeepPartial<MsgClaimFreeAmount>, metadata?: grpc.Metadata): Promise<MsgClaimFreeAmountResponse>;
    CreateAirdrop(request: DeepPartial<MsgCreateAirdrop>, metadata?: grpc.Metadata): Promise<MsgCreateAirdropResponse>;
    DeleteAirdrop(request: DeepPartial<MsgDeleteAirdrop>, metadata?: grpc.Metadata): Promise<MsgDeleteAirdropResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgSetAirdropAllocationsDesc: UnaryMethodDefinitionish;
export declare const MsgClaimFreeAmountDesc: UnaryMethodDefinitionish;
export declare const MsgCreateAirdropDesc: UnaryMethodDefinitionish;
export declare const MsgDeleteAirdropDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
