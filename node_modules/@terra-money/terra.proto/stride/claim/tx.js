"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.MsgDeleteAirdropDesc = exports.MsgCreateAirdropDesc = exports.MsgClaimFreeAmountDesc = exports.MsgSetAirdropAllocationsDesc = exports.MsgDesc = exports.MsgClientImpl = exports.MsgDeleteAirdropResponse = exports.MsgDeleteAirdrop = exports.MsgCreateAirdropResponse = exports.MsgCreateAirdrop = exports.MsgClaimFreeAmountResponse = exports.MsgClaimFreeAmount = exports.MsgSetAirdropAllocationsResponse = exports.MsgSetAirdropAllocations = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const browser_headers_1 = require("browser-headers");
const coin_1 = require("../../cosmos/base/v1beta1/coin");
exports.protobufPackage = "stride.claim";
const baseMsgSetAirdropAllocations = { allocator: "", airdropIdentifier: "", users: "", weights: "" };
exports.MsgSetAirdropAllocations = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.allocator !== "") {
            writer.uint32(10).string(message.allocator);
        }
        if (message.airdropIdentifier !== "") {
            writer.uint32(18).string(message.airdropIdentifier);
        }
        for (const v of message.users) {
            writer.uint32(26).string(v);
        }
        for (const v of message.weights) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSetAirdropAllocations);
        message.users = [];
        message.weights = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.allocator = reader.string();
                    break;
                case 2:
                    message.airdropIdentifier = reader.string();
                    break;
                case 3:
                    message.users.push(reader.string());
                    break;
                case 4:
                    message.weights.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgSetAirdropAllocations);
        message.users = [];
        message.weights = [];
        if (object.allocator !== undefined && object.allocator !== null) {
            message.allocator = String(object.allocator);
        }
        else {
            message.allocator = "";
        }
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = String(object.airdropIdentifier);
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.users !== undefined && object.users !== null) {
            for (const e of object.users) {
                message.users.push(String(e));
            }
        }
        if (object.weights !== undefined && object.weights !== null) {
            for (const e of object.weights) {
                message.weights.push(String(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.allocator !== undefined && (obj.allocator = message.allocator);
        message.airdropIdentifier !== undefined && (obj.airdropIdentifier = message.airdropIdentifier);
        if (message.users) {
            obj.users = message.users.map((e) => e);
        }
        else {
            obj.users = [];
        }
        if (message.weights) {
            obj.weights = message.weights.map((e) => e);
        }
        else {
            obj.weights = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgSetAirdropAllocations);
        message.users = [];
        message.weights = [];
        if (object.allocator !== undefined && object.allocator !== null) {
            message.allocator = object.allocator;
        }
        else {
            message.allocator = "";
        }
        if (object.airdropIdentifier !== undefined && object.airdropIdentifier !== null) {
            message.airdropIdentifier = object.airdropIdentifier;
        }
        else {
            message.airdropIdentifier = "";
        }
        if (object.users !== undefined && object.users !== null) {
            for (const e of object.users) {
                message.users.push(e);
            }
        }
        if (object.weights !== undefined && object.weights !== null) {
            for (const e of object.weights) {
                message.weights.push(e);
            }
        }
        return message;
    },
};
const baseMsgSetAirdropAllocationsResponse = {};
exports.MsgSetAirdropAllocationsResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgSetAirdropAllocationsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgSetAirdropAllocationsResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgSetAirdropAllocationsResponse);
        return message;
    },
};
const baseMsgClaimFreeAmount = { user: "" };
exports.MsgClaimFreeAmount = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.user !== "") {
            writer.uint32(10).string(message.user);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgClaimFreeAmount);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.user = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgClaimFreeAmount);
        if (object.user !== undefined && object.user !== null) {
            message.user = String(object.user);
        }
        else {
            message.user = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.user !== undefined && (obj.user = message.user);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgClaimFreeAmount);
        if (object.user !== undefined && object.user !== null) {
            message.user = object.user;
        }
        else {
            message.user = "";
        }
        return message;
    },
};
const baseMsgClaimFreeAmountResponse = {};
exports.MsgClaimFreeAmountResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.claimedAmount) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgClaimFreeAmountResponse);
        message.claimedAmount = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3:
                    message.claimedAmount.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgClaimFreeAmountResponse);
        message.claimedAmount = [];
        if (object.claimedAmount !== undefined && object.claimedAmount !== null) {
            for (const e of object.claimedAmount) {
                message.claimedAmount.push(coin_1.Coin.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.claimedAmount) {
            obj.claimedAmount = message.claimedAmount.map((e) => (e ? coin_1.Coin.toJSON(e) : undefined));
        }
        else {
            obj.claimedAmount = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgClaimFreeAmountResponse);
        message.claimedAmount = [];
        if (object.claimedAmount !== undefined && object.claimedAmount !== null) {
            for (const e of object.claimedAmount) {
                message.claimedAmount.push(coin_1.Coin.fromPartial(e));
            }
        }
        return message;
    },
};
const baseMsgCreateAirdrop = {
    distributor: "",
    identifier: "",
    startTime: long_1.default.UZERO,
    duration: long_1.default.UZERO,
    denom: "",
};
exports.MsgCreateAirdrop = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.distributor !== "") {
            writer.uint32(10).string(message.distributor);
        }
        if (message.identifier !== "") {
            writer.uint32(18).string(message.identifier);
        }
        if (!message.startTime.isZero()) {
            writer.uint32(24).uint64(message.startTime);
        }
        if (!message.duration.isZero()) {
            writer.uint32(32).uint64(message.duration);
        }
        if (message.denom !== "") {
            writer.uint32(42).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgCreateAirdrop);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.distributor = reader.string();
                    break;
                case 2:
                    message.identifier = reader.string();
                    break;
                case 3:
                    message.startTime = reader.uint64();
                    break;
                case 4:
                    message.duration = reader.uint64();
                    break;
                case 5:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgCreateAirdrop);
        if (object.distributor !== undefined && object.distributor !== null) {
            message.distributor = String(object.distributor);
        }
        else {
            message.distributor = "";
        }
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = String(object.identifier);
        }
        else {
            message.identifier = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = long_1.default.fromString(object.startTime);
        }
        else {
            message.startTime = long_1.default.UZERO;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = long_1.default.fromString(object.duration);
        }
        else {
            message.duration = long_1.default.UZERO;
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.distributor !== undefined && (obj.distributor = message.distributor);
        message.identifier !== undefined && (obj.identifier = message.identifier);
        message.startTime !== undefined && (obj.startTime = (message.startTime || long_1.default.UZERO).toString());
        message.duration !== undefined && (obj.duration = (message.duration || long_1.default.UZERO).toString());
        message.denom !== undefined && (obj.denom = message.denom);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgCreateAirdrop);
        if (object.distributor !== undefined && object.distributor !== null) {
            message.distributor = object.distributor;
        }
        else {
            message.distributor = "";
        }
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = object.identifier;
        }
        else {
            message.identifier = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = object.startTime;
        }
        else {
            message.startTime = long_1.default.UZERO;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = object.duration;
        }
        else {
            message.duration = long_1.default.UZERO;
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        return message;
    },
};
const baseMsgCreateAirdropResponse = {};
exports.MsgCreateAirdropResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgCreateAirdropResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgCreateAirdropResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgCreateAirdropResponse);
        return message;
    },
};
const baseMsgDeleteAirdrop = { distributor: "", identifier: "" };
exports.MsgDeleteAirdrop = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.distributor !== "") {
            writer.uint32(10).string(message.distributor);
        }
        if (message.identifier !== "") {
            writer.uint32(18).string(message.identifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgDeleteAirdrop);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.distributor = reader.string();
                    break;
                case 2:
                    message.identifier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMsgDeleteAirdrop);
        if (object.distributor !== undefined && object.distributor !== null) {
            message.distributor = String(object.distributor);
        }
        else {
            message.distributor = "";
        }
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = String(object.identifier);
        }
        else {
            message.identifier = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.distributor !== undefined && (obj.distributor = message.distributor);
        message.identifier !== undefined && (obj.identifier = message.identifier);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMsgDeleteAirdrop);
        if (object.distributor !== undefined && object.distributor !== null) {
            message.distributor = object.distributor;
        }
        else {
            message.distributor = "";
        }
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = object.identifier;
        }
        else {
            message.identifier = "";
        }
        return message;
    },
};
const baseMsgDeleteAirdropResponse = {};
exports.MsgDeleteAirdropResponse = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMsgDeleteAirdropResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseMsgDeleteAirdropResponse);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseMsgDeleteAirdropResponse);
        return message;
    },
};
class MsgClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.SetAirdropAllocations = this.SetAirdropAllocations.bind(this);
        this.ClaimFreeAmount = this.ClaimFreeAmount.bind(this);
        this.CreateAirdrop = this.CreateAirdrop.bind(this);
        this.DeleteAirdrop = this.DeleteAirdrop.bind(this);
    }
    SetAirdropAllocations(request, metadata) {
        return this.rpc.unary(exports.MsgSetAirdropAllocationsDesc, exports.MsgSetAirdropAllocations.fromPartial(request), metadata);
    }
    ClaimFreeAmount(request, metadata) {
        return this.rpc.unary(exports.MsgClaimFreeAmountDesc, exports.MsgClaimFreeAmount.fromPartial(request), metadata);
    }
    CreateAirdrop(request, metadata) {
        return this.rpc.unary(exports.MsgCreateAirdropDesc, exports.MsgCreateAirdrop.fromPartial(request), metadata);
    }
    DeleteAirdrop(request, metadata) {
        return this.rpc.unary(exports.MsgDeleteAirdropDesc, exports.MsgDeleteAirdrop.fromPartial(request), metadata);
    }
}
exports.MsgClientImpl = MsgClientImpl;
exports.MsgDesc = {
    serviceName: "stride.claim.Msg",
};
exports.MsgSetAirdropAllocationsDesc = {
    methodName: "SetAirdropAllocations",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgSetAirdropAllocations.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgSetAirdropAllocationsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgClaimFreeAmountDesc = {
    methodName: "ClaimFreeAmount",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgClaimFreeAmount.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgClaimFreeAmountResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgCreateAirdropDesc = {
    methodName: "CreateAirdrop",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgCreateAirdrop.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgCreateAirdropResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.MsgDeleteAirdropDesc = {
    methodName: "DeleteAirdrop",
    service: exports.MsgDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.MsgDeleteAirdrop.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.MsgDeleteAirdropResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=tx.js.map