"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.EpochInfo = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const duration_1 = require("../../google/protobuf/duration");
const timestamp_1 = require("../../google/protobuf/timestamp");
exports.protobufPackage = "stride.epochs";
const baseEpochInfo = {
    identifier: "",
    currentEpoch: long_1.default.ZERO,
    epochCountingStarted: false,
    currentEpochStartHeight: long_1.default.ZERO,
};
exports.EpochInfo = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        if (message.startTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.startTime), writer.uint32(18).fork()).ldelim();
        }
        if (message.duration !== undefined) {
            duration_1.Duration.encode(message.duration, writer.uint32(26).fork()).ldelim();
        }
        if (!message.currentEpoch.isZero()) {
            writer.uint32(32).int64(message.currentEpoch);
        }
        if (message.currentEpochStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.currentEpochStartTime), writer.uint32(42).fork()).ldelim();
        }
        if (message.epochCountingStarted === true) {
            writer.uint32(48).bool(message.epochCountingStarted);
        }
        if (!message.currentEpochStartHeight.isZero()) {
            writer.uint32(56).int64(message.currentEpochStartHeight);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEpochInfo);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.identifier = reader.string();
                    break;
                case 2:
                    message.startTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.duration = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.currentEpoch = reader.int64();
                    break;
                case 5:
                    message.currentEpochStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.epochCountingStarted = reader.bool();
                    break;
                case 7:
                    message.currentEpochStartHeight = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEpochInfo);
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = String(object.identifier);
        }
        else {
            message.identifier = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = fromJsonTimestamp(object.startTime);
        }
        else {
            message.startTime = undefined;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = duration_1.Duration.fromJSON(object.duration);
        }
        else {
            message.duration = undefined;
        }
        if (object.currentEpoch !== undefined && object.currentEpoch !== null) {
            message.currentEpoch = long_1.default.fromString(object.currentEpoch);
        }
        else {
            message.currentEpoch = long_1.default.ZERO;
        }
        if (object.currentEpochStartTime !== undefined && object.currentEpochStartTime !== null) {
            message.currentEpochStartTime = fromJsonTimestamp(object.currentEpochStartTime);
        }
        else {
            message.currentEpochStartTime = undefined;
        }
        if (object.epochCountingStarted !== undefined && object.epochCountingStarted !== null) {
            message.epochCountingStarted = Boolean(object.epochCountingStarted);
        }
        else {
            message.epochCountingStarted = false;
        }
        if (object.currentEpochStartHeight !== undefined && object.currentEpochStartHeight !== null) {
            message.currentEpochStartHeight = long_1.default.fromString(object.currentEpochStartHeight);
        }
        else {
            message.currentEpochStartHeight = long_1.default.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.identifier !== undefined && (obj.identifier = message.identifier);
        message.startTime !== undefined && (obj.startTime = message.startTime.toISOString());
        message.duration !== undefined &&
            (obj.duration = message.duration ? duration_1.Duration.toJSON(message.duration) : undefined);
        message.currentEpoch !== undefined && (obj.currentEpoch = (message.currentEpoch || long_1.default.ZERO).toString());
        message.currentEpochStartTime !== undefined &&
            (obj.currentEpochStartTime = message.currentEpochStartTime.toISOString());
        message.epochCountingStarted !== undefined && (obj.epochCountingStarted = message.epochCountingStarted);
        message.currentEpochStartHeight !== undefined &&
            (obj.currentEpochStartHeight = (message.currentEpochStartHeight || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEpochInfo);
        if (object.identifier !== undefined && object.identifier !== null) {
            message.identifier = object.identifier;
        }
        else {
            message.identifier = "";
        }
        if (object.startTime !== undefined && object.startTime !== null) {
            message.startTime = object.startTime;
        }
        else {
            message.startTime = undefined;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = duration_1.Duration.fromPartial(object.duration);
        }
        else {
            message.duration = undefined;
        }
        if (object.currentEpoch !== undefined && object.currentEpoch !== null) {
            message.currentEpoch = object.currentEpoch;
        }
        else {
            message.currentEpoch = long_1.default.ZERO;
        }
        if (object.currentEpochStartTime !== undefined && object.currentEpochStartTime !== null) {
            message.currentEpochStartTime = object.currentEpochStartTime;
        }
        else {
            message.currentEpochStartTime = undefined;
        }
        if (object.epochCountingStarted !== undefined && object.epochCountingStarted !== null) {
            message.epochCountingStarted = object.epochCountingStarted;
        }
        else {
            message.epochCountingStarted = false;
        }
        if (object.currentEpochStartHeight !== undefined && object.currentEpochStartHeight !== null) {
            message.currentEpochStartHeight = object.currentEpochStartHeight;
        }
        else {
            message.currentEpochStartHeight = long_1.default.ZERO;
        }
        return message;
    },
};
const baseGenesisState = {};
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.epochs) {
            exports.EpochInfo.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.epochs = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochs.push(exports.EpochInfo.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.epochs = [];
        if (object.epochs !== undefined && object.epochs !== null) {
            for (const e of object.epochs) {
                message.epochs.push(exports.EpochInfo.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.epochs) {
            obj.epochs = message.epochs.map((e) => (e ? exports.EpochInfo.toJSON(e) : undefined));
        }
        else {
            obj.epochs = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.epochs = [];
        if (object.epochs !== undefined && object.epochs !== null) {
            for (const e of object.epochs) {
                message.epochs.push(exports.EpochInfo.fromPartial(e));
            }
        }
        return message;
    },
};
function toTimestamp(date) {
    const seconds = numberToLong(date.getTime() / 1000);
    const nanos = (date.getTime() % 1000) * 1000000;
    return { seconds, nanos };
}
function fromTimestamp(t) {
    let millis = t.seconds.toNumber() * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function numberToLong(number) {
    return long_1.default.fromNumber(number);
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map