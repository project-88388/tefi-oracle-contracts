"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallbackData = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.icacallbacks";
const baseCallbackData = {
    callbackKey: "",
    portId: "",
    channelId: "",
    sequence: long_1.default.UZERO,
    callbackId: "",
};
exports.CallbackData = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.callbackKey !== "") {
            writer.uint32(10).string(message.callbackKey);
        }
        if (message.portId !== "") {
            writer.uint32(18).string(message.portId);
        }
        if (message.channelId !== "") {
            writer.uint32(26).string(message.channelId);
        }
        if (!message.sequence.isZero()) {
            writer.uint32(32).uint64(message.sequence);
        }
        if (message.callbackId !== "") {
            writer.uint32(42).string(message.callbackId);
        }
        if (message.callbackArgs.length !== 0) {
            writer.uint32(50).bytes(message.callbackArgs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseCallbackData);
        message.callbackArgs = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.callbackKey = reader.string();
                    break;
                case 2:
                    message.portId = reader.string();
                    break;
                case 3:
                    message.channelId = reader.string();
                    break;
                case 4:
                    message.sequence = reader.uint64();
                    break;
                case 5:
                    message.callbackId = reader.string();
                    break;
                case 6:
                    message.callbackArgs = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseCallbackData);
        message.callbackArgs = new Uint8Array();
        if (object.callbackKey !== undefined && object.callbackKey !== null) {
            message.callbackKey = String(object.callbackKey);
        }
        else {
            message.callbackKey = "";
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = String(object.portId);
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = long_1.default.fromString(object.sequence);
        }
        else {
            message.sequence = long_1.default.UZERO;
        }
        if (object.callbackId !== undefined && object.callbackId !== null) {
            message.callbackId = String(object.callbackId);
        }
        else {
            message.callbackId = "";
        }
        if (object.callbackArgs !== undefined && object.callbackArgs !== null) {
            message.callbackArgs = bytesFromBase64(object.callbackArgs);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.callbackKey !== undefined && (obj.callbackKey = message.callbackKey);
        message.portId !== undefined && (obj.portId = message.portId);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        message.callbackId !== undefined && (obj.callbackId = message.callbackId);
        message.callbackArgs !== undefined &&
            (obj.callbackArgs = base64FromBytes(message.callbackArgs !== undefined ? message.callbackArgs : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseCallbackData);
        if (object.callbackKey !== undefined && object.callbackKey !== null) {
            message.callbackKey = object.callbackKey;
        }
        else {
            message.callbackKey = "";
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = object.portId;
        }
        else {
            message.portId = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = object.sequence;
        }
        else {
            message.sequence = long_1.default.UZERO;
        }
        if (object.callbackId !== undefined && object.callbackId !== null) {
            message.callbackId = object.callbackId;
        }
        else {
            message.callbackId = "";
        }
        if (object.callbackArgs !== undefined && object.callbackArgs !== null) {
            message.callbackArgs = object.callbackArgs;
        }
        else {
            message.callbackArgs = new Uint8Array();
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=callback_data.js.map