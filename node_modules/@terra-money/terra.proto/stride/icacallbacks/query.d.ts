import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Params } from "../../stride/icacallbacks/params";
import { CallbackData } from "../../stride/icacallbacks/callback_data";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
export declare const protobufPackage = "stride.icacallbacks";
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params holds all the parameters of this module. */
    params?: Params;
}
export interface QueryGetCallbackDataRequest {
    callbackKey: string;
}
export interface QueryGetCallbackDataResponse {
    callbackData?: CallbackData;
}
export interface QueryAllCallbackDataRequest {
    pagination?: PageRequest;
}
export interface QueryAllCallbackDataResponse {
    callbackData: CallbackData[];
    pagination?: PageResponse;
}
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
export declare const QueryGetCallbackDataRequest: {
    encode(message: QueryGetCallbackDataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetCallbackDataRequest;
    fromJSON(object: any): QueryGetCallbackDataRequest;
    toJSON(message: QueryGetCallbackDataRequest): unknown;
    fromPartial(object: DeepPartial<QueryGetCallbackDataRequest>): QueryGetCallbackDataRequest;
};
export declare const QueryGetCallbackDataResponse: {
    encode(message: QueryGetCallbackDataResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetCallbackDataResponse;
    fromJSON(object: any): QueryGetCallbackDataResponse;
    toJSON(message: QueryGetCallbackDataResponse): unknown;
    fromPartial(object: DeepPartial<QueryGetCallbackDataResponse>): QueryGetCallbackDataResponse;
};
export declare const QueryAllCallbackDataRequest: {
    encode(message: QueryAllCallbackDataRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllCallbackDataRequest;
    fromJSON(object: any): QueryAllCallbackDataRequest;
    toJSON(message: QueryAllCallbackDataRequest): unknown;
    fromPartial(object: DeepPartial<QueryAllCallbackDataRequest>): QueryAllCallbackDataRequest;
};
export declare const QueryAllCallbackDataResponse: {
    encode(message: QueryAllCallbackDataResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllCallbackDataResponse;
    fromJSON(object: any): QueryAllCallbackDataResponse;
    toJSON(message: QueryAllCallbackDataResponse): unknown;
    fromPartial(object: DeepPartial<QueryAllCallbackDataResponse>): QueryAllCallbackDataResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Parameters queries the parameters of the module. */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    /** Queries a CallbackData by index. */
    CallbackData(request: DeepPartial<QueryGetCallbackDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetCallbackDataResponse>;
    /** Queries a list of CallbackData items. */
    CallbackDataAll(request: DeepPartial<QueryAllCallbackDataRequest>, metadata?: grpc.Metadata): Promise<QueryAllCallbackDataResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    CallbackData(request: DeepPartial<QueryGetCallbackDataRequest>, metadata?: grpc.Metadata): Promise<QueryGetCallbackDataResponse>;
    CallbackDataAll(request: DeepPartial<QueryAllCallbackDataRequest>, metadata?: grpc.Metadata): Promise<QueryAllCallbackDataResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
export declare const QueryCallbackDataDesc: UnaryMethodDefinitionish;
export declare const QueryCallbackDataAllDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
