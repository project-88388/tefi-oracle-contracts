"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.DataPoint = exports.Query = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.interchainquery.v1";
const baseQuery = {
    id: "",
    connectionId: "",
    chainId: "",
    queryType: "",
    callbackId: "",
    ttl: long_1.default.UZERO,
    requestSent: false,
};
exports.Query = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.connectionId !== "") {
            writer.uint32(18).string(message.connectionId);
        }
        if (message.chainId !== "") {
            writer.uint32(26).string(message.chainId);
        }
        if (message.queryType !== "") {
            writer.uint32(34).string(message.queryType);
        }
        if (message.request.length !== 0) {
            writer.uint32(42).bytes(message.request);
        }
        if (message.callbackId !== "") {
            writer.uint32(66).string(message.callbackId);
        }
        if (!message.ttl.isZero()) {
            writer.uint32(72).uint64(message.ttl);
        }
        if (message.requestSent === true) {
            writer.uint32(88).bool(message.requestSent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuery);
        message.request = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.connectionId = reader.string();
                    break;
                case 3:
                    message.chainId = reader.string();
                    break;
                case 4:
                    message.queryType = reader.string();
                    break;
                case 5:
                    message.request = reader.bytes();
                    break;
                case 8:
                    message.callbackId = reader.string();
                    break;
                case 9:
                    message.ttl = reader.uint64();
                    break;
                case 11:
                    message.requestSent = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQuery);
        message.request = new Uint8Array();
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = String(object.connectionId);
        }
        else {
            message.connectionId = "";
        }
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        if (object.queryType !== undefined && object.queryType !== null) {
            message.queryType = String(object.queryType);
        }
        else {
            message.queryType = "";
        }
        if (object.request !== undefined && object.request !== null) {
            message.request = bytesFromBase64(object.request);
        }
        if (object.callbackId !== undefined && object.callbackId !== null) {
            message.callbackId = String(object.callbackId);
        }
        else {
            message.callbackId = "";
        }
        if (object.ttl !== undefined && object.ttl !== null) {
            message.ttl = long_1.default.fromString(object.ttl);
        }
        else {
            message.ttl = long_1.default.UZERO;
        }
        if (object.requestSent !== undefined && object.requestSent !== null) {
            message.requestSent = Boolean(object.requestSent);
        }
        else {
            message.requestSent = false;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.queryType !== undefined && (obj.queryType = message.queryType);
        message.request !== undefined &&
            (obj.request = base64FromBytes(message.request !== undefined ? message.request : new Uint8Array()));
        message.callbackId !== undefined && (obj.callbackId = message.callbackId);
        message.ttl !== undefined && (obj.ttl = (message.ttl || long_1.default.UZERO).toString());
        message.requestSent !== undefined && (obj.requestSent = message.requestSent);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQuery);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = object.connectionId;
        }
        else {
            message.connectionId = "";
        }
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        if (object.queryType !== undefined && object.queryType !== null) {
            message.queryType = object.queryType;
        }
        else {
            message.queryType = "";
        }
        if (object.request !== undefined && object.request !== null) {
            message.request = object.request;
        }
        else {
            message.request = new Uint8Array();
        }
        if (object.callbackId !== undefined && object.callbackId !== null) {
            message.callbackId = object.callbackId;
        }
        else {
            message.callbackId = "";
        }
        if (object.ttl !== undefined && object.ttl !== null) {
            message.ttl = object.ttl;
        }
        else {
            message.ttl = long_1.default.UZERO;
        }
        if (object.requestSent !== undefined && object.requestSent !== null) {
            message.requestSent = object.requestSent;
        }
        else {
            message.requestSent = false;
        }
        return message;
    },
};
const baseDataPoint = { id: "", remoteHeight: "", localHeight: "" };
exports.DataPoint = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.remoteHeight !== "") {
            writer.uint32(18).string(message.remoteHeight);
        }
        if (message.localHeight !== "") {
            writer.uint32(26).string(message.localHeight);
        }
        if (message.value.length !== 0) {
            writer.uint32(34).bytes(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDataPoint);
        message.value = new Uint8Array();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.remoteHeight = reader.string();
                    break;
                case 3:
                    message.localHeight = reader.string();
                    break;
                case 4:
                    message.value = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDataPoint);
        message.value = new Uint8Array();
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        if (object.remoteHeight !== undefined && object.remoteHeight !== null) {
            message.remoteHeight = String(object.remoteHeight);
        }
        else {
            message.remoteHeight = "";
        }
        if (object.localHeight !== undefined && object.localHeight !== null) {
            message.localHeight = String(object.localHeight);
        }
        else {
            message.localHeight = "";
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = bytesFromBase64(object.value);
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.remoteHeight !== undefined && (obj.remoteHeight = message.remoteHeight);
        message.localHeight !== undefined && (obj.localHeight = message.localHeight);
        message.value !== undefined &&
            (obj.value = base64FromBytes(message.value !== undefined ? message.value : new Uint8Array()));
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseDataPoint);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        if (object.remoteHeight !== undefined && object.remoteHeight !== null) {
            message.remoteHeight = object.remoteHeight;
        }
        else {
            message.remoteHeight = "";
        }
        if (object.localHeight !== undefined && object.localHeight !== null) {
            message.localHeight = object.localHeight;
        }
        else {
            message.localHeight = "";
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = object.value;
        }
        else {
            message.value = new Uint8Array();
        }
        return message;
    },
};
const baseGenesisState = {};
exports.GenesisState = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.queries) {
            exports.Query.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseGenesisState);
        message.queries = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.queries.push(exports.Query.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseGenesisState);
        message.queries = [];
        if (object.queries !== undefined && object.queries !== null) {
            for (const e of object.queries) {
                message.queries.push(exports.Query.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.queries) {
            obj.queries = message.queries.map((e) => (e ? exports.Query.toJSON(e) : undefined));
        }
        else {
            obj.queries = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseGenesisState);
        message.queries = [];
        if (object.queries !== undefined && object.queries !== null) {
            for (const e of object.queries) {
                message.queries.push(exports.Query.fromPartial(e));
            }
        }
        return message;
    },
};
var globalThis = (() => {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
const atob = globalThis.atob || ((b64) => globalThis.Buffer.from(b64, "base64").toString("binary"));
function bytesFromBase64(b64) {
    const bin = atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
const btoa = globalThis.btoa || ((bin) => globalThis.Buffer.from(bin, "binary").toString("base64"));
function base64FromBytes(arr) {
    const bin = [];
    for (const byte of arr) {
        bin.push(String.fromCharCode(byte));
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=genesis.js.map