import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Query } from "../../../stride/interchainquery/v1/genesis";
export declare const protobufPackage = "stride.interchainquery.v1";
export interface QueryPendingQueriesRequest {
}
export interface QueryPendingQueriesResponse {
    pendingQueries: Query[];
}
export declare const QueryPendingQueriesRequest: {
    encode(_: QueryPendingQueriesRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPendingQueriesRequest;
    fromJSON(_: any): QueryPendingQueriesRequest;
    toJSON(_: QueryPendingQueriesRequest): unknown;
    fromPartial(_: DeepPartial<QueryPendingQueriesRequest>): QueryPendingQueriesRequest;
};
export declare const QueryPendingQueriesResponse: {
    encode(message: QueryPendingQueriesResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryPendingQueriesResponse;
    fromJSON(object: any): QueryPendingQueriesResponse;
    toJSON(message: QueryPendingQueriesResponse): unknown;
    fromPartial(object: DeepPartial<QueryPendingQueriesResponse>): QueryPendingQueriesResponse;
};
export interface QueryService {
    PendingQueries(request: DeepPartial<QueryPendingQueriesRequest>, metadata?: grpc.Metadata): Promise<QueryPendingQueriesResponse>;
}
export declare class QueryServiceClientImpl implements QueryService {
    private readonly rpc;
    constructor(rpc: Rpc);
    PendingQueries(request: DeepPartial<QueryPendingQueriesRequest>, metadata?: grpc.Metadata): Promise<QueryPendingQueriesResponse>;
}
export declare const QueryServiceDesc: {
    serviceName: string;
};
export declare const QueryServicePendingQueriesDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
