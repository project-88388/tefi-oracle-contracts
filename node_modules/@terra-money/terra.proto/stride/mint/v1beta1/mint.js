"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.DistributionProportions = exports.Minter = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.mint.v1beta1";
const baseMinter = { epochProvisions: "" };
exports.Minter = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochProvisions !== "") {
            writer.uint32(10).string(message.epochProvisions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseMinter);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochProvisions = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseMinter);
        if (object.epochProvisions !== undefined && object.epochProvisions !== null) {
            message.epochProvisions = String(object.epochProvisions);
        }
        else {
            message.epochProvisions = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochProvisions !== undefined && (obj.epochProvisions = message.epochProvisions);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseMinter);
        if (object.epochProvisions !== undefined && object.epochProvisions !== null) {
            message.epochProvisions = object.epochProvisions;
        }
        else {
            message.epochProvisions = "";
        }
        return message;
    },
};
const baseDistributionProportions = {
    staking: "",
    communityPoolGrowth: "",
    communityPoolSecurityBudget: "",
    strategicReserve: "",
};
exports.DistributionProportions = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.staking !== "") {
            writer.uint32(10).string(message.staking);
        }
        if (message.communityPoolGrowth !== "") {
            writer.uint32(18).string(message.communityPoolGrowth);
        }
        if (message.communityPoolSecurityBudget !== "") {
            writer.uint32(26).string(message.communityPoolSecurityBudget);
        }
        if (message.strategicReserve !== "") {
            writer.uint32(34).string(message.strategicReserve);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDistributionProportions);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.staking = reader.string();
                    break;
                case 2:
                    message.communityPoolGrowth = reader.string();
                    break;
                case 3:
                    message.communityPoolSecurityBudget = reader.string();
                    break;
                case 4:
                    message.strategicReserve = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDistributionProportions);
        if (object.staking !== undefined && object.staking !== null) {
            message.staking = String(object.staking);
        }
        else {
            message.staking = "";
        }
        if (object.communityPoolGrowth !== undefined && object.communityPoolGrowth !== null) {
            message.communityPoolGrowth = String(object.communityPoolGrowth);
        }
        else {
            message.communityPoolGrowth = "";
        }
        if (object.communityPoolSecurityBudget !== undefined && object.communityPoolSecurityBudget !== null) {
            message.communityPoolSecurityBudget = String(object.communityPoolSecurityBudget);
        }
        else {
            message.communityPoolSecurityBudget = "";
        }
        if (object.strategicReserve !== undefined && object.strategicReserve !== null) {
            message.strategicReserve = String(object.strategicReserve);
        }
        else {
            message.strategicReserve = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.staking !== undefined && (obj.staking = message.staking);
        message.communityPoolGrowth !== undefined && (obj.communityPoolGrowth = message.communityPoolGrowth);
        message.communityPoolSecurityBudget !== undefined &&
            (obj.communityPoolSecurityBudget = message.communityPoolSecurityBudget);
        message.strategicReserve !== undefined && (obj.strategicReserve = message.strategicReserve);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseDistributionProportions);
        if (object.staking !== undefined && object.staking !== null) {
            message.staking = object.staking;
        }
        else {
            message.staking = "";
        }
        if (object.communityPoolGrowth !== undefined && object.communityPoolGrowth !== null) {
            message.communityPoolGrowth = object.communityPoolGrowth;
        }
        else {
            message.communityPoolGrowth = "";
        }
        if (object.communityPoolSecurityBudget !== undefined && object.communityPoolSecurityBudget !== null) {
            message.communityPoolSecurityBudget = object.communityPoolSecurityBudget;
        }
        else {
            message.communityPoolSecurityBudget = "";
        }
        if (object.strategicReserve !== undefined && object.strategicReserve !== null) {
            message.strategicReserve = object.strategicReserve;
        }
        else {
            message.strategicReserve = "";
        }
        return message;
    },
};
const baseParams = {
    mintDenom: "",
    genesisEpochProvisions: "",
    epochIdentifier: "",
    reductionPeriodInEpochs: long_1.default.ZERO,
    reductionFactor: "",
    mintingRewardsDistributionStartEpoch: long_1.default.ZERO,
};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.mintDenom !== "") {
            writer.uint32(10).string(message.mintDenom);
        }
        if (message.genesisEpochProvisions !== "") {
            writer.uint32(18).string(message.genesisEpochProvisions);
        }
        if (message.epochIdentifier !== "") {
            writer.uint32(26).string(message.epochIdentifier);
        }
        if (!message.reductionPeriodInEpochs.isZero()) {
            writer.uint32(32).int64(message.reductionPeriodInEpochs);
        }
        if (message.reductionFactor !== "") {
            writer.uint32(42).string(message.reductionFactor);
        }
        if (message.distributionProportions !== undefined) {
            exports.DistributionProportions.encode(message.distributionProportions, writer.uint32(50).fork()).ldelim();
        }
        if (!message.mintingRewardsDistributionStartEpoch.isZero()) {
            writer.uint32(56).int64(message.mintingRewardsDistributionStartEpoch);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.mintDenom = reader.string();
                    break;
                case 2:
                    message.genesisEpochProvisions = reader.string();
                    break;
                case 3:
                    message.epochIdentifier = reader.string();
                    break;
                case 4:
                    message.reductionPeriodInEpochs = reader.int64();
                    break;
                case 5:
                    message.reductionFactor = reader.string();
                    break;
                case 6:
                    message.distributionProportions = exports.DistributionProportions.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.mintingRewardsDistributionStartEpoch = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = String(object.mintDenom);
        }
        else {
            message.mintDenom = "";
        }
        if (object.genesisEpochProvisions !== undefined && object.genesisEpochProvisions !== null) {
            message.genesisEpochProvisions = String(object.genesisEpochProvisions);
        }
        else {
            message.genesisEpochProvisions = "";
        }
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = String(object.epochIdentifier);
        }
        else {
            message.epochIdentifier = "";
        }
        if (object.reductionPeriodInEpochs !== undefined && object.reductionPeriodInEpochs !== null) {
            message.reductionPeriodInEpochs = long_1.default.fromString(object.reductionPeriodInEpochs);
        }
        else {
            message.reductionPeriodInEpochs = long_1.default.ZERO;
        }
        if (object.reductionFactor !== undefined && object.reductionFactor !== null) {
            message.reductionFactor = String(object.reductionFactor);
        }
        else {
            message.reductionFactor = "";
        }
        if (object.distributionProportions !== undefined && object.distributionProportions !== null) {
            message.distributionProportions = exports.DistributionProportions.fromJSON(object.distributionProportions);
        }
        else {
            message.distributionProportions = undefined;
        }
        if (object.mintingRewardsDistributionStartEpoch !== undefined &&
            object.mintingRewardsDistributionStartEpoch !== null) {
            message.mintingRewardsDistributionStartEpoch = long_1.default.fromString(object.mintingRewardsDistributionStartEpoch);
        }
        else {
            message.mintingRewardsDistributionStartEpoch = long_1.default.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.mintDenom !== undefined && (obj.mintDenom = message.mintDenom);
        message.genesisEpochProvisions !== undefined &&
            (obj.genesisEpochProvisions = message.genesisEpochProvisions);
        message.epochIdentifier !== undefined && (obj.epochIdentifier = message.epochIdentifier);
        message.reductionPeriodInEpochs !== undefined &&
            (obj.reductionPeriodInEpochs = (message.reductionPeriodInEpochs || long_1.default.ZERO).toString());
        message.reductionFactor !== undefined && (obj.reductionFactor = message.reductionFactor);
        message.distributionProportions !== undefined &&
            (obj.distributionProportions = message.distributionProportions
                ? exports.DistributionProportions.toJSON(message.distributionProportions)
                : undefined);
        message.mintingRewardsDistributionStartEpoch !== undefined &&
            (obj.mintingRewardsDistributionStartEpoch = (message.mintingRewardsDistributionStartEpoch || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        if (object.mintDenom !== undefined && object.mintDenom !== null) {
            message.mintDenom = object.mintDenom;
        }
        else {
            message.mintDenom = "";
        }
        if (object.genesisEpochProvisions !== undefined && object.genesisEpochProvisions !== null) {
            message.genesisEpochProvisions = object.genesisEpochProvisions;
        }
        else {
            message.genesisEpochProvisions = "";
        }
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = object.epochIdentifier;
        }
        else {
            message.epochIdentifier = "";
        }
        if (object.reductionPeriodInEpochs !== undefined && object.reductionPeriodInEpochs !== null) {
            message.reductionPeriodInEpochs = object.reductionPeriodInEpochs;
        }
        else {
            message.reductionPeriodInEpochs = long_1.default.ZERO;
        }
        if (object.reductionFactor !== undefined && object.reductionFactor !== null) {
            message.reductionFactor = object.reductionFactor;
        }
        else {
            message.reductionFactor = "";
        }
        if (object.distributionProportions !== undefined && object.distributionProportions !== null) {
            message.distributionProportions = exports.DistributionProportions.fromPartial(object.distributionProportions);
        }
        else {
            message.distributionProportions = undefined;
        }
        if (object.mintingRewardsDistributionStartEpoch !== undefined &&
            object.mintingRewardsDistributionStartEpoch !== null) {
            message.mintingRewardsDistributionStartEpoch = object.mintingRewardsDistributionStartEpoch;
        }
        else {
            message.mintingRewardsDistributionStartEpoch = long_1.default.ZERO;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=mint.js.map