"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResetRateLimitProposal = exports.RemoveRateLimitProposal = exports.UpdateRateLimitProposal = exports.AddRateLimitProposal = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.ratelimit";
const baseAddRateLimitProposal = {
    title: "",
    description: "",
    denom: "",
    channelId: "",
    maxPercentSend: "",
    maxPercentRecv: "",
    durationHours: long_1.default.UZERO,
    deposit: "",
};
exports.AddRateLimitProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        if (message.maxPercentSend !== "") {
            writer.uint32(42).string(message.maxPercentSend);
        }
        if (message.maxPercentRecv !== "") {
            writer.uint32(50).string(message.maxPercentRecv);
        }
        if (!message.durationHours.isZero()) {
            writer.uint32(56).uint64(message.durationHours);
        }
        if (message.deposit !== "") {
            writer.uint32(66).string(message.deposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseAddRateLimitProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                case 5:
                    message.maxPercentSend = reader.string();
                    break;
                case 6:
                    message.maxPercentRecv = reader.string();
                    break;
                case 7:
                    message.durationHours = reader.uint64();
                    break;
                case 8:
                    message.deposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseAddRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = String(object.maxPercentSend);
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = String(object.maxPercentRecv);
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = long_1.default.fromString(object.durationHours);
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = String(object.deposit);
        }
        else {
            message.deposit = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.maxPercentSend !== undefined && (obj.maxPercentSend = message.maxPercentSend);
        message.maxPercentRecv !== undefined && (obj.maxPercentRecv = message.maxPercentRecv);
        message.durationHours !== undefined &&
            (obj.durationHours = (message.durationHours || long_1.default.UZERO).toString());
        message.deposit !== undefined && (obj.deposit = message.deposit);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseAddRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = object.maxPercentSend;
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = object.maxPercentRecv;
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = object.durationHours;
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = object.deposit;
        }
        else {
            message.deposit = "";
        }
        return message;
    },
};
const baseUpdateRateLimitProposal = {
    title: "",
    description: "",
    denom: "",
    channelId: "",
    maxPercentSend: "",
    maxPercentRecv: "",
    durationHours: long_1.default.UZERO,
    deposit: "",
};
exports.UpdateRateLimitProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        if (message.maxPercentSend !== "") {
            writer.uint32(42).string(message.maxPercentSend);
        }
        if (message.maxPercentRecv !== "") {
            writer.uint32(50).string(message.maxPercentRecv);
        }
        if (!message.durationHours.isZero()) {
            writer.uint32(56).uint64(message.durationHours);
        }
        if (message.deposit !== "") {
            writer.uint32(66).string(message.deposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseUpdateRateLimitProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                case 5:
                    message.maxPercentSend = reader.string();
                    break;
                case 6:
                    message.maxPercentRecv = reader.string();
                    break;
                case 7:
                    message.durationHours = reader.uint64();
                    break;
                case 8:
                    message.deposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseUpdateRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = String(object.maxPercentSend);
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = String(object.maxPercentRecv);
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = long_1.default.fromString(object.durationHours);
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = String(object.deposit);
        }
        else {
            message.deposit = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.maxPercentSend !== undefined && (obj.maxPercentSend = message.maxPercentSend);
        message.maxPercentRecv !== undefined && (obj.maxPercentRecv = message.maxPercentRecv);
        message.durationHours !== undefined &&
            (obj.durationHours = (message.durationHours || long_1.default.UZERO).toString());
        message.deposit !== undefined && (obj.deposit = message.deposit);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseUpdateRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = object.maxPercentSend;
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = object.maxPercentRecv;
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = object.durationHours;
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = object.deposit;
        }
        else {
            message.deposit = "";
        }
        return message;
    },
};
const baseRemoveRateLimitProposal = {
    title: "",
    description: "",
    denom: "",
    channelId: "",
    deposit: "",
};
exports.RemoveRateLimitProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        if (message.deposit !== "") {
            writer.uint32(42).string(message.deposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRemoveRateLimitProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                case 5:
                    message.deposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRemoveRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = String(object.deposit);
        }
        else {
            message.deposit = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.deposit !== undefined && (obj.deposit = message.deposit);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRemoveRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = object.deposit;
        }
        else {
            message.deposit = "";
        }
        return message;
    },
};
const baseResetRateLimitProposal = {
    title: "",
    description: "",
    denom: "",
    channelId: "",
    deposit: "",
};
exports.ResetRateLimitProposal = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.denom !== "") {
            writer.uint32(26).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(34).string(message.channelId);
        }
        if (message.deposit !== "") {
            writer.uint32(42).string(message.deposit);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseResetRateLimitProposal);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.denom = reader.string();
                    break;
                case 4:
                    message.channelId = reader.string();
                    break;
                case 5:
                    message.deposit = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseResetRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = String(object.title);
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = String(object.description);
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = String(object.deposit);
        }
        else {
            message.deposit = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.title !== undefined && (obj.title = message.title);
        message.description !== undefined && (obj.description = message.description);
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.deposit !== undefined && (obj.deposit = message.deposit);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseResetRateLimitProposal);
        if (object.title !== undefined && object.title !== null) {
            message.title = object.title;
        }
        else {
            message.title = "";
        }
        if (object.description !== undefined && object.description !== null) {
            message.description = object.description;
        }
        else {
            message.description = "";
        }
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.deposit !== undefined && object.deposit !== null) {
            message.deposit = object.deposit;
        }
        else {
            message.deposit = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=gov.js.map