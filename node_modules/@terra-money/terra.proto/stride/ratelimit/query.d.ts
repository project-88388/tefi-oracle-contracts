import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { RateLimit } from "../../stride/ratelimit/ratelimit";
export declare const protobufPackage = "stride.ratelimit";
export interface QueryAllRateLimitsRequest {
}
export interface QueryAllRateLimitsResponse {
    rateLimits: RateLimit[];
}
export interface QueryRateLimitRequest {
    denom: string;
    channelId: string;
}
export interface QueryRateLimitResponse {
    rateLimit?: RateLimit;
}
export interface QueryRateLimitsByChainIdRequest {
    chainId: string;
}
export interface QueryRateLimitsByChainIdResponse {
    rateLimits: RateLimit[];
}
export interface QueryRateLimitsByChannelIdRequest {
    channelId: string;
}
export interface QueryRateLimitsByChannelIdResponse {
    rateLimits: RateLimit[];
}
export declare const QueryAllRateLimitsRequest: {
    encode(_: QueryAllRateLimitsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllRateLimitsRequest;
    fromJSON(_: any): QueryAllRateLimitsRequest;
    toJSON(_: QueryAllRateLimitsRequest): unknown;
    fromPartial(_: DeepPartial<QueryAllRateLimitsRequest>): QueryAllRateLimitsRequest;
};
export declare const QueryAllRateLimitsResponse: {
    encode(message: QueryAllRateLimitsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllRateLimitsResponse;
    fromJSON(object: any): QueryAllRateLimitsResponse;
    toJSON(message: QueryAllRateLimitsResponse): unknown;
    fromPartial(object: DeepPartial<QueryAllRateLimitsResponse>): QueryAllRateLimitsResponse;
};
export declare const QueryRateLimitRequest: {
    encode(message: QueryRateLimitRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitRequest;
    fromJSON(object: any): QueryRateLimitRequest;
    toJSON(message: QueryRateLimitRequest): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitRequest>): QueryRateLimitRequest;
};
export declare const QueryRateLimitResponse: {
    encode(message: QueryRateLimitResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitResponse;
    fromJSON(object: any): QueryRateLimitResponse;
    toJSON(message: QueryRateLimitResponse): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitResponse>): QueryRateLimitResponse;
};
export declare const QueryRateLimitsByChainIdRequest: {
    encode(message: QueryRateLimitsByChainIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitsByChainIdRequest;
    fromJSON(object: any): QueryRateLimitsByChainIdRequest;
    toJSON(message: QueryRateLimitsByChainIdRequest): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitsByChainIdRequest>): QueryRateLimitsByChainIdRequest;
};
export declare const QueryRateLimitsByChainIdResponse: {
    encode(message: QueryRateLimitsByChainIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitsByChainIdResponse;
    fromJSON(object: any): QueryRateLimitsByChainIdResponse;
    toJSON(message: QueryRateLimitsByChainIdResponse): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitsByChainIdResponse>): QueryRateLimitsByChainIdResponse;
};
export declare const QueryRateLimitsByChannelIdRequest: {
    encode(message: QueryRateLimitsByChannelIdRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitsByChannelIdRequest;
    fromJSON(object: any): QueryRateLimitsByChannelIdRequest;
    toJSON(message: QueryRateLimitsByChannelIdRequest): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitsByChannelIdRequest>): QueryRateLimitsByChannelIdRequest;
};
export declare const QueryRateLimitsByChannelIdResponse: {
    encode(message: QueryRateLimitsByChannelIdResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryRateLimitsByChannelIdResponse;
    fromJSON(object: any): QueryRateLimitsByChannelIdResponse;
    toJSON(message: QueryRateLimitsByChannelIdResponse): unknown;
    fromPartial(object: DeepPartial<QueryRateLimitsByChannelIdResponse>): QueryRateLimitsByChannelIdResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    AllRateLimits(request: DeepPartial<QueryAllRateLimitsRequest>, metadata?: grpc.Metadata): Promise<QueryAllRateLimitsResponse>;
    RateLimit(request: DeepPartial<QueryRateLimitRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitResponse>;
    RateLimitsByChainId(request: DeepPartial<QueryRateLimitsByChainIdRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitsByChainIdResponse>;
    RateLimitsByChannelId(request: DeepPartial<QueryRateLimitsByChannelIdRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitsByChannelIdResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    AllRateLimits(request: DeepPartial<QueryAllRateLimitsRequest>, metadata?: grpc.Metadata): Promise<QueryAllRateLimitsResponse>;
    RateLimit(request: DeepPartial<QueryRateLimitRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitResponse>;
    RateLimitsByChainId(request: DeepPartial<QueryRateLimitsByChainIdRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitsByChainIdResponse>;
    RateLimitsByChannelId(request: DeepPartial<QueryRateLimitsByChannelIdRequest>, metadata?: grpc.Metadata): Promise<QueryRateLimitsByChannelIdResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryAllRateLimitsDesc: UnaryMethodDefinitionish;
export declare const QueryRateLimitDesc: UnaryMethodDefinitionish;
export declare const QueryRateLimitsByChainIdDesc: UnaryMethodDefinitionish;
export declare const QueryRateLimitsByChannelIdDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
