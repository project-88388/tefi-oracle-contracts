"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryRateLimitsByChannelIdDesc = exports.QueryRateLimitsByChainIdDesc = exports.QueryRateLimitDesc = exports.QueryAllRateLimitsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryRateLimitsByChannelIdResponse = exports.QueryRateLimitsByChannelIdRequest = exports.QueryRateLimitsByChainIdResponse = exports.QueryRateLimitsByChainIdRequest = exports.QueryRateLimitResponse = exports.QueryRateLimitRequest = exports.QueryAllRateLimitsResponse = exports.QueryAllRateLimitsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const ratelimit_1 = require("../../stride/ratelimit/ratelimit");
const browser_headers_1 = require("browser-headers");
exports.protobufPackage = "stride.ratelimit";
const baseQueryAllRateLimitsRequest = {};
exports.QueryAllRateLimitsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllRateLimitsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryAllRateLimitsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryAllRateLimitsRequest);
        return message;
    },
};
const baseQueryAllRateLimitsResponse = {};
exports.QueryAllRateLimitsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.rateLimits) {
            ratelimit_1.RateLimit.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllRateLimitsResponse);
        message.rateLimits = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rateLimits.push(ratelimit_1.RateLimit.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllRateLimitsResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.rateLimits) {
            obj.rateLimits = message.rateLimits.map((e) => (e ? ratelimit_1.RateLimit.toJSON(e) : undefined));
        }
        else {
            obj.rateLimits = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllRateLimitsResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryRateLimitRequest = { denom: "", channelId: "" };
exports.QueryRateLimitRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(18).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitRequest);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseQueryRateLimitResponse = {};
exports.QueryRateLimitResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.rateLimit !== undefined) {
            ratelimit_1.RateLimit.encode(message.rateLimit, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rateLimit = ratelimit_1.RateLimit.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitResponse);
        if (object.rateLimit !== undefined && object.rateLimit !== null) {
            message.rateLimit = ratelimit_1.RateLimit.fromJSON(object.rateLimit);
        }
        else {
            message.rateLimit = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rateLimit !== undefined &&
            (obj.rateLimit = message.rateLimit ? ratelimit_1.RateLimit.toJSON(message.rateLimit) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitResponse);
        if (object.rateLimit !== undefined && object.rateLimit !== null) {
            message.rateLimit = ratelimit_1.RateLimit.fromPartial(object.rateLimit);
        }
        else {
            message.rateLimit = undefined;
        }
        return message;
    },
};
const baseQueryRateLimitsByChainIdRequest = { chainId: "" };
exports.QueryRateLimitsByChainIdRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitsByChainIdRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChainIdRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChainIdRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        return message;
    },
};
const baseQueryRateLimitsByChainIdResponse = {};
exports.QueryRateLimitsByChainIdResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.rateLimits) {
            ratelimit_1.RateLimit.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitsByChainIdResponse);
        message.rateLimits = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rateLimits.push(ratelimit_1.RateLimit.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChainIdResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.rateLimits) {
            obj.rateLimits = message.rateLimits.map((e) => (e ? ratelimit_1.RateLimit.toJSON(e) : undefined));
        }
        else {
            obj.rateLimits = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChainIdResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryRateLimitsByChannelIdRequest = { channelId: "" };
exports.QueryRateLimitsByChannelIdRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseQueryRateLimitsByChannelIdResponse = {};
exports.QueryRateLimitsByChannelIdResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.rateLimits) {
            ratelimit_1.RateLimit.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdResponse);
        message.rateLimits = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rateLimits.push(ratelimit_1.RateLimit.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.rateLimits) {
            obj.rateLimits = message.rateLimits.map((e) => (e ? ratelimit_1.RateLimit.toJSON(e) : undefined));
        }
        else {
            obj.rateLimits = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryRateLimitsByChannelIdResponse);
        message.rateLimits = [];
        if (object.rateLimits !== undefined && object.rateLimits !== null) {
            for (const e of object.rateLimits) {
                message.rateLimits.push(ratelimit_1.RateLimit.fromPartial(e));
            }
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.AllRateLimits = this.AllRateLimits.bind(this);
        this.RateLimit = this.RateLimit.bind(this);
        this.RateLimitsByChainId = this.RateLimitsByChainId.bind(this);
        this.RateLimitsByChannelId = this.RateLimitsByChannelId.bind(this);
    }
    AllRateLimits(request, metadata) {
        return this.rpc.unary(exports.QueryAllRateLimitsDesc, exports.QueryAllRateLimitsRequest.fromPartial(request), metadata);
    }
    RateLimit(request, metadata) {
        return this.rpc.unary(exports.QueryRateLimitDesc, exports.QueryRateLimitRequest.fromPartial(request), metadata);
    }
    RateLimitsByChainId(request, metadata) {
        return this.rpc.unary(exports.QueryRateLimitsByChainIdDesc, exports.QueryRateLimitsByChainIdRequest.fromPartial(request), metadata);
    }
    RateLimitsByChannelId(request, metadata) {
        return this.rpc.unary(exports.QueryRateLimitsByChannelIdDesc, exports.QueryRateLimitsByChannelIdRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "stride.ratelimit.Query",
};
exports.QueryAllRateLimitsDesc = {
    methodName: "AllRateLimits",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllRateLimitsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllRateLimitsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryRateLimitDesc = {
    methodName: "RateLimit",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryRateLimitRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryRateLimitResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryRateLimitsByChainIdDesc = {
    methodName: "RateLimitsByChainId",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryRateLimitsByChainIdRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryRateLimitsByChainIdResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryRateLimitsByChannelIdDesc = {
    methodName: "RateLimitsByChannelId",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryRateLimitsByChannelIdRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryRateLimitsByChannelIdResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map