import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "stride.ratelimit";
export declare enum PacketDirection {
    PACKET_SEND = 0,
    PACKET_RECV = 1,
    UNRECOGNIZED = -1
}
export declare function packetDirectionFromJSON(object: any): PacketDirection;
export declare function packetDirectionToJSON(object: PacketDirection): string;
export interface Path {
    denom: string;
    channelId: string;
}
export interface Quota {
    maxPercentSend: string;
    maxPercentRecv: string;
    durationHours: Long;
}
export interface Flow {
    inflow: string;
    outflow: string;
    channelValue: string;
}
export interface RateLimit {
    path?: Path;
    quota?: Quota;
    flow?: Flow;
}
export declare const Path: {
    encode(message: Path, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Path;
    fromJSON(object: any): Path;
    toJSON(message: Path): unknown;
    fromPartial(object: DeepPartial<Path>): Path;
};
export declare const Quota: {
    encode(message: Quota, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Quota;
    fromJSON(object: any): Quota;
    toJSON(message: Quota): unknown;
    fromPartial(object: DeepPartial<Quota>): Quota;
};
export declare const Flow: {
    encode(message: Flow, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Flow;
    fromJSON(object: any): Flow;
    toJSON(message: Flow): unknown;
    fromPartial(object: DeepPartial<Flow>): Flow;
};
export declare const RateLimit: {
    encode(message: RateLimit, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RateLimit;
    fromJSON(object: any): RateLimit;
    toJSON(message: RateLimit): unknown;
    fromPartial(object: DeepPartial<RateLimit>): RateLimit;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
