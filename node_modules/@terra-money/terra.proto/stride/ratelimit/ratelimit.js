"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RateLimit = exports.Flow = exports.Quota = exports.Path = exports.packetDirectionToJSON = exports.packetDirectionFromJSON = exports.PacketDirection = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.ratelimit";
var PacketDirection;
(function (PacketDirection) {
    PacketDirection[PacketDirection["PACKET_SEND"] = 0] = "PACKET_SEND";
    PacketDirection[PacketDirection["PACKET_RECV"] = 1] = "PACKET_RECV";
    PacketDirection[PacketDirection["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PacketDirection = exports.PacketDirection || (exports.PacketDirection = {}));
function packetDirectionFromJSON(object) {
    switch (object) {
        case 0:
        case "PACKET_SEND":
            return PacketDirection.PACKET_SEND;
        case 1:
        case "PACKET_RECV":
            return PacketDirection.PACKET_RECV;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PacketDirection.UNRECOGNIZED;
    }
}
exports.packetDirectionFromJSON = packetDirectionFromJSON;
function packetDirectionToJSON(object) {
    switch (object) {
        case PacketDirection.PACKET_SEND:
            return "PACKET_SEND";
        case PacketDirection.PACKET_RECV:
            return "PACKET_RECV";
        default:
            return "UNKNOWN";
    }
}
exports.packetDirectionToJSON = packetDirectionToJSON;
const basePath = { denom: "", channelId: "" };
exports.Path = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.channelId !== "") {
            writer.uint32(18).string(message.channelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, basePath);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.channelId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, basePath);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = String(object.denom);
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.denom !== undefined && (obj.denom = message.denom);
        message.channelId !== undefined && (obj.channelId = message.channelId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, basePath);
        if (object.denom !== undefined && object.denom !== null) {
            message.denom = object.denom;
        }
        else {
            message.denom = "";
        }
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        return message;
    },
};
const baseQuota = { maxPercentSend: "", maxPercentRecv: "", durationHours: long_1.default.UZERO };
exports.Quota = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.maxPercentSend !== "") {
            writer.uint32(10).string(message.maxPercentSend);
        }
        if (message.maxPercentRecv !== "") {
            writer.uint32(18).string(message.maxPercentRecv);
        }
        if (!message.durationHours.isZero()) {
            writer.uint32(24).uint64(message.durationHours);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQuota);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxPercentSend = reader.string();
                    break;
                case 2:
                    message.maxPercentRecv = reader.string();
                    break;
                case 3:
                    message.durationHours = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQuota);
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = String(object.maxPercentSend);
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = String(object.maxPercentRecv);
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = long_1.default.fromString(object.durationHours);
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.maxPercentSend !== undefined && (obj.maxPercentSend = message.maxPercentSend);
        message.maxPercentRecv !== undefined && (obj.maxPercentRecv = message.maxPercentRecv);
        message.durationHours !== undefined &&
            (obj.durationHours = (message.durationHours || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQuota);
        if (object.maxPercentSend !== undefined && object.maxPercentSend !== null) {
            message.maxPercentSend = object.maxPercentSend;
        }
        else {
            message.maxPercentSend = "";
        }
        if (object.maxPercentRecv !== undefined && object.maxPercentRecv !== null) {
            message.maxPercentRecv = object.maxPercentRecv;
        }
        else {
            message.maxPercentRecv = "";
        }
        if (object.durationHours !== undefined && object.durationHours !== null) {
            message.durationHours = object.durationHours;
        }
        else {
            message.durationHours = long_1.default.UZERO;
        }
        return message;
    },
};
const baseFlow = { inflow: "", outflow: "", channelValue: "" };
exports.Flow = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.inflow !== "") {
            writer.uint32(10).string(message.inflow);
        }
        if (message.outflow !== "") {
            writer.uint32(18).string(message.outflow);
        }
        if (message.channelValue !== "") {
            writer.uint32(26).string(message.channelValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseFlow);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.inflow = reader.string();
                    break;
                case 2:
                    message.outflow = reader.string();
                    break;
                case 3:
                    message.channelValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseFlow);
        if (object.inflow !== undefined && object.inflow !== null) {
            message.inflow = String(object.inflow);
        }
        else {
            message.inflow = "";
        }
        if (object.outflow !== undefined && object.outflow !== null) {
            message.outflow = String(object.outflow);
        }
        else {
            message.outflow = "";
        }
        if (object.channelValue !== undefined && object.channelValue !== null) {
            message.channelValue = String(object.channelValue);
        }
        else {
            message.channelValue = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.inflow !== undefined && (obj.inflow = message.inflow);
        message.outflow !== undefined && (obj.outflow = message.outflow);
        message.channelValue !== undefined && (obj.channelValue = message.channelValue);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseFlow);
        if (object.inflow !== undefined && object.inflow !== null) {
            message.inflow = object.inflow;
        }
        else {
            message.inflow = "";
        }
        if (object.outflow !== undefined && object.outflow !== null) {
            message.outflow = object.outflow;
        }
        else {
            message.outflow = "";
        }
        if (object.channelValue !== undefined && object.channelValue !== null) {
            message.channelValue = object.channelValue;
        }
        else {
            message.channelValue = "";
        }
        return message;
    },
};
const baseRateLimit = {};
exports.RateLimit = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.path !== undefined) {
            exports.Path.encode(message.path, writer.uint32(10).fork()).ldelim();
        }
        if (message.quota !== undefined) {
            exports.Quota.encode(message.quota, writer.uint32(18).fork()).ldelim();
        }
        if (message.flow !== undefined) {
            exports.Flow.encode(message.flow, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseRateLimit);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.path = exports.Path.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.quota = exports.Quota.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.flow = exports.Flow.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseRateLimit);
        if (object.path !== undefined && object.path !== null) {
            message.path = exports.Path.fromJSON(object.path);
        }
        else {
            message.path = undefined;
        }
        if (object.quota !== undefined && object.quota !== null) {
            message.quota = exports.Quota.fromJSON(object.quota);
        }
        else {
            message.quota = undefined;
        }
        if (object.flow !== undefined && object.flow !== null) {
            message.flow = exports.Flow.fromJSON(object.flow);
        }
        else {
            message.flow = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.path !== undefined && (obj.path = message.path ? exports.Path.toJSON(message.path) : undefined);
        message.quota !== undefined && (obj.quota = message.quota ? exports.Quota.toJSON(message.quota) : undefined);
        message.flow !== undefined && (obj.flow = message.flow ? exports.Flow.toJSON(message.flow) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseRateLimit);
        if (object.path !== undefined && object.path !== null) {
            message.path = exports.Path.fromPartial(object.path);
        }
        else {
            message.path = undefined;
        }
        if (object.quota !== undefined && object.quota !== null) {
            message.quota = exports.Quota.fromPartial(object.quota);
        }
        else {
            message.quota = undefined;
        }
        if (object.flow !== undefined && object.flow !== null) {
            message.flow = exports.Flow.fromPartial(object.flow);
        }
        else {
            message.flow = undefined;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=ratelimit.js.map