"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryDepositRecordAllDesc = exports.QueryDepositRecordDesc = exports.QueryEpochUnbondingRecordAllDesc = exports.QueryEpochUnbondingRecordDesc = exports.QueryUserRedemptionRecordForUserDesc = exports.QueryUserRedemptionRecordAllDesc = exports.QueryUserRedemptionRecordDesc = exports.QueryParamsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryAllEpochUnbondingRecordResponse = exports.QueryAllEpochUnbondingRecordRequest = exports.QueryGetEpochUnbondingRecordResponse = exports.QueryGetEpochUnbondingRecordRequest = exports.QueryAllUserRedemptionRecordForUserResponse = exports.QueryAllUserRedemptionRecordForUserRequest = exports.QueryAllUserRedemptionRecordResponse = exports.QueryAllUserRedemptionRecordRequest = exports.QueryGetUserRedemptionRecordResponse = exports.QueryGetUserRedemptionRecordRequest = exports.QueryAllDepositRecordResponse = exports.QueryAllDepositRecordRequest = exports.QueryGetDepositRecordResponse = exports.QueryGetDepositRecordRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const genesis_1 = require("../../stride/records/genesis");
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const browser_headers_1 = require("browser-headers");
exports.protobufPackage = "stride.records";
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            genesis_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = genesis_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = genesis_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? genesis_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = genesis_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
const baseQueryGetDepositRecordRequest = { id: long_1.default.UZERO };
exports.QueryGetDepositRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.id.isZero()) {
            writer.uint32(8).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetDepositRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetDepositRecordRequest);
        if (object.id !== undefined && object.id !== null) {
            message.id = long_1.default.fromString(object.id);
        }
        else {
            message.id = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = (message.id || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetDepositRecordRequest);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryGetDepositRecordResponse = {};
exports.QueryGetDepositRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.depositRecord !== undefined) {
            genesis_1.DepositRecord.encode(message.depositRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetDepositRecordResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositRecord = genesis_1.DepositRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetDepositRecordResponse);
        if (object.depositRecord !== undefined && object.depositRecord !== null) {
            message.depositRecord = genesis_1.DepositRecord.fromJSON(object.depositRecord);
        }
        else {
            message.depositRecord = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.depositRecord !== undefined &&
            (obj.depositRecord = message.depositRecord ? genesis_1.DepositRecord.toJSON(message.depositRecord) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetDepositRecordResponse);
        if (object.depositRecord !== undefined && object.depositRecord !== null) {
            message.depositRecord = genesis_1.DepositRecord.fromPartial(object.depositRecord);
        }
        else {
            message.depositRecord = undefined;
        }
        return message;
    },
};
const baseQueryAllDepositRecordRequest = {};
exports.QueryAllDepositRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllDepositRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllDepositRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllDepositRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllDepositRecordResponse = {};
exports.QueryAllDepositRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.depositRecord) {
            genesis_1.DepositRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllDepositRecordResponse);
        message.depositRecord = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.depositRecord.push(genesis_1.DepositRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllDepositRecordResponse);
        message.depositRecord = [];
        if (object.depositRecord !== undefined && object.depositRecord !== null) {
            for (const e of object.depositRecord) {
                message.depositRecord.push(genesis_1.DepositRecord.fromJSON(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.depositRecord) {
            obj.depositRecord = message.depositRecord.map((e) => (e ? genesis_1.DepositRecord.toJSON(e) : undefined));
        }
        else {
            obj.depositRecord = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllDepositRecordResponse);
        message.depositRecord = [];
        if (object.depositRecord !== undefined && object.depositRecord !== null) {
            for (const e of object.depositRecord) {
                message.depositRecord.push(genesis_1.DepositRecord.fromPartial(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryGetUserRedemptionRecordRequest = { id: "" };
exports.QueryGetUserRedemptionRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordRequest);
        if (object.id !== undefined && object.id !== null) {
            message.id = String(object.id);
        }
        else {
            message.id = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.id !== undefined && (obj.id = message.id);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordRequest);
        if (object.id !== undefined && object.id !== null) {
            message.id = object.id;
        }
        else {
            message.id = "";
        }
        return message;
    },
};
const baseQueryGetUserRedemptionRecordResponse = {};
exports.QueryGetUserRedemptionRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.userRedemptionRecord !== undefined) {
            genesis_1.UserRedemptionRecord.encode(message.userRedemptionRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userRedemptionRecord = genesis_1.UserRedemptionRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordResponse);
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            message.userRedemptionRecord = genesis_1.UserRedemptionRecord.fromJSON(object.userRedemptionRecord);
        }
        else {
            message.userRedemptionRecord = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.userRedemptionRecord !== undefined &&
            (obj.userRedemptionRecord = message.userRedemptionRecord
                ? genesis_1.UserRedemptionRecord.toJSON(message.userRedemptionRecord)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetUserRedemptionRecordResponse);
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            message.userRedemptionRecord = genesis_1.UserRedemptionRecord.fromPartial(object.userRedemptionRecord);
        }
        else {
            message.userRedemptionRecord = undefined;
        }
        return message;
    },
};
const baseQueryAllUserRedemptionRecordRequest = {};
exports.QueryAllUserRedemptionRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllUserRedemptionRecordResponse = {};
exports.QueryAllUserRedemptionRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.userRedemptionRecord) {
            genesis_1.UserRedemptionRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordResponse);
        message.userRedemptionRecord = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordResponse);
        message.userRedemptionRecord = [];
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            for (const e of object.userRedemptionRecord) {
                message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.fromJSON(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.userRedemptionRecord) {
            obj.userRedemptionRecord = message.userRedemptionRecord.map((e) => e ? genesis_1.UserRedemptionRecord.toJSON(e) : undefined);
        }
        else {
            obj.userRedemptionRecord = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordResponse);
        message.userRedemptionRecord = [];
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            for (const e of object.userRedemptionRecord) {
                message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.fromPartial(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllUserRedemptionRecordForUserRequest = {
    chainId: "",
    day: long_1.default.UZERO,
    address: "",
    limit: long_1.default.UZERO,
};
exports.QueryAllUserRedemptionRecordForUserRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (!message.day.isZero()) {
            writer.uint32(16).uint64(message.day);
        }
        if (message.address !== "") {
            writer.uint32(26).string(message.address);
        }
        if (!message.limit.isZero()) {
            writer.uint32(32).uint64(message.limit);
        }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.day = reader.uint64();
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                case 4:
                    message.limit = reader.uint64();
                    break;
                case 5:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        if (object.day !== undefined && object.day !== null) {
            message.day = long_1.default.fromString(object.day);
        }
        else {
            message.day = long_1.default.UZERO;
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.limit !== undefined && object.limit !== null) {
            message.limit = long_1.default.fromString(object.limit);
        }
        else {
            message.limit = long_1.default.UZERO;
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.day !== undefined && (obj.day = (message.day || long_1.default.UZERO).toString());
        message.address !== undefined && (obj.address = message.address);
        message.limit !== undefined && (obj.limit = (message.limit || long_1.default.UZERO).toString());
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        if (object.day !== undefined && object.day !== null) {
            message.day = object.day;
        }
        else {
            message.day = long_1.default.UZERO;
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.limit !== undefined && object.limit !== null) {
            message.limit = object.limit;
        }
        else {
            message.limit = long_1.default.UZERO;
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllUserRedemptionRecordForUserResponse = {};
exports.QueryAllUserRedemptionRecordForUserResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.userRedemptionRecord) {
            genesis_1.UserRedemptionRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserResponse);
        message.userRedemptionRecord = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserResponse);
        message.userRedemptionRecord = [];
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            for (const e of object.userRedemptionRecord) {
                message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.fromJSON(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.userRedemptionRecord) {
            obj.userRedemptionRecord = message.userRedemptionRecord.map((e) => e ? genesis_1.UserRedemptionRecord.toJSON(e) : undefined);
        }
        else {
            obj.userRedemptionRecord = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllUserRedemptionRecordForUserResponse);
        message.userRedemptionRecord = [];
        if (object.userRedemptionRecord !== undefined && object.userRedemptionRecord !== null) {
            for (const e of object.userRedemptionRecord) {
                message.userRedemptionRecord.push(genesis_1.UserRedemptionRecord.fromPartial(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryGetEpochUnbondingRecordRequest = { epochNumber: long_1.default.UZERO };
exports.QueryGetEpochUnbondingRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.epochNumber.isZero()) {
            writer.uint32(8).uint64(message.epochNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordRequest);
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = long_1.default.fromString(object.epochNumber);
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochNumber !== undefined && (obj.epochNumber = (message.epochNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordRequest);
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = object.epochNumber;
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        return message;
    },
};
const baseQueryGetEpochUnbondingRecordResponse = {};
exports.QueryGetEpochUnbondingRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochUnbondingRecord !== undefined) {
            genesis_1.EpochUnbondingRecord.encode(message.epochUnbondingRecord, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochUnbondingRecord = genesis_1.EpochUnbondingRecord.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordResponse);
        if (object.epochUnbondingRecord !== undefined && object.epochUnbondingRecord !== null) {
            message.epochUnbondingRecord = genesis_1.EpochUnbondingRecord.fromJSON(object.epochUnbondingRecord);
        }
        else {
            message.epochUnbondingRecord = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochUnbondingRecord !== undefined &&
            (obj.epochUnbondingRecord = message.epochUnbondingRecord
                ? genesis_1.EpochUnbondingRecord.toJSON(message.epochUnbondingRecord)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetEpochUnbondingRecordResponse);
        if (object.epochUnbondingRecord !== undefined && object.epochUnbondingRecord !== null) {
            message.epochUnbondingRecord = genesis_1.EpochUnbondingRecord.fromPartial(object.epochUnbondingRecord);
        }
        else {
            message.epochUnbondingRecord = undefined;
        }
        return message;
    },
};
const baseQueryAllEpochUnbondingRecordRequest = {};
exports.QueryAllEpochUnbondingRecordRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllEpochUnbondingRecordResponse = {};
exports.QueryAllEpochUnbondingRecordResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.epochUnbondingRecord) {
            genesis_1.EpochUnbondingRecord.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordResponse);
        message.epochUnbondingRecord = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochUnbondingRecord.push(genesis_1.EpochUnbondingRecord.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordResponse);
        message.epochUnbondingRecord = [];
        if (object.epochUnbondingRecord !== undefined && object.epochUnbondingRecord !== null) {
            for (const e of object.epochUnbondingRecord) {
                message.epochUnbondingRecord.push(genesis_1.EpochUnbondingRecord.fromJSON(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.epochUnbondingRecord) {
            obj.epochUnbondingRecord = message.epochUnbondingRecord.map((e) => e ? genesis_1.EpochUnbondingRecord.toJSON(e) : undefined);
        }
        else {
            obj.epochUnbondingRecord = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllEpochUnbondingRecordResponse);
        message.epochUnbondingRecord = [];
        if (object.epochUnbondingRecord !== undefined && object.epochUnbondingRecord !== null) {
            for (const e of object.epochUnbondingRecord) {
                message.epochUnbondingRecord.push(genesis_1.EpochUnbondingRecord.fromPartial(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.UserRedemptionRecord = this.UserRedemptionRecord.bind(this);
        this.UserRedemptionRecordAll = this.UserRedemptionRecordAll.bind(this);
        this.UserRedemptionRecordForUser = this.UserRedemptionRecordForUser.bind(this);
        this.EpochUnbondingRecord = this.EpochUnbondingRecord.bind(this);
        this.EpochUnbondingRecordAll = this.EpochUnbondingRecordAll.bind(this);
        this.DepositRecord = this.DepositRecord.bind(this);
        this.DepositRecordAll = this.DepositRecordAll.bind(this);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
    UserRedemptionRecord(request, metadata) {
        return this.rpc.unary(exports.QueryUserRedemptionRecordDesc, exports.QueryGetUserRedemptionRecordRequest.fromPartial(request), metadata);
    }
    UserRedemptionRecordAll(request, metadata) {
        return this.rpc.unary(exports.QueryUserRedemptionRecordAllDesc, exports.QueryAllUserRedemptionRecordRequest.fromPartial(request), metadata);
    }
    UserRedemptionRecordForUser(request, metadata) {
        return this.rpc.unary(exports.QueryUserRedemptionRecordForUserDesc, exports.QueryAllUserRedemptionRecordForUserRequest.fromPartial(request), metadata);
    }
    EpochUnbondingRecord(request, metadata) {
        return this.rpc.unary(exports.QueryEpochUnbondingRecordDesc, exports.QueryGetEpochUnbondingRecordRequest.fromPartial(request), metadata);
    }
    EpochUnbondingRecordAll(request, metadata) {
        return this.rpc.unary(exports.QueryEpochUnbondingRecordAllDesc, exports.QueryAllEpochUnbondingRecordRequest.fromPartial(request), metadata);
    }
    DepositRecord(request, metadata) {
        return this.rpc.unary(exports.QueryDepositRecordDesc, exports.QueryGetDepositRecordRequest.fromPartial(request), metadata);
    }
    DepositRecordAll(request, metadata) {
        return this.rpc.unary(exports.QueryDepositRecordAllDesc, exports.QueryAllDepositRecordRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "stride.records.Query",
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryUserRedemptionRecordDesc = {
    methodName: "UserRedemptionRecord",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetUserRedemptionRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetUserRedemptionRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryUserRedemptionRecordAllDesc = {
    methodName: "UserRedemptionRecordAll",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllUserRedemptionRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllUserRedemptionRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryUserRedemptionRecordForUserDesc = {
    methodName: "UserRedemptionRecordForUser",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllUserRedemptionRecordForUserRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllUserRedemptionRecordForUserResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryEpochUnbondingRecordDesc = {
    methodName: "EpochUnbondingRecord",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetEpochUnbondingRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetEpochUnbondingRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryEpochUnbondingRecordAllDesc = {
    methodName: "EpochUnbondingRecordAll",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllEpochUnbondingRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllEpochUnbondingRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryDepositRecordDesc = {
    methodName: "DepositRecord",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetDepositRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetDepositRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryDepositRecordAllDesc = {
    methodName: "DepositRecordAll",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllDepositRecordRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllDepositRecordResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map