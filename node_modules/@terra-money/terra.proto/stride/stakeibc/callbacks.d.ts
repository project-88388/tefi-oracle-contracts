import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "stride.stakeibc";
/** ---------------------- Delegation Callbacks ---------------------- // */
export interface SplitDelegation {
    validator: string;
    amount: string;
}
export interface DelegateCallback {
    hostZoneId: string;
    depositRecordId: Long;
    splitDelegations: SplitDelegation[];
}
export interface ClaimCallback {
    userRedemptionRecordId: string;
    chainId: string;
    epochNumber: Long;
}
/** ---------------------- Reinvest Callback ---------------------- // */
export interface ReinvestCallback {
    reinvestAmount?: Coin;
    hostZoneId: string;
}
/** ---------------------- Undelegation Callbacks ---------------------- // */
export interface UndelegateCallback {
    hostZoneId: string;
    splitDelegations: SplitDelegation[];
    epochUnbondingRecordIds: Long[];
}
/** ---------------------- Redemption Callbacks ---------------------- // */
export interface RedemptionCallback {
    hostZoneId: string;
    epochUnbondingRecordIds: Long[];
}
export interface Rebalancing {
    srcValidator: string;
    dstValidator: string;
    amt: string;
}
export interface RebalanceCallback {
    hostZoneId: string;
    rebalancings: Rebalancing[];
}
export declare const SplitDelegation: {
    encode(message: SplitDelegation, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): SplitDelegation;
    fromJSON(object: any): SplitDelegation;
    toJSON(message: SplitDelegation): unknown;
    fromPartial(object: DeepPartial<SplitDelegation>): SplitDelegation;
};
export declare const DelegateCallback: {
    encode(message: DelegateCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): DelegateCallback;
    fromJSON(object: any): DelegateCallback;
    toJSON(message: DelegateCallback): unknown;
    fromPartial(object: DeepPartial<DelegateCallback>): DelegateCallback;
};
export declare const ClaimCallback: {
    encode(message: ClaimCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ClaimCallback;
    fromJSON(object: any): ClaimCallback;
    toJSON(message: ClaimCallback): unknown;
    fromPartial(object: DeepPartial<ClaimCallback>): ClaimCallback;
};
export declare const ReinvestCallback: {
    encode(message: ReinvestCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): ReinvestCallback;
    fromJSON(object: any): ReinvestCallback;
    toJSON(message: ReinvestCallback): unknown;
    fromPartial(object: DeepPartial<ReinvestCallback>): ReinvestCallback;
};
export declare const UndelegateCallback: {
    encode(message: UndelegateCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): UndelegateCallback;
    fromJSON(object: any): UndelegateCallback;
    toJSON(message: UndelegateCallback): unknown;
    fromPartial(object: DeepPartial<UndelegateCallback>): UndelegateCallback;
};
export declare const RedemptionCallback: {
    encode(message: RedemptionCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RedemptionCallback;
    fromJSON(object: any): RedemptionCallback;
    toJSON(message: RedemptionCallback): unknown;
    fromPartial(object: DeepPartial<RedemptionCallback>): RedemptionCallback;
};
export declare const Rebalancing: {
    encode(message: Rebalancing, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Rebalancing;
    fromJSON(object: any): Rebalancing;
    toJSON(message: Rebalancing): unknown;
    fromPartial(object: DeepPartial<Rebalancing>): Rebalancing;
};
export declare const RebalanceCallback: {
    encode(message: RebalanceCallback, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): RebalanceCallback;
    fromJSON(object: any): RebalanceCallback;
    toJSON(message: RebalanceCallback): unknown;
    fromPartial(object: DeepPartial<RebalanceCallback>): RebalanceCallback;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
