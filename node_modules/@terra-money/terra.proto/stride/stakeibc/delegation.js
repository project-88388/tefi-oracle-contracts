"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Delegation = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const validator_1 = require("../../stride/stakeibc/validator");
exports.protobufPackage = "stride.stakeibc";
const baseDelegation = { delegateAcctAddress: "", amt: long_1.default.ZERO };
exports.Delegation = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.delegateAcctAddress !== "") {
            writer.uint32(10).string(message.delegateAcctAddress);
        }
        if (message.validator !== undefined) {
            validator_1.Validator.encode(message.validator, writer.uint32(18).fork()).ldelim();
        }
        if (!message.amt.isZero()) {
            writer.uint32(24).int64(message.amt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseDelegation);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.delegateAcctAddress = reader.string();
                    break;
                case 2:
                    message.validator = validator_1.Validator.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.amt = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseDelegation);
        if (object.delegateAcctAddress !== undefined && object.delegateAcctAddress !== null) {
            message.delegateAcctAddress = String(object.delegateAcctAddress);
        }
        else {
            message.delegateAcctAddress = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = validator_1.Validator.fromJSON(object.validator);
        }
        else {
            message.validator = undefined;
        }
        if (object.amt !== undefined && object.amt !== null) {
            message.amt = long_1.default.fromString(object.amt);
        }
        else {
            message.amt = long_1.default.ZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.delegateAcctAddress !== undefined && (obj.delegateAcctAddress = message.delegateAcctAddress);
        message.validator !== undefined &&
            (obj.validator = message.validator ? validator_1.Validator.toJSON(message.validator) : undefined);
        message.amt !== undefined && (obj.amt = (message.amt || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseDelegation);
        if (object.delegateAcctAddress !== undefined && object.delegateAcctAddress !== null) {
            message.delegateAcctAddress = object.delegateAcctAddress;
        }
        else {
            message.delegateAcctAddress = "";
        }
        if (object.validator !== undefined && object.validator !== null) {
            message.validator = validator_1.Validator.fromPartial(object.validator);
        }
        else {
            message.validator = undefined;
        }
        if (object.amt !== undefined && object.amt !== null) {
            message.amt = object.amt;
        }
        else {
            message.amt = long_1.default.ZERO;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=delegation.js.map