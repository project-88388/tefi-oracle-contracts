"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EpochTracker = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.stakeibc";
const baseEpochTracker = {
    epochIdentifier: "",
    epochNumber: long_1.default.UZERO,
    nextEpochStartTime: long_1.default.UZERO,
    duration: long_1.default.UZERO,
};
exports.EpochTracker = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochIdentifier !== "") {
            writer.uint32(10).string(message.epochIdentifier);
        }
        if (!message.epochNumber.isZero()) {
            writer.uint32(16).uint64(message.epochNumber);
        }
        if (!message.nextEpochStartTime.isZero()) {
            writer.uint32(24).uint64(message.nextEpochStartTime);
        }
        if (!message.duration.isZero()) {
            writer.uint32(32).uint64(message.duration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseEpochTracker);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochIdentifier = reader.string();
                    break;
                case 2:
                    message.epochNumber = reader.uint64();
                    break;
                case 3:
                    message.nextEpochStartTime = reader.uint64();
                    break;
                case 4:
                    message.duration = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseEpochTracker);
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = String(object.epochIdentifier);
        }
        else {
            message.epochIdentifier = "";
        }
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = long_1.default.fromString(object.epochNumber);
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        if (object.nextEpochStartTime !== undefined && object.nextEpochStartTime !== null) {
            message.nextEpochStartTime = long_1.default.fromString(object.nextEpochStartTime);
        }
        else {
            message.nextEpochStartTime = long_1.default.UZERO;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = long_1.default.fromString(object.duration);
        }
        else {
            message.duration = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochIdentifier !== undefined && (obj.epochIdentifier = message.epochIdentifier);
        message.epochNumber !== undefined && (obj.epochNumber = (message.epochNumber || long_1.default.UZERO).toString());
        message.nextEpochStartTime !== undefined &&
            (obj.nextEpochStartTime = (message.nextEpochStartTime || long_1.default.UZERO).toString());
        message.duration !== undefined && (obj.duration = (message.duration || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseEpochTracker);
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = object.epochIdentifier;
        }
        else {
            message.epochIdentifier = "";
        }
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = object.epochNumber;
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        if (object.nextEpochStartTime !== undefined && object.nextEpochStartTime !== null) {
            message.nextEpochStartTime = object.nextEpochStartTime;
        }
        else {
            message.nextEpochStartTime = long_1.default.UZERO;
        }
        if (object.duration !== undefined && object.duration !== null) {
            message.duration = object.duration;
        }
        else {
            message.duration = long_1.default.UZERO;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=epoch_tracker.js.map