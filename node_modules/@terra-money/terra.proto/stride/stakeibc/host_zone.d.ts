import Long from "long";
import _m0 from "protobufjs/minimal";
import { ICAAccount } from "../../stride/stakeibc/ica_account";
import { Validator } from "../../stride/stakeibc/validator";
export declare const protobufPackage = "stride.stakeibc";
/** next id: 19 */
export interface HostZone {
    chainId: string;
    connectionId: string;
    bech32prefix: string;
    transferChannelId: string;
    validators: Validator[];
    blacklistedValidators: Validator[];
    withdrawalAccount?: ICAAccount;
    feeAccount?: ICAAccount;
    delegationAccount?: ICAAccount;
    redemptionAccount?: ICAAccount;
    /** ibc denom on stride */
    ibcDenom: string;
    /** native denom on host zone */
    hostDenom: string;
    /**
     * TODO(TEST-68): Should we make this an array and store the last n redemption
     * rates then calculate a TWARR?
     */
    lastRedemptionRate: string;
    redemptionRate: string;
    /** stores how many days we should wait before issuing unbondings */
    unbondingFrequency: Long;
    /** TODO(TEST-101) int to dec */
    stakedBal: string;
    address: string;
}
export declare const HostZone: {
    encode(message: HostZone, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): HostZone;
    fromJSON(object: any): HostZone;
    toJSON(message: HostZone): unknown;
    fromPartial(object: DeepPartial<HostZone>): HostZone;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
