"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HostZone = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const ica_account_1 = require("../../stride/stakeibc/ica_account");
const validator_1 = require("../../stride/stakeibc/validator");
exports.protobufPackage = "stride.stakeibc";
const baseHostZone = {
    chainId: "",
    connectionId: "",
    bech32prefix: "",
    transferChannelId: "",
    ibcDenom: "",
    hostDenom: "",
    lastRedemptionRate: "",
    redemptionRate: "",
    unbondingFrequency: long_1.default.UZERO,
    stakedBal: "",
    address: "",
};
exports.HostZone = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        if (message.connectionId !== "") {
            writer.uint32(18).string(message.connectionId);
        }
        if (message.bech32prefix !== "") {
            writer.uint32(138).string(message.bech32prefix);
        }
        if (message.transferChannelId !== "") {
            writer.uint32(98).string(message.transferChannelId);
        }
        for (const v of message.validators) {
            validator_1.Validator.encode(v, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.blacklistedValidators) {
            validator_1.Validator.encode(v, writer.uint32(34).fork()).ldelim();
        }
        if (message.withdrawalAccount !== undefined) {
            ica_account_1.ICAAccount.encode(message.withdrawalAccount, writer.uint32(42).fork()).ldelim();
        }
        if (message.feeAccount !== undefined) {
            ica_account_1.ICAAccount.encode(message.feeAccount, writer.uint32(50).fork()).ldelim();
        }
        if (message.delegationAccount !== undefined) {
            ica_account_1.ICAAccount.encode(message.delegationAccount, writer.uint32(58).fork()).ldelim();
        }
        if (message.redemptionAccount !== undefined) {
            ica_account_1.ICAAccount.encode(message.redemptionAccount, writer.uint32(130).fork()).ldelim();
        }
        if (message.ibcDenom !== "") {
            writer.uint32(66).string(message.ibcDenom);
        }
        if (message.hostDenom !== "") {
            writer.uint32(74).string(message.hostDenom);
        }
        if (message.lastRedemptionRate !== "") {
            writer.uint32(82).string(message.lastRedemptionRate);
        }
        if (message.redemptionRate !== "") {
            writer.uint32(90).string(message.redemptionRate);
        }
        if (!message.unbondingFrequency.isZero()) {
            writer.uint32(112).uint64(message.unbondingFrequency);
        }
        if (message.stakedBal !== "") {
            writer.uint32(106).string(message.stakedBal);
        }
        if (message.address !== "") {
            writer.uint32(146).string(message.address);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseHostZone);
        message.validators = [];
        message.blacklistedValidators = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                case 2:
                    message.connectionId = reader.string();
                    break;
                case 17:
                    message.bech32prefix = reader.string();
                    break;
                case 12:
                    message.transferChannelId = reader.string();
                    break;
                case 3:
                    message.validators.push(validator_1.Validator.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.blacklistedValidators.push(validator_1.Validator.decode(reader, reader.uint32()));
                    break;
                case 5:
                    message.withdrawalAccount = ica_account_1.ICAAccount.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.feeAccount = ica_account_1.ICAAccount.decode(reader, reader.uint32());
                    break;
                case 7:
                    message.delegationAccount = ica_account_1.ICAAccount.decode(reader, reader.uint32());
                    break;
                case 16:
                    message.redemptionAccount = ica_account_1.ICAAccount.decode(reader, reader.uint32());
                    break;
                case 8:
                    message.ibcDenom = reader.string();
                    break;
                case 9:
                    message.hostDenom = reader.string();
                    break;
                case 10:
                    message.lastRedemptionRate = reader.string();
                    break;
                case 11:
                    message.redemptionRate = reader.string();
                    break;
                case 14:
                    message.unbondingFrequency = reader.uint64();
                    break;
                case 13:
                    message.stakedBal = reader.string();
                    break;
                case 18:
                    message.address = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseHostZone);
        message.validators = [];
        message.blacklistedValidators = [];
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = String(object.connectionId);
        }
        else {
            message.connectionId = "";
        }
        if (object.bech32prefix !== undefined && object.bech32prefix !== null) {
            message.bech32prefix = String(object.bech32prefix);
        }
        else {
            message.bech32prefix = "";
        }
        if (object.transferChannelId !== undefined && object.transferChannelId !== null) {
            message.transferChannelId = String(object.transferChannelId);
        }
        else {
            message.transferChannelId = "";
        }
        if (object.validators !== undefined && object.validators !== null) {
            for (const e of object.validators) {
                message.validators.push(validator_1.Validator.fromJSON(e));
            }
        }
        if (object.blacklistedValidators !== undefined && object.blacklistedValidators !== null) {
            for (const e of object.blacklistedValidators) {
                message.blacklistedValidators.push(validator_1.Validator.fromJSON(e));
            }
        }
        if (object.withdrawalAccount !== undefined && object.withdrawalAccount !== null) {
            message.withdrawalAccount = ica_account_1.ICAAccount.fromJSON(object.withdrawalAccount);
        }
        else {
            message.withdrawalAccount = undefined;
        }
        if (object.feeAccount !== undefined && object.feeAccount !== null) {
            message.feeAccount = ica_account_1.ICAAccount.fromJSON(object.feeAccount);
        }
        else {
            message.feeAccount = undefined;
        }
        if (object.delegationAccount !== undefined && object.delegationAccount !== null) {
            message.delegationAccount = ica_account_1.ICAAccount.fromJSON(object.delegationAccount);
        }
        else {
            message.delegationAccount = undefined;
        }
        if (object.redemptionAccount !== undefined && object.redemptionAccount !== null) {
            message.redemptionAccount = ica_account_1.ICAAccount.fromJSON(object.redemptionAccount);
        }
        else {
            message.redemptionAccount = undefined;
        }
        if (object.ibcDenom !== undefined && object.ibcDenom !== null) {
            message.ibcDenom = String(object.ibcDenom);
        }
        else {
            message.ibcDenom = "";
        }
        if (object.hostDenom !== undefined && object.hostDenom !== null) {
            message.hostDenom = String(object.hostDenom);
        }
        else {
            message.hostDenom = "";
        }
        if (object.lastRedemptionRate !== undefined && object.lastRedemptionRate !== null) {
            message.lastRedemptionRate = String(object.lastRedemptionRate);
        }
        else {
            message.lastRedemptionRate = "";
        }
        if (object.redemptionRate !== undefined && object.redemptionRate !== null) {
            message.redemptionRate = String(object.redemptionRate);
        }
        else {
            message.redemptionRate = "";
        }
        if (object.unbondingFrequency !== undefined && object.unbondingFrequency !== null) {
            message.unbondingFrequency = long_1.default.fromString(object.unbondingFrequency);
        }
        else {
            message.unbondingFrequency = long_1.default.UZERO;
        }
        if (object.stakedBal !== undefined && object.stakedBal !== null) {
            message.stakedBal = String(object.stakedBal);
        }
        else {
            message.stakedBal = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
        message.bech32prefix !== undefined && (obj.bech32prefix = message.bech32prefix);
        message.transferChannelId !== undefined && (obj.transferChannelId = message.transferChannelId);
        if (message.validators) {
            obj.validators = message.validators.map((e) => (e ? validator_1.Validator.toJSON(e) : undefined));
        }
        else {
            obj.validators = [];
        }
        if (message.blacklistedValidators) {
            obj.blacklistedValidators = message.blacklistedValidators.map((e) => e ? validator_1.Validator.toJSON(e) : undefined);
        }
        else {
            obj.blacklistedValidators = [];
        }
        message.withdrawalAccount !== undefined &&
            (obj.withdrawalAccount = message.withdrawalAccount
                ? ica_account_1.ICAAccount.toJSON(message.withdrawalAccount)
                : undefined);
        message.feeAccount !== undefined &&
            (obj.feeAccount = message.feeAccount ? ica_account_1.ICAAccount.toJSON(message.feeAccount) : undefined);
        message.delegationAccount !== undefined &&
            (obj.delegationAccount = message.delegationAccount
                ? ica_account_1.ICAAccount.toJSON(message.delegationAccount)
                : undefined);
        message.redemptionAccount !== undefined &&
            (obj.redemptionAccount = message.redemptionAccount
                ? ica_account_1.ICAAccount.toJSON(message.redemptionAccount)
                : undefined);
        message.ibcDenom !== undefined && (obj.ibcDenom = message.ibcDenom);
        message.hostDenom !== undefined && (obj.hostDenom = message.hostDenom);
        message.lastRedemptionRate !== undefined && (obj.lastRedemptionRate = message.lastRedemptionRate);
        message.redemptionRate !== undefined && (obj.redemptionRate = message.redemptionRate);
        message.unbondingFrequency !== undefined &&
            (obj.unbondingFrequency = (message.unbondingFrequency || long_1.default.UZERO).toString());
        message.stakedBal !== undefined && (obj.stakedBal = message.stakedBal);
        message.address !== undefined && (obj.address = message.address);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseHostZone);
        message.validators = [];
        message.blacklistedValidators = [];
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = object.connectionId;
        }
        else {
            message.connectionId = "";
        }
        if (object.bech32prefix !== undefined && object.bech32prefix !== null) {
            message.bech32prefix = object.bech32prefix;
        }
        else {
            message.bech32prefix = "";
        }
        if (object.transferChannelId !== undefined && object.transferChannelId !== null) {
            message.transferChannelId = object.transferChannelId;
        }
        else {
            message.transferChannelId = "";
        }
        if (object.validators !== undefined && object.validators !== null) {
            for (const e of object.validators) {
                message.validators.push(validator_1.Validator.fromPartial(e));
            }
        }
        if (object.blacklistedValidators !== undefined && object.blacklistedValidators !== null) {
            for (const e of object.blacklistedValidators) {
                message.blacklistedValidators.push(validator_1.Validator.fromPartial(e));
            }
        }
        if (object.withdrawalAccount !== undefined && object.withdrawalAccount !== null) {
            message.withdrawalAccount = ica_account_1.ICAAccount.fromPartial(object.withdrawalAccount);
        }
        else {
            message.withdrawalAccount = undefined;
        }
        if (object.feeAccount !== undefined && object.feeAccount !== null) {
            message.feeAccount = ica_account_1.ICAAccount.fromPartial(object.feeAccount);
        }
        else {
            message.feeAccount = undefined;
        }
        if (object.delegationAccount !== undefined && object.delegationAccount !== null) {
            message.delegationAccount = ica_account_1.ICAAccount.fromPartial(object.delegationAccount);
        }
        else {
            message.delegationAccount = undefined;
        }
        if (object.redemptionAccount !== undefined && object.redemptionAccount !== null) {
            message.redemptionAccount = ica_account_1.ICAAccount.fromPartial(object.redemptionAccount);
        }
        else {
            message.redemptionAccount = undefined;
        }
        if (object.ibcDenom !== undefined && object.ibcDenom !== null) {
            message.ibcDenom = object.ibcDenom;
        }
        else {
            message.ibcDenom = "";
        }
        if (object.hostDenom !== undefined && object.hostDenom !== null) {
            message.hostDenom = object.hostDenom;
        }
        else {
            message.hostDenom = "";
        }
        if (object.lastRedemptionRate !== undefined && object.lastRedemptionRate !== null) {
            message.lastRedemptionRate = object.lastRedemptionRate;
        }
        else {
            message.lastRedemptionRate = "";
        }
        if (object.redemptionRate !== undefined && object.redemptionRate !== null) {
            message.redemptionRate = object.redemptionRate;
        }
        else {
            message.redemptionRate = "";
        }
        if (object.unbondingFrequency !== undefined && object.unbondingFrequency !== null) {
            message.unbondingFrequency = object.unbondingFrequency;
        }
        else {
            message.unbondingFrequency = long_1.default.UZERO;
        }
        if (object.stakedBal !== undefined && object.stakedBal !== null) {
            message.stakedBal = object.stakedBal;
        }
        else {
            message.stakedBal = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=host_zone.js.map