import Long from "long";
import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "stride.stakeibc";
/**
 * Params defines the parameters for the module.
 * next id: 18
 */
export interface Params {
    /** define epoch lengths, in stride_epochs */
    rewardsInterval: Long;
    delegateInterval: Long;
    depositInterval: Long;
    redemptionRateInterval: Long;
    strideCommission: Long;
    /**
     * zone_com_address stores which addresses to
     * send the Stride commission too, as well as what portion
     * of the fee each address is entitled to
     * TODO implement this
     */
    zoneComAddress: {
        [key: string]: string;
    };
    reinvestInterval: Long;
    validatorRebalancingThreshold: Long;
    icaTimeoutNanos: Long;
    bufferSize: Long;
    ibcTimeoutBlocks: Long;
    feeTransferTimeoutNanos: Long;
    maxStakeIcaCallsPerEpoch: Long;
    safetyMinRedemptionRateThreshold: Long;
    safetyMaxRedemptionRateThreshold: Long;
    ibcTransferTimeoutNanos: Long;
    safetyNumValidators: Long;
    safetyMaxSlashPercent: Long;
}
export interface Params_ZoneComAddressEntry {
    key: string;
    value: string;
}
export declare const Params: {
    encode(message: Params, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params;
    fromJSON(object: any): Params;
    toJSON(message: Params): unknown;
    fromPartial(object: DeepPartial<Params>): Params;
};
export declare const Params_ZoneComAddressEntry: {
    encode(message: Params_ZoneComAddressEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): Params_ZoneComAddressEntry;
    fromJSON(object: any): Params_ZoneComAddressEntry;
    toJSON(message: Params_ZoneComAddressEntry): unknown;
    fromPartial(object: DeepPartial<Params_ZoneComAddressEntry>): Params_ZoneComAddressEntry;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
