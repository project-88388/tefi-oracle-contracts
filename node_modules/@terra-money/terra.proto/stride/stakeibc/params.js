"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params_ZoneComAddressEntry = exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.stakeibc";
const baseParams = {
    rewardsInterval: long_1.default.UZERO,
    delegateInterval: long_1.default.UZERO,
    depositInterval: long_1.default.UZERO,
    redemptionRateInterval: long_1.default.UZERO,
    strideCommission: long_1.default.UZERO,
    reinvestInterval: long_1.default.UZERO,
    validatorRebalancingThreshold: long_1.default.UZERO,
    icaTimeoutNanos: long_1.default.UZERO,
    bufferSize: long_1.default.UZERO,
    ibcTimeoutBlocks: long_1.default.UZERO,
    feeTransferTimeoutNanos: long_1.default.UZERO,
    maxStakeIcaCallsPerEpoch: long_1.default.UZERO,
    safetyMinRedemptionRateThreshold: long_1.default.UZERO,
    safetyMaxRedemptionRateThreshold: long_1.default.UZERO,
    ibcTransferTimeoutNanos: long_1.default.UZERO,
    safetyNumValidators: long_1.default.UZERO,
    safetyMaxSlashPercent: long_1.default.UZERO,
};
exports.Params = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.rewardsInterval.isZero()) {
            writer.uint32(8).uint64(message.rewardsInterval);
        }
        if (!message.delegateInterval.isZero()) {
            writer.uint32(48).uint64(message.delegateInterval);
        }
        if (!message.depositInterval.isZero()) {
            writer.uint32(16).uint64(message.depositInterval);
        }
        if (!message.redemptionRateInterval.isZero()) {
            writer.uint32(24).uint64(message.redemptionRateInterval);
        }
        if (!message.strideCommission.isZero()) {
            writer.uint32(32).uint64(message.strideCommission);
        }
        Object.entries(message.zoneComAddress).forEach(([key, value]) => {
            exports.Params_ZoneComAddressEntry.encode({ key: key, value }, writer.uint32(42).fork()).ldelim();
        });
        if (!message.reinvestInterval.isZero()) {
            writer.uint32(56).uint64(message.reinvestInterval);
        }
        if (!message.validatorRebalancingThreshold.isZero()) {
            writer.uint32(64).uint64(message.validatorRebalancingThreshold);
        }
        if (!message.icaTimeoutNanos.isZero()) {
            writer.uint32(72).uint64(message.icaTimeoutNanos);
        }
        if (!message.bufferSize.isZero()) {
            writer.uint32(80).uint64(message.bufferSize);
        }
        if (!message.ibcTimeoutBlocks.isZero()) {
            writer.uint32(88).uint64(message.ibcTimeoutBlocks);
        }
        if (!message.feeTransferTimeoutNanos.isZero()) {
            writer.uint32(96).uint64(message.feeTransferTimeoutNanos);
        }
        if (!message.maxStakeIcaCallsPerEpoch.isZero()) {
            writer.uint32(104).uint64(message.maxStakeIcaCallsPerEpoch);
        }
        if (!message.safetyMinRedemptionRateThreshold.isZero()) {
            writer.uint32(112).uint64(message.safetyMinRedemptionRateThreshold);
        }
        if (!message.safetyMaxRedemptionRateThreshold.isZero()) {
            writer.uint32(120).uint64(message.safetyMaxRedemptionRateThreshold);
        }
        if (!message.ibcTransferTimeoutNanos.isZero()) {
            writer.uint32(128).uint64(message.ibcTransferTimeoutNanos);
        }
        if (!message.safetyNumValidators.isZero()) {
            writer.uint32(136).uint64(message.safetyNumValidators);
        }
        if (!message.safetyMaxSlashPercent.isZero()) {
            writer.uint32(144).uint64(message.safetyMaxSlashPercent);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams);
        message.zoneComAddress = {};
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rewardsInterval = reader.uint64();
                    break;
                case 6:
                    message.delegateInterval = reader.uint64();
                    break;
                case 2:
                    message.depositInterval = reader.uint64();
                    break;
                case 3:
                    message.redemptionRateInterval = reader.uint64();
                    break;
                case 4:
                    message.strideCommission = reader.uint64();
                    break;
                case 5:
                    const entry5 = exports.Params_ZoneComAddressEntry.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.zoneComAddress[entry5.key] = entry5.value;
                    }
                    break;
                case 7:
                    message.reinvestInterval = reader.uint64();
                    break;
                case 8:
                    message.validatorRebalancingThreshold = reader.uint64();
                    break;
                case 9:
                    message.icaTimeoutNanos = reader.uint64();
                    break;
                case 10:
                    message.bufferSize = reader.uint64();
                    break;
                case 11:
                    message.ibcTimeoutBlocks = reader.uint64();
                    break;
                case 12:
                    message.feeTransferTimeoutNanos = reader.uint64();
                    break;
                case 13:
                    message.maxStakeIcaCallsPerEpoch = reader.uint64();
                    break;
                case 14:
                    message.safetyMinRedemptionRateThreshold = reader.uint64();
                    break;
                case 15:
                    message.safetyMaxRedemptionRateThreshold = reader.uint64();
                    break;
                case 16:
                    message.ibcTransferTimeoutNanos = reader.uint64();
                    break;
                case 17:
                    message.safetyNumValidators = reader.uint64();
                    break;
                case 18:
                    message.safetyMaxSlashPercent = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams);
        message.zoneComAddress = {};
        if (object.rewardsInterval !== undefined && object.rewardsInterval !== null) {
            message.rewardsInterval = long_1.default.fromString(object.rewardsInterval);
        }
        else {
            message.rewardsInterval = long_1.default.UZERO;
        }
        if (object.delegateInterval !== undefined && object.delegateInterval !== null) {
            message.delegateInterval = long_1.default.fromString(object.delegateInterval);
        }
        else {
            message.delegateInterval = long_1.default.UZERO;
        }
        if (object.depositInterval !== undefined && object.depositInterval !== null) {
            message.depositInterval = long_1.default.fromString(object.depositInterval);
        }
        else {
            message.depositInterval = long_1.default.UZERO;
        }
        if (object.redemptionRateInterval !== undefined && object.redemptionRateInterval !== null) {
            message.redemptionRateInterval = long_1.default.fromString(object.redemptionRateInterval);
        }
        else {
            message.redemptionRateInterval = long_1.default.UZERO;
        }
        if (object.strideCommission !== undefined && object.strideCommission !== null) {
            message.strideCommission = long_1.default.fromString(object.strideCommission);
        }
        else {
            message.strideCommission = long_1.default.UZERO;
        }
        if (object.zoneComAddress !== undefined && object.zoneComAddress !== null) {
            Object.entries(object.zoneComAddress).forEach(([key, value]) => {
                message.zoneComAddress[key] = String(value);
            });
        }
        if (object.reinvestInterval !== undefined && object.reinvestInterval !== null) {
            message.reinvestInterval = long_1.default.fromString(object.reinvestInterval);
        }
        else {
            message.reinvestInterval = long_1.default.UZERO;
        }
        if (object.validatorRebalancingThreshold !== undefined && object.validatorRebalancingThreshold !== null) {
            message.validatorRebalancingThreshold = long_1.default.fromString(object.validatorRebalancingThreshold);
        }
        else {
            message.validatorRebalancingThreshold = long_1.default.UZERO;
        }
        if (object.icaTimeoutNanos !== undefined && object.icaTimeoutNanos !== null) {
            message.icaTimeoutNanos = long_1.default.fromString(object.icaTimeoutNanos);
        }
        else {
            message.icaTimeoutNanos = long_1.default.UZERO;
        }
        if (object.bufferSize !== undefined && object.bufferSize !== null) {
            message.bufferSize = long_1.default.fromString(object.bufferSize);
        }
        else {
            message.bufferSize = long_1.default.UZERO;
        }
        if (object.ibcTimeoutBlocks !== undefined && object.ibcTimeoutBlocks !== null) {
            message.ibcTimeoutBlocks = long_1.default.fromString(object.ibcTimeoutBlocks);
        }
        else {
            message.ibcTimeoutBlocks = long_1.default.UZERO;
        }
        if (object.feeTransferTimeoutNanos !== undefined && object.feeTransferTimeoutNanos !== null) {
            message.feeTransferTimeoutNanos = long_1.default.fromString(object.feeTransferTimeoutNanos);
        }
        else {
            message.feeTransferTimeoutNanos = long_1.default.UZERO;
        }
        if (object.maxStakeIcaCallsPerEpoch !== undefined && object.maxStakeIcaCallsPerEpoch !== null) {
            message.maxStakeIcaCallsPerEpoch = long_1.default.fromString(object.maxStakeIcaCallsPerEpoch);
        }
        else {
            message.maxStakeIcaCallsPerEpoch = long_1.default.UZERO;
        }
        if (object.safetyMinRedemptionRateThreshold !== undefined &&
            object.safetyMinRedemptionRateThreshold !== null) {
            message.safetyMinRedemptionRateThreshold = long_1.default.fromString(object.safetyMinRedemptionRateThreshold);
        }
        else {
            message.safetyMinRedemptionRateThreshold = long_1.default.UZERO;
        }
        if (object.safetyMaxRedemptionRateThreshold !== undefined &&
            object.safetyMaxRedemptionRateThreshold !== null) {
            message.safetyMaxRedemptionRateThreshold = long_1.default.fromString(object.safetyMaxRedemptionRateThreshold);
        }
        else {
            message.safetyMaxRedemptionRateThreshold = long_1.default.UZERO;
        }
        if (object.ibcTransferTimeoutNanos !== undefined && object.ibcTransferTimeoutNanos !== null) {
            message.ibcTransferTimeoutNanos = long_1.default.fromString(object.ibcTransferTimeoutNanos);
        }
        else {
            message.ibcTransferTimeoutNanos = long_1.default.UZERO;
        }
        if (object.safetyNumValidators !== undefined && object.safetyNumValidators !== null) {
            message.safetyNumValidators = long_1.default.fromString(object.safetyNumValidators);
        }
        else {
            message.safetyNumValidators = long_1.default.UZERO;
        }
        if (object.safetyMaxSlashPercent !== undefined && object.safetyMaxSlashPercent !== null) {
            message.safetyMaxSlashPercent = long_1.default.fromString(object.safetyMaxSlashPercent);
        }
        else {
            message.safetyMaxSlashPercent = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.rewardsInterval !== undefined &&
            (obj.rewardsInterval = (message.rewardsInterval || long_1.default.UZERO).toString());
        message.delegateInterval !== undefined &&
            (obj.delegateInterval = (message.delegateInterval || long_1.default.UZERO).toString());
        message.depositInterval !== undefined &&
            (obj.depositInterval = (message.depositInterval || long_1.default.UZERO).toString());
        message.redemptionRateInterval !== undefined &&
            (obj.redemptionRateInterval = (message.redemptionRateInterval || long_1.default.UZERO).toString());
        message.strideCommission !== undefined &&
            (obj.strideCommission = (message.strideCommission || long_1.default.UZERO).toString());
        obj.zoneComAddress = {};
        if (message.zoneComAddress) {
            Object.entries(message.zoneComAddress).forEach(([k, v]) => {
                obj.zoneComAddress[k] = v;
            });
        }
        message.reinvestInterval !== undefined &&
            (obj.reinvestInterval = (message.reinvestInterval || long_1.default.UZERO).toString());
        message.validatorRebalancingThreshold !== undefined &&
            (obj.validatorRebalancingThreshold = (message.validatorRebalancingThreshold || long_1.default.UZERO).toString());
        message.icaTimeoutNanos !== undefined &&
            (obj.icaTimeoutNanos = (message.icaTimeoutNanos || long_1.default.UZERO).toString());
        message.bufferSize !== undefined && (obj.bufferSize = (message.bufferSize || long_1.default.UZERO).toString());
        message.ibcTimeoutBlocks !== undefined &&
            (obj.ibcTimeoutBlocks = (message.ibcTimeoutBlocks || long_1.default.UZERO).toString());
        message.feeTransferTimeoutNanos !== undefined &&
            (obj.feeTransferTimeoutNanos = (message.feeTransferTimeoutNanos || long_1.default.UZERO).toString());
        message.maxStakeIcaCallsPerEpoch !== undefined &&
            (obj.maxStakeIcaCallsPerEpoch = (message.maxStakeIcaCallsPerEpoch || long_1.default.UZERO).toString());
        message.safetyMinRedemptionRateThreshold !== undefined &&
            (obj.safetyMinRedemptionRateThreshold = (message.safetyMinRedemptionRateThreshold || long_1.default.UZERO).toString());
        message.safetyMaxRedemptionRateThreshold !== undefined &&
            (obj.safetyMaxRedemptionRateThreshold = (message.safetyMaxRedemptionRateThreshold || long_1.default.UZERO).toString());
        message.ibcTransferTimeoutNanos !== undefined &&
            (obj.ibcTransferTimeoutNanos = (message.ibcTransferTimeoutNanos || long_1.default.UZERO).toString());
        message.safetyNumValidators !== undefined &&
            (obj.safetyNumValidators = (message.safetyNumValidators || long_1.default.UZERO).toString());
        message.safetyMaxSlashPercent !== undefined &&
            (obj.safetyMaxSlashPercent = (message.safetyMaxSlashPercent || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams);
        message.zoneComAddress = {};
        if (object.rewardsInterval !== undefined && object.rewardsInterval !== null) {
            message.rewardsInterval = object.rewardsInterval;
        }
        else {
            message.rewardsInterval = long_1.default.UZERO;
        }
        if (object.delegateInterval !== undefined && object.delegateInterval !== null) {
            message.delegateInterval = object.delegateInterval;
        }
        else {
            message.delegateInterval = long_1.default.UZERO;
        }
        if (object.depositInterval !== undefined && object.depositInterval !== null) {
            message.depositInterval = object.depositInterval;
        }
        else {
            message.depositInterval = long_1.default.UZERO;
        }
        if (object.redemptionRateInterval !== undefined && object.redemptionRateInterval !== null) {
            message.redemptionRateInterval = object.redemptionRateInterval;
        }
        else {
            message.redemptionRateInterval = long_1.default.UZERO;
        }
        if (object.strideCommission !== undefined && object.strideCommission !== null) {
            message.strideCommission = object.strideCommission;
        }
        else {
            message.strideCommission = long_1.default.UZERO;
        }
        if (object.zoneComAddress !== undefined && object.zoneComAddress !== null) {
            Object.entries(object.zoneComAddress).forEach(([key, value]) => {
                if (value !== undefined) {
                    message.zoneComAddress[key] = String(value);
                }
            });
        }
        if (object.reinvestInterval !== undefined && object.reinvestInterval !== null) {
            message.reinvestInterval = object.reinvestInterval;
        }
        else {
            message.reinvestInterval = long_1.default.UZERO;
        }
        if (object.validatorRebalancingThreshold !== undefined && object.validatorRebalancingThreshold !== null) {
            message.validatorRebalancingThreshold = object.validatorRebalancingThreshold;
        }
        else {
            message.validatorRebalancingThreshold = long_1.default.UZERO;
        }
        if (object.icaTimeoutNanos !== undefined && object.icaTimeoutNanos !== null) {
            message.icaTimeoutNanos = object.icaTimeoutNanos;
        }
        else {
            message.icaTimeoutNanos = long_1.default.UZERO;
        }
        if (object.bufferSize !== undefined && object.bufferSize !== null) {
            message.bufferSize = object.bufferSize;
        }
        else {
            message.bufferSize = long_1.default.UZERO;
        }
        if (object.ibcTimeoutBlocks !== undefined && object.ibcTimeoutBlocks !== null) {
            message.ibcTimeoutBlocks = object.ibcTimeoutBlocks;
        }
        else {
            message.ibcTimeoutBlocks = long_1.default.UZERO;
        }
        if (object.feeTransferTimeoutNanos !== undefined && object.feeTransferTimeoutNanos !== null) {
            message.feeTransferTimeoutNanos = object.feeTransferTimeoutNanos;
        }
        else {
            message.feeTransferTimeoutNanos = long_1.default.UZERO;
        }
        if (object.maxStakeIcaCallsPerEpoch !== undefined && object.maxStakeIcaCallsPerEpoch !== null) {
            message.maxStakeIcaCallsPerEpoch = object.maxStakeIcaCallsPerEpoch;
        }
        else {
            message.maxStakeIcaCallsPerEpoch = long_1.default.UZERO;
        }
        if (object.safetyMinRedemptionRateThreshold !== undefined &&
            object.safetyMinRedemptionRateThreshold !== null) {
            message.safetyMinRedemptionRateThreshold = object.safetyMinRedemptionRateThreshold;
        }
        else {
            message.safetyMinRedemptionRateThreshold = long_1.default.UZERO;
        }
        if (object.safetyMaxRedemptionRateThreshold !== undefined &&
            object.safetyMaxRedemptionRateThreshold !== null) {
            message.safetyMaxRedemptionRateThreshold = object.safetyMaxRedemptionRateThreshold;
        }
        else {
            message.safetyMaxRedemptionRateThreshold = long_1.default.UZERO;
        }
        if (object.ibcTransferTimeoutNanos !== undefined && object.ibcTransferTimeoutNanos !== null) {
            message.ibcTransferTimeoutNanos = object.ibcTransferTimeoutNanos;
        }
        else {
            message.ibcTransferTimeoutNanos = long_1.default.UZERO;
        }
        if (object.safetyNumValidators !== undefined && object.safetyNumValidators !== null) {
            message.safetyNumValidators = object.safetyNumValidators;
        }
        else {
            message.safetyNumValidators = long_1.default.UZERO;
        }
        if (object.safetyMaxSlashPercent !== undefined && object.safetyMaxSlashPercent !== null) {
            message.safetyMaxSlashPercent = object.safetyMaxSlashPercent;
        }
        else {
            message.safetyMaxSlashPercent = long_1.default.UZERO;
        }
        return message;
    },
};
const baseParams_ZoneComAddressEntry = { key: "", value: "" };
exports.Params_ZoneComAddressEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseParams_ZoneComAddressEntry);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseParams_ZoneComAddressEntry);
        if (object.key !== undefined && object.key !== null) {
            message.key = String(object.key);
        }
        else {
            message.key = "";
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = String(object.value);
        }
        else {
            message.value = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseParams_ZoneComAddressEntry);
        if (object.key !== undefined && object.key !== null) {
            message.key = object.key;
        }
        else {
            message.key = "";
        }
        if (object.value !== undefined && object.value !== null) {
            message.value = object.value;
        }
        else {
            message.value = "";
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=params.js.map