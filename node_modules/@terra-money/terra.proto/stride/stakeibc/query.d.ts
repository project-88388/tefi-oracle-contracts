import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { Params } from "../../stride/stakeibc/params";
import { HostZone } from "../../stride/stakeibc/host_zone";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { EpochTracker } from "../../stride/stakeibc/epoch_tracker";
import { Validator } from "../../stride/stakeibc/validator";
export declare const protobufPackage = "stride.stakeibc";
/**
 * QueryInterchainAccountFromAddressRequest is the request type for the
 * Query/InterchainAccountAddress RPC
 */
export interface QueryInterchainAccountFromAddressRequest {
    owner: string;
    connectionId: string;
}
/**
 * QueryInterchainAccountFromAddressResponse the response type for the
 * Query/InterchainAccountAddress RPC
 */
export interface QueryInterchainAccountFromAddressResponse {
    interchainAccountAddress: string;
}
/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}
/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
    /** params holds all the parameters of this module. */
    params?: Params;
}
export interface QueryGetValidatorsRequest {
    chainId: string;
}
export interface QueryGetValidatorsResponse {
    validators: Validator[];
}
export interface QueryGetHostZoneRequest {
    chainId: string;
}
export interface QueryGetHostZoneResponse {
    hostZone?: HostZone;
}
export interface QueryAllHostZoneRequest {
    pagination?: PageRequest;
}
export interface QueryAllHostZoneResponse {
    hostZone: HostZone[];
    pagination?: PageResponse;
}
export interface QueryModuleAddressRequest {
    name: string;
}
export interface QueryModuleAddressResponse {
    addr: string;
}
export interface QueryGetEpochTrackerRequest {
    epochIdentifier: string;
}
export interface QueryGetEpochTrackerResponse {
    epochTracker?: EpochTracker;
}
export interface QueryAllEpochTrackerRequest {
}
export interface QueryAllEpochTrackerResponse {
    epochTracker: EpochTracker[];
}
export interface QueryGetNextPacketSequenceRequest {
    channelId: string;
    portId: string;
}
export interface QueryGetNextPacketSequenceResponse {
    sequence: Long;
}
export declare const QueryInterchainAccountFromAddressRequest: {
    encode(message: QueryInterchainAccountFromAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryInterchainAccountFromAddressRequest;
    fromJSON(object: any): QueryInterchainAccountFromAddressRequest;
    toJSON(message: QueryInterchainAccountFromAddressRequest): unknown;
    fromPartial(object: DeepPartial<QueryInterchainAccountFromAddressRequest>): QueryInterchainAccountFromAddressRequest;
};
export declare const QueryInterchainAccountFromAddressResponse: {
    encode(message: QueryInterchainAccountFromAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryInterchainAccountFromAddressResponse;
    fromJSON(object: any): QueryInterchainAccountFromAddressResponse;
    toJSON(message: QueryInterchainAccountFromAddressResponse): unknown;
    fromPartial(object: DeepPartial<QueryInterchainAccountFromAddressResponse>): QueryInterchainAccountFromAddressResponse;
};
export declare const QueryParamsRequest: {
    encode(_: QueryParamsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsRequest;
    fromJSON(_: any): QueryParamsRequest;
    toJSON(_: QueryParamsRequest): unknown;
    fromPartial(_: DeepPartial<QueryParamsRequest>): QueryParamsRequest;
};
export declare const QueryParamsResponse: {
    encode(message: QueryParamsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryParamsResponse;
    fromJSON(object: any): QueryParamsResponse;
    toJSON(message: QueryParamsResponse): unknown;
    fromPartial(object: DeepPartial<QueryParamsResponse>): QueryParamsResponse;
};
export declare const QueryGetValidatorsRequest: {
    encode(message: QueryGetValidatorsRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetValidatorsRequest;
    fromJSON(object: any): QueryGetValidatorsRequest;
    toJSON(message: QueryGetValidatorsRequest): unknown;
    fromPartial(object: DeepPartial<QueryGetValidatorsRequest>): QueryGetValidatorsRequest;
};
export declare const QueryGetValidatorsResponse: {
    encode(message: QueryGetValidatorsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetValidatorsResponse;
    fromJSON(object: any): QueryGetValidatorsResponse;
    toJSON(message: QueryGetValidatorsResponse): unknown;
    fromPartial(object: DeepPartial<QueryGetValidatorsResponse>): QueryGetValidatorsResponse;
};
export declare const QueryGetHostZoneRequest: {
    encode(message: QueryGetHostZoneRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetHostZoneRequest;
    fromJSON(object: any): QueryGetHostZoneRequest;
    toJSON(message: QueryGetHostZoneRequest): unknown;
    fromPartial(object: DeepPartial<QueryGetHostZoneRequest>): QueryGetHostZoneRequest;
};
export declare const QueryGetHostZoneResponse: {
    encode(message: QueryGetHostZoneResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetHostZoneResponse;
    fromJSON(object: any): QueryGetHostZoneResponse;
    toJSON(message: QueryGetHostZoneResponse): unknown;
    fromPartial(object: DeepPartial<QueryGetHostZoneResponse>): QueryGetHostZoneResponse;
};
export declare const QueryAllHostZoneRequest: {
    encode(message: QueryAllHostZoneRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllHostZoneRequest;
    fromJSON(object: any): QueryAllHostZoneRequest;
    toJSON(message: QueryAllHostZoneRequest): unknown;
    fromPartial(object: DeepPartial<QueryAllHostZoneRequest>): QueryAllHostZoneRequest;
};
export declare const QueryAllHostZoneResponse: {
    encode(message: QueryAllHostZoneResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllHostZoneResponse;
    fromJSON(object: any): QueryAllHostZoneResponse;
    toJSON(message: QueryAllHostZoneResponse): unknown;
    fromPartial(object: DeepPartial<QueryAllHostZoneResponse>): QueryAllHostZoneResponse;
};
export declare const QueryModuleAddressRequest: {
    encode(message: QueryModuleAddressRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryModuleAddressRequest;
    fromJSON(object: any): QueryModuleAddressRequest;
    toJSON(message: QueryModuleAddressRequest): unknown;
    fromPartial(object: DeepPartial<QueryModuleAddressRequest>): QueryModuleAddressRequest;
};
export declare const QueryModuleAddressResponse: {
    encode(message: QueryModuleAddressResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryModuleAddressResponse;
    fromJSON(object: any): QueryModuleAddressResponse;
    toJSON(message: QueryModuleAddressResponse): unknown;
    fromPartial(object: DeepPartial<QueryModuleAddressResponse>): QueryModuleAddressResponse;
};
export declare const QueryGetEpochTrackerRequest: {
    encode(message: QueryGetEpochTrackerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetEpochTrackerRequest;
    fromJSON(object: any): QueryGetEpochTrackerRequest;
    toJSON(message: QueryGetEpochTrackerRequest): unknown;
    fromPartial(object: DeepPartial<QueryGetEpochTrackerRequest>): QueryGetEpochTrackerRequest;
};
export declare const QueryGetEpochTrackerResponse: {
    encode(message: QueryGetEpochTrackerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetEpochTrackerResponse;
    fromJSON(object: any): QueryGetEpochTrackerResponse;
    toJSON(message: QueryGetEpochTrackerResponse): unknown;
    fromPartial(object: DeepPartial<QueryGetEpochTrackerResponse>): QueryGetEpochTrackerResponse;
};
export declare const QueryAllEpochTrackerRequest: {
    encode(_: QueryAllEpochTrackerRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllEpochTrackerRequest;
    fromJSON(_: any): QueryAllEpochTrackerRequest;
    toJSON(_: QueryAllEpochTrackerRequest): unknown;
    fromPartial(_: DeepPartial<QueryAllEpochTrackerRequest>): QueryAllEpochTrackerRequest;
};
export declare const QueryAllEpochTrackerResponse: {
    encode(message: QueryAllEpochTrackerResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryAllEpochTrackerResponse;
    fromJSON(object: any): QueryAllEpochTrackerResponse;
    toJSON(message: QueryAllEpochTrackerResponse): unknown;
    fromPartial(object: DeepPartial<QueryAllEpochTrackerResponse>): QueryAllEpochTrackerResponse;
};
export declare const QueryGetNextPacketSequenceRequest: {
    encode(message: QueryGetNextPacketSequenceRequest, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetNextPacketSequenceRequest;
    fromJSON(object: any): QueryGetNextPacketSequenceRequest;
    toJSON(message: QueryGetNextPacketSequenceRequest): unknown;
    fromPartial(object: DeepPartial<QueryGetNextPacketSequenceRequest>): QueryGetNextPacketSequenceRequest;
};
export declare const QueryGetNextPacketSequenceResponse: {
    encode(message: QueryGetNextPacketSequenceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): QueryGetNextPacketSequenceResponse;
    fromJSON(object: any): QueryGetNextPacketSequenceResponse;
    toJSON(message: QueryGetNextPacketSequenceResponse): unknown;
    fromPartial(object: DeepPartial<QueryGetNextPacketSequenceResponse>): QueryGetNextPacketSequenceResponse;
};
/** Query defines the gRPC querier service. */
export interface Query {
    /** Parameters queries the parameters of the module. */
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    /** Queries a Validator by host zone. */
    Validators(request: DeepPartial<QueryGetValidatorsRequest>, metadata?: grpc.Metadata): Promise<QueryGetValidatorsResponse>;
    /** Queries a HostZone by id. */
    HostZone(request: DeepPartial<QueryGetHostZoneRequest>, metadata?: grpc.Metadata): Promise<QueryGetHostZoneResponse>;
    /** Queries a list of HostZone items. */
    HostZoneAll(request: DeepPartial<QueryAllHostZoneRequest>, metadata?: grpc.Metadata): Promise<QueryAllHostZoneResponse>;
    /** Queries a list of ModuleAddress items. */
    ModuleAddress(request: DeepPartial<QueryModuleAddressRequest>, metadata?: grpc.Metadata): Promise<QueryModuleAddressResponse>;
    /**
     * QueryInterchainAccountFromAddress returns the interchain account for given
     * owner address on a given connection pair
     */
    InterchainAccountFromAddress(request: DeepPartial<QueryInterchainAccountFromAddressRequest>, metadata?: grpc.Metadata): Promise<QueryInterchainAccountFromAddressResponse>;
    /** Queries a EpochTracker by index. */
    EpochTracker(request: DeepPartial<QueryGetEpochTrackerRequest>, metadata?: grpc.Metadata): Promise<QueryGetEpochTrackerResponse>;
    /** Queries a list of EpochTracker items. */
    EpochTrackerAll(request: DeepPartial<QueryAllEpochTrackerRequest>, metadata?: grpc.Metadata): Promise<QueryAllEpochTrackerResponse>;
    /** Queries the next packet sequence for one for a given channel */
    NextPacketSequence(request: DeepPartial<QueryGetNextPacketSequenceRequest>, metadata?: grpc.Metadata): Promise<QueryGetNextPacketSequenceResponse>;
}
export declare class QueryClientImpl implements Query {
    private readonly rpc;
    constructor(rpc: Rpc);
    Params(request: DeepPartial<QueryParamsRequest>, metadata?: grpc.Metadata): Promise<QueryParamsResponse>;
    Validators(request: DeepPartial<QueryGetValidatorsRequest>, metadata?: grpc.Metadata): Promise<QueryGetValidatorsResponse>;
    HostZone(request: DeepPartial<QueryGetHostZoneRequest>, metadata?: grpc.Metadata): Promise<QueryGetHostZoneResponse>;
    HostZoneAll(request: DeepPartial<QueryAllHostZoneRequest>, metadata?: grpc.Metadata): Promise<QueryAllHostZoneResponse>;
    ModuleAddress(request: DeepPartial<QueryModuleAddressRequest>, metadata?: grpc.Metadata): Promise<QueryModuleAddressResponse>;
    InterchainAccountFromAddress(request: DeepPartial<QueryInterchainAccountFromAddressRequest>, metadata?: grpc.Metadata): Promise<QueryInterchainAccountFromAddressResponse>;
    EpochTracker(request: DeepPartial<QueryGetEpochTrackerRequest>, metadata?: grpc.Metadata): Promise<QueryGetEpochTrackerResponse>;
    EpochTrackerAll(request: DeepPartial<QueryAllEpochTrackerRequest>, metadata?: grpc.Metadata): Promise<QueryAllEpochTrackerResponse>;
    NextPacketSequence(request: DeepPartial<QueryGetNextPacketSequenceRequest>, metadata?: grpc.Metadata): Promise<QueryGetNextPacketSequenceResponse>;
}
export declare const QueryDesc: {
    serviceName: string;
};
export declare const QueryParamsDesc: UnaryMethodDefinitionish;
export declare const QueryValidatorsDesc: UnaryMethodDefinitionish;
export declare const QueryHostZoneDesc: UnaryMethodDefinitionish;
export declare const QueryHostZoneAllDesc: UnaryMethodDefinitionish;
export declare const QueryModuleAddressDesc: UnaryMethodDefinitionish;
export declare const QueryInterchainAccountFromAddressDesc: UnaryMethodDefinitionish;
export declare const QueryEpochTrackerDesc: UnaryMethodDefinitionish;
export declare const QueryEpochTrackerAllDesc: UnaryMethodDefinitionish;
export declare const QueryNextPacketSequenceDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
