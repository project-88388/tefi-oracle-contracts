"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GrpcWebImpl = exports.QueryNextPacketSequenceDesc = exports.QueryEpochTrackerAllDesc = exports.QueryEpochTrackerDesc = exports.QueryInterchainAccountFromAddressDesc = exports.QueryModuleAddressDesc = exports.QueryHostZoneAllDesc = exports.QueryHostZoneDesc = exports.QueryValidatorsDesc = exports.QueryParamsDesc = exports.QueryDesc = exports.QueryClientImpl = exports.QueryGetNextPacketSequenceResponse = exports.QueryGetNextPacketSequenceRequest = exports.QueryAllEpochTrackerResponse = exports.QueryAllEpochTrackerRequest = exports.QueryGetEpochTrackerResponse = exports.QueryGetEpochTrackerRequest = exports.QueryModuleAddressResponse = exports.QueryModuleAddressRequest = exports.QueryAllHostZoneResponse = exports.QueryAllHostZoneRequest = exports.QueryGetHostZoneResponse = exports.QueryGetHostZoneRequest = exports.QueryGetValidatorsResponse = exports.QueryGetValidatorsRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.QueryInterchainAccountFromAddressResponse = exports.QueryInterchainAccountFromAddressRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const grpc_web_1 = require("@improbable-eng/grpc-web");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
const params_1 = require("../../stride/stakeibc/params");
const host_zone_1 = require("../../stride/stakeibc/host_zone");
const pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
const epoch_tracker_1 = require("../../stride/stakeibc/epoch_tracker");
const browser_headers_1 = require("browser-headers");
const validator_1 = require("../../stride/stakeibc/validator");
exports.protobufPackage = "stride.stakeibc";
const baseQueryInterchainAccountFromAddressRequest = { owner: "", connectionId: "" };
exports.QueryInterchainAccountFromAddressRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.owner !== "") {
            writer.uint32(10).string(message.owner);
        }
        if (message.connectionId !== "") {
            writer.uint32(18).string(message.connectionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.owner = reader.string();
                    break;
                case 2:
                    message.connectionId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressRequest);
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = String(object.owner);
        }
        else {
            message.owner = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = String(object.connectionId);
        }
        else {
            message.connectionId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.owner !== undefined && (obj.owner = message.owner);
        message.connectionId !== undefined && (obj.connectionId = message.connectionId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressRequest);
        if (object.owner !== undefined && object.owner !== null) {
            message.owner = object.owner;
        }
        else {
            message.owner = "";
        }
        if (object.connectionId !== undefined && object.connectionId !== null) {
            message.connectionId = object.connectionId;
        }
        else {
            message.connectionId = "";
        }
        return message;
    },
};
const baseQueryInterchainAccountFromAddressResponse = { interchainAccountAddress: "" };
exports.QueryInterchainAccountFromAddressResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.interchainAccountAddress !== "") {
            writer.uint32(10).string(message.interchainAccountAddress);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.interchainAccountAddress = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressResponse);
        if (object.interchainAccountAddress !== undefined && object.interchainAccountAddress !== null) {
            message.interchainAccountAddress = String(object.interchainAccountAddress);
        }
        else {
            message.interchainAccountAddress = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.interchainAccountAddress !== undefined &&
            (obj.interchainAccountAddress = message.interchainAccountAddress);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryInterchainAccountFromAddressResponse);
        if (object.interchainAccountAddress !== undefined && object.interchainAccountAddress !== null) {
            message.interchainAccountAddress = object.interchainAccountAddress;
        }
        else {
            message.interchainAccountAddress = "";
        }
        return message;
    },
};
const baseQueryParamsRequest = {};
exports.QueryParamsRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryParamsRequest);
        return message;
    },
};
const baseQueryParamsResponse = {};
exports.QueryParamsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryParamsResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromJSON(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryParamsResponse);
        if (object.params !== undefined && object.params !== null) {
            message.params = params_1.Params.fromPartial(object.params);
        }
        else {
            message.params = undefined;
        }
        return message;
    },
};
const baseQueryGetValidatorsRequest = { chainId: "" };
exports.QueryGetValidatorsRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetValidatorsRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetValidatorsRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetValidatorsRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        return message;
    },
};
const baseQueryGetValidatorsResponse = {};
exports.QueryGetValidatorsResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.validators) {
            validator_1.Validator.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetValidatorsResponse);
        message.validators = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validators.push(validator_1.Validator.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetValidatorsResponse);
        message.validators = [];
        if (object.validators !== undefined && object.validators !== null) {
            for (const e of object.validators) {
                message.validators.push(validator_1.Validator.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.validators) {
            obj.validators = message.validators.map((e) => (e ? validator_1.Validator.toJSON(e) : undefined));
        }
        else {
            obj.validators = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetValidatorsResponse);
        message.validators = [];
        if (object.validators !== undefined && object.validators !== null) {
            for (const e of object.validators) {
                message.validators.push(validator_1.Validator.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryGetHostZoneRequest = { chainId: "" };
exports.QueryGetHostZoneRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.chainId !== "") {
            writer.uint32(10).string(message.chainId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetHostZoneRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chainId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetHostZoneRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = String(object.chainId);
        }
        else {
            message.chainId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.chainId !== undefined && (obj.chainId = message.chainId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetHostZoneRequest);
        if (object.chainId !== undefined && object.chainId !== null) {
            message.chainId = object.chainId;
        }
        else {
            message.chainId = "";
        }
        return message;
    },
};
const baseQueryGetHostZoneResponse = {};
exports.QueryGetHostZoneResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.hostZone !== undefined) {
            host_zone_1.HostZone.encode(message.hostZone, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetHostZoneResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hostZone = host_zone_1.HostZone.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetHostZoneResponse);
        if (object.hostZone !== undefined && object.hostZone !== null) {
            message.hostZone = host_zone_1.HostZone.fromJSON(object.hostZone);
        }
        else {
            message.hostZone = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.hostZone !== undefined &&
            (obj.hostZone = message.hostZone ? host_zone_1.HostZone.toJSON(message.hostZone) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetHostZoneResponse);
        if (object.hostZone !== undefined && object.hostZone !== null) {
            message.hostZone = host_zone_1.HostZone.fromPartial(object.hostZone);
        }
        else {
            message.hostZone = undefined;
        }
        return message;
    },
};
const baseQueryAllHostZoneRequest = {};
exports.QueryAllHostZoneRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllHostZoneRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllHostZoneRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllHostZoneRequest);
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageRequest.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryAllHostZoneResponse = {};
exports.QueryAllHostZoneResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.hostZone) {
            host_zone_1.HostZone.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllHostZoneResponse);
        message.hostZone = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.hostZone.push(host_zone_1.HostZone.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllHostZoneResponse);
        message.hostZone = [];
        if (object.hostZone !== undefined && object.hostZone !== null) {
            for (const e of object.hostZone) {
                message.hostZone.push(host_zone_1.HostZone.fromJSON(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromJSON(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.hostZone) {
            obj.hostZone = message.hostZone.map((e) => (e ? host_zone_1.HostZone.toJSON(e) : undefined));
        }
        else {
            obj.hostZone = [];
        }
        message.pagination !== undefined &&
            (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllHostZoneResponse);
        message.hostZone = [];
        if (object.hostZone !== undefined && object.hostZone !== null) {
            for (const e of object.hostZone) {
                message.hostZone.push(host_zone_1.HostZone.fromPartial(e));
            }
        }
        if (object.pagination !== undefined && object.pagination !== null) {
            message.pagination = pagination_1.PageResponse.fromPartial(object.pagination);
        }
        else {
            message.pagination = undefined;
        }
        return message;
    },
};
const baseQueryModuleAddressRequest = { name: "" };
exports.QueryModuleAddressRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryModuleAddressRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryModuleAddressRequest);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryModuleAddressRequest);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        return message;
    },
};
const baseQueryModuleAddressResponse = { addr: "" };
exports.QueryModuleAddressResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.addr !== "") {
            writer.uint32(10).string(message.addr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryModuleAddressResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.addr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryModuleAddressResponse);
        if (object.addr !== undefined && object.addr !== null) {
            message.addr = String(object.addr);
        }
        else {
            message.addr = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.addr !== undefined && (obj.addr = message.addr);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryModuleAddressResponse);
        if (object.addr !== undefined && object.addr !== null) {
            message.addr = object.addr;
        }
        else {
            message.addr = "";
        }
        return message;
    },
};
const baseQueryGetEpochTrackerRequest = { epochIdentifier: "" };
exports.QueryGetEpochTrackerRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochIdentifier !== "") {
            writer.uint32(10).string(message.epochIdentifier);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetEpochTrackerRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochIdentifier = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetEpochTrackerRequest);
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = String(object.epochIdentifier);
        }
        else {
            message.epochIdentifier = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochIdentifier !== undefined && (obj.epochIdentifier = message.epochIdentifier);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetEpochTrackerRequest);
        if (object.epochIdentifier !== undefined && object.epochIdentifier !== null) {
            message.epochIdentifier = object.epochIdentifier;
        }
        else {
            message.epochIdentifier = "";
        }
        return message;
    },
};
const baseQueryGetEpochTrackerResponse = {};
exports.QueryGetEpochTrackerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.epochTracker !== undefined) {
            epoch_tracker_1.EpochTracker.encode(message.epochTracker, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetEpochTrackerResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochTracker = epoch_tracker_1.EpochTracker.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetEpochTrackerResponse);
        if (object.epochTracker !== undefined && object.epochTracker !== null) {
            message.epochTracker = epoch_tracker_1.EpochTracker.fromJSON(object.epochTracker);
        }
        else {
            message.epochTracker = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.epochTracker !== undefined &&
            (obj.epochTracker = message.epochTracker ? epoch_tracker_1.EpochTracker.toJSON(message.epochTracker) : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetEpochTrackerResponse);
        if (object.epochTracker !== undefined && object.epochTracker !== null) {
            message.epochTracker = epoch_tracker_1.EpochTracker.fromPartial(object.epochTracker);
        }
        else {
            message.epochTracker = undefined;
        }
        return message;
    },
};
const baseQueryAllEpochTrackerRequest = {};
exports.QueryAllEpochTrackerRequest = {
    encode(_, writer = minimal_1.default.Writer.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllEpochTrackerRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(_) {
        const message = Object.assign({}, baseQueryAllEpochTrackerRequest);
        return message;
    },
    toJSON(_) {
        const obj = {};
        return obj;
    },
    fromPartial(_) {
        const message = Object.assign({}, baseQueryAllEpochTrackerRequest);
        return message;
    },
};
const baseQueryAllEpochTrackerResponse = {};
exports.QueryAllEpochTrackerResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        for (const v of message.epochTracker) {
            epoch_tracker_1.EpochTracker.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryAllEpochTrackerResponse);
        message.epochTracker = [];
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochTracker.push(epoch_tracker_1.EpochTracker.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryAllEpochTrackerResponse);
        message.epochTracker = [];
        if (object.epochTracker !== undefined && object.epochTracker !== null) {
            for (const e of object.epochTracker) {
                message.epochTracker.push(epoch_tracker_1.EpochTracker.fromJSON(e));
            }
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        if (message.epochTracker) {
            obj.epochTracker = message.epochTracker.map((e) => (e ? epoch_tracker_1.EpochTracker.toJSON(e) : undefined));
        }
        else {
            obj.epochTracker = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryAllEpochTrackerResponse);
        message.epochTracker = [];
        if (object.epochTracker !== undefined && object.epochTracker !== null) {
            for (const e of object.epochTracker) {
                message.epochTracker.push(epoch_tracker_1.EpochTracker.fromPartial(e));
            }
        }
        return message;
    },
};
const baseQueryGetNextPacketSequenceRequest = { channelId: "", portId: "" };
exports.QueryGetNextPacketSequenceRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.channelId !== "") {
            writer.uint32(10).string(message.channelId);
        }
        if (message.portId !== "") {
            writer.uint32(18).string(message.portId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetNextPacketSequenceRequest);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.channelId = reader.string();
                    break;
                case 2:
                    message.portId = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetNextPacketSequenceRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = String(object.channelId);
        }
        else {
            message.channelId = "";
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = String(object.portId);
        }
        else {
            message.portId = "";
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.channelId !== undefined && (obj.channelId = message.channelId);
        message.portId !== undefined && (obj.portId = message.portId);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetNextPacketSequenceRequest);
        if (object.channelId !== undefined && object.channelId !== null) {
            message.channelId = object.channelId;
        }
        else {
            message.channelId = "";
        }
        if (object.portId !== undefined && object.portId !== null) {
            message.portId = object.portId;
        }
        else {
            message.portId = "";
        }
        return message;
    },
};
const baseQueryGetNextPacketSequenceResponse = { sequence: long_1.default.UZERO };
exports.QueryGetNextPacketSequenceResponse = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (!message.sequence.isZero()) {
            writer.uint32(8).uint64(message.sequence);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseQueryGetNextPacketSequenceResponse);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sequence = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseQueryGetNextPacketSequenceResponse);
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = long_1.default.fromString(object.sequence);
        }
        else {
            message.sequence = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.sequence !== undefined && (obj.sequence = (message.sequence || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseQueryGetNextPacketSequenceResponse);
        if (object.sequence !== undefined && object.sequence !== null) {
            message.sequence = object.sequence;
        }
        else {
            message.sequence = long_1.default.UZERO;
        }
        return message;
    },
};
class QueryClientImpl {
    constructor(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.Validators = this.Validators.bind(this);
        this.HostZone = this.HostZone.bind(this);
        this.HostZoneAll = this.HostZoneAll.bind(this);
        this.ModuleAddress = this.ModuleAddress.bind(this);
        this.InterchainAccountFromAddress = this.InterchainAccountFromAddress.bind(this);
        this.EpochTracker = this.EpochTracker.bind(this);
        this.EpochTrackerAll = this.EpochTrackerAll.bind(this);
        this.NextPacketSequence = this.NextPacketSequence.bind(this);
    }
    Params(request, metadata) {
        return this.rpc.unary(exports.QueryParamsDesc, exports.QueryParamsRequest.fromPartial(request), metadata);
    }
    Validators(request, metadata) {
        return this.rpc.unary(exports.QueryValidatorsDesc, exports.QueryGetValidatorsRequest.fromPartial(request), metadata);
    }
    HostZone(request, metadata) {
        return this.rpc.unary(exports.QueryHostZoneDesc, exports.QueryGetHostZoneRequest.fromPartial(request), metadata);
    }
    HostZoneAll(request, metadata) {
        return this.rpc.unary(exports.QueryHostZoneAllDesc, exports.QueryAllHostZoneRequest.fromPartial(request), metadata);
    }
    ModuleAddress(request, metadata) {
        return this.rpc.unary(exports.QueryModuleAddressDesc, exports.QueryModuleAddressRequest.fromPartial(request), metadata);
    }
    InterchainAccountFromAddress(request, metadata) {
        return this.rpc.unary(exports.QueryInterchainAccountFromAddressDesc, exports.QueryInterchainAccountFromAddressRequest.fromPartial(request), metadata);
    }
    EpochTracker(request, metadata) {
        return this.rpc.unary(exports.QueryEpochTrackerDesc, exports.QueryGetEpochTrackerRequest.fromPartial(request), metadata);
    }
    EpochTrackerAll(request, metadata) {
        return this.rpc.unary(exports.QueryEpochTrackerAllDesc, exports.QueryAllEpochTrackerRequest.fromPartial(request), metadata);
    }
    NextPacketSequence(request, metadata) {
        return this.rpc.unary(exports.QueryNextPacketSequenceDesc, exports.QueryGetNextPacketSequenceRequest.fromPartial(request), metadata);
    }
}
exports.QueryClientImpl = QueryClientImpl;
exports.QueryDesc = {
    serviceName: "stride.stakeibc.Query",
};
exports.QueryParamsDesc = {
    methodName: "Params",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryParamsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryParamsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryValidatorsDesc = {
    methodName: "Validators",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetValidatorsRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetValidatorsResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryHostZoneDesc = {
    methodName: "HostZone",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetHostZoneRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetHostZoneResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryHostZoneAllDesc = {
    methodName: "HostZoneAll",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllHostZoneRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllHostZoneResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryModuleAddressDesc = {
    methodName: "ModuleAddress",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryModuleAddressRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryModuleAddressResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryInterchainAccountFromAddressDesc = {
    methodName: "InterchainAccountFromAddress",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryInterchainAccountFromAddressRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryInterchainAccountFromAddressResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryEpochTrackerDesc = {
    methodName: "EpochTracker",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetEpochTrackerRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetEpochTrackerResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryEpochTrackerAllDesc = {
    methodName: "EpochTrackerAll",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryAllEpochTrackerRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryAllEpochTrackerResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
exports.QueryNextPacketSequenceDesc = {
    methodName: "NextPacketSequence",
    service: exports.QueryDesc,
    requestStream: false,
    responseStream: false,
    requestType: {
        serializeBinary() {
            return exports.QueryGetNextPacketSequenceRequest.encode(this).finish();
        },
    },
    responseType: {
        deserializeBinary(data) {
            return Object.assign(Object.assign({}, exports.QueryGetNextPacketSequenceResponse.decode(data)), { toObject() {
                    return this;
                } });
        },
    },
};
class GrpcWebImpl {
    constructor(host, options) {
        this.host = host;
        this.options = options;
    }
    unary(methodDesc, _request, metadata) {
        var _a;
        const request = Object.assign(Object.assign({}, _request), methodDesc.requestType);
        const maybeCombinedMetadata = metadata && this.options.metadata
            ? new browser_headers_1.BrowserHeaders(Object.assign(Object.assign({}, (_a = this.options) === null || _a === void 0 ? void 0 : _a.metadata.headersMap), metadata === null || metadata === void 0 ? void 0 : metadata.headersMap))
            : metadata || this.options.metadata;
        return new Promise((resolve, reject) => {
            grpc_web_1.grpc.unary(methodDesc, {
                request,
                host: this.host,
                metadata: maybeCombinedMetadata,
                transport: this.options.transport,
                debug: this.options.debug,
                onEnd: function (response) {
                    if (response.status === grpc_web_1.grpc.Code.OK) {
                        resolve(response.message);
                    }
                    else {
                        const err = new Error(response.statusMessage);
                        err.code = response.status;
                        err.metadata = response.trailers;
                        reject(err);
                    }
                },
            });
        });
    }
}
exports.GrpcWebImpl = GrpcWebImpl;
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=query.js.map