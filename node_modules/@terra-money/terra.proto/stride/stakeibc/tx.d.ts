import Long from "long";
import { grpc } from "@improbable-eng/grpc-web";
import _m0 from "protobufjs/minimal";
import { ICAAccountType } from "../../stride/stakeibc/ica_account";
export declare const protobufPackage = "stride.stakeibc";
export interface MsgLiquidStake {
    creator: string;
    amount: string;
    /** TODO(TEST-86): Update Denom -> HostDenom */
    hostDenom: string;
}
export interface MsgLiquidStakeResponse {
}
export interface MsgClearBalance {
    creator: string;
    chainId: string;
    amount: string;
    channel: string;
}
export interface MsgClearBalanceResponse {
}
export interface MsgRedeemStake {
    creator: string;
    amount: string;
    hostZone: string;
    receiver: string;
}
export interface MsgRedeemStakeResponse {
}
/** next: 13 */
export interface MsgRegisterHostZone {
    connectionId: string;
    bech32prefix: string;
    hostDenom: string;
    ibcDenom: string;
    creator: string;
    transferChannelId: string;
    unbondingFrequency: Long;
}
/**
 * TODO(TEST-53): Remove this pre-launch (no need for clients to create /
 * interact with ICAs)
 */
export interface MsgRegisterHostZoneResponse {
}
export interface MsgClaimUndelegatedTokens {
    creator: string;
    /** UserUnbondingRecords are keyed on {chain_id}.{epoch}.{sender} */
    hostZoneId: string;
    epoch: Long;
    sender: string;
}
export interface MsgClaimUndelegatedTokensResponse {
}
export interface MsgRebalanceValidators {
    creator: string;
    hostZone: string;
    numRebalance: Long;
}
export interface MsgRebalanceValidatorsResponse {
}
export interface MsgAddValidator {
    creator: string;
    hostZone: string;
    name: string;
    address: string;
    commission: Long;
    weight: Long;
}
export interface MsgAddValidatorResponse {
}
export interface MsgChangeValidatorWeight {
    creator: string;
    hostZone: string;
    valAddr: string;
    weight: Long;
}
export interface MsgChangeValidatorWeightResponse {
}
export interface MsgDeleteValidator {
    creator: string;
    hostZone: string;
    valAddr: string;
}
export interface MsgDeleteValidatorResponse {
}
export interface MsgRestoreInterchainAccount {
    creator: string;
    chainId: string;
    accountType: ICAAccountType;
}
export interface MsgRestoreInterchainAccountResponse {
}
export interface MsgUpdateValidatorSharesExchRate {
    creator: string;
    chainId: string;
    valoper: string;
}
export interface MsgUpdateValidatorSharesExchRateResponse {
}
export declare const MsgLiquidStake: {
    encode(message: MsgLiquidStake, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgLiquidStake;
    fromJSON(object: any): MsgLiquidStake;
    toJSON(message: MsgLiquidStake): unknown;
    fromPartial(object: DeepPartial<MsgLiquidStake>): MsgLiquidStake;
};
export declare const MsgLiquidStakeResponse: {
    encode(_: MsgLiquidStakeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgLiquidStakeResponse;
    fromJSON(_: any): MsgLiquidStakeResponse;
    toJSON(_: MsgLiquidStakeResponse): unknown;
    fromPartial(_: DeepPartial<MsgLiquidStakeResponse>): MsgLiquidStakeResponse;
};
export declare const MsgClearBalance: {
    encode(message: MsgClearBalance, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClearBalance;
    fromJSON(object: any): MsgClearBalance;
    toJSON(message: MsgClearBalance): unknown;
    fromPartial(object: DeepPartial<MsgClearBalance>): MsgClearBalance;
};
export declare const MsgClearBalanceResponse: {
    encode(_: MsgClearBalanceResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClearBalanceResponse;
    fromJSON(_: any): MsgClearBalanceResponse;
    toJSON(_: MsgClearBalanceResponse): unknown;
    fromPartial(_: DeepPartial<MsgClearBalanceResponse>): MsgClearBalanceResponse;
};
export declare const MsgRedeemStake: {
    encode(message: MsgRedeemStake, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedeemStake;
    fromJSON(object: any): MsgRedeemStake;
    toJSON(message: MsgRedeemStake): unknown;
    fromPartial(object: DeepPartial<MsgRedeemStake>): MsgRedeemStake;
};
export declare const MsgRedeemStakeResponse: {
    encode(_: MsgRedeemStakeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRedeemStakeResponse;
    fromJSON(_: any): MsgRedeemStakeResponse;
    toJSON(_: MsgRedeemStakeResponse): unknown;
    fromPartial(_: DeepPartial<MsgRedeemStakeResponse>): MsgRedeemStakeResponse;
};
export declare const MsgRegisterHostZone: {
    encode(message: MsgRegisterHostZone, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRegisterHostZone;
    fromJSON(object: any): MsgRegisterHostZone;
    toJSON(message: MsgRegisterHostZone): unknown;
    fromPartial(object: DeepPartial<MsgRegisterHostZone>): MsgRegisterHostZone;
};
export declare const MsgRegisterHostZoneResponse: {
    encode(_: MsgRegisterHostZoneResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRegisterHostZoneResponse;
    fromJSON(_: any): MsgRegisterHostZoneResponse;
    toJSON(_: MsgRegisterHostZoneResponse): unknown;
    fromPartial(_: DeepPartial<MsgRegisterHostZoneResponse>): MsgRegisterHostZoneResponse;
};
export declare const MsgClaimUndelegatedTokens: {
    encode(message: MsgClaimUndelegatedTokens, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimUndelegatedTokens;
    fromJSON(object: any): MsgClaimUndelegatedTokens;
    toJSON(message: MsgClaimUndelegatedTokens): unknown;
    fromPartial(object: DeepPartial<MsgClaimUndelegatedTokens>): MsgClaimUndelegatedTokens;
};
export declare const MsgClaimUndelegatedTokensResponse: {
    encode(_: MsgClaimUndelegatedTokensResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgClaimUndelegatedTokensResponse;
    fromJSON(_: any): MsgClaimUndelegatedTokensResponse;
    toJSON(_: MsgClaimUndelegatedTokensResponse): unknown;
    fromPartial(_: DeepPartial<MsgClaimUndelegatedTokensResponse>): MsgClaimUndelegatedTokensResponse;
};
export declare const MsgRebalanceValidators: {
    encode(message: MsgRebalanceValidators, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRebalanceValidators;
    fromJSON(object: any): MsgRebalanceValidators;
    toJSON(message: MsgRebalanceValidators): unknown;
    fromPartial(object: DeepPartial<MsgRebalanceValidators>): MsgRebalanceValidators;
};
export declare const MsgRebalanceValidatorsResponse: {
    encode(_: MsgRebalanceValidatorsResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRebalanceValidatorsResponse;
    fromJSON(_: any): MsgRebalanceValidatorsResponse;
    toJSON(_: MsgRebalanceValidatorsResponse): unknown;
    fromPartial(_: DeepPartial<MsgRebalanceValidatorsResponse>): MsgRebalanceValidatorsResponse;
};
export declare const MsgAddValidator: {
    encode(message: MsgAddValidator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgAddValidator;
    fromJSON(object: any): MsgAddValidator;
    toJSON(message: MsgAddValidator): unknown;
    fromPartial(object: DeepPartial<MsgAddValidator>): MsgAddValidator;
};
export declare const MsgAddValidatorResponse: {
    encode(_: MsgAddValidatorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgAddValidatorResponse;
    fromJSON(_: any): MsgAddValidatorResponse;
    toJSON(_: MsgAddValidatorResponse): unknown;
    fromPartial(_: DeepPartial<MsgAddValidatorResponse>): MsgAddValidatorResponse;
};
export declare const MsgChangeValidatorWeight: {
    encode(message: MsgChangeValidatorWeight, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgChangeValidatorWeight;
    fromJSON(object: any): MsgChangeValidatorWeight;
    toJSON(message: MsgChangeValidatorWeight): unknown;
    fromPartial(object: DeepPartial<MsgChangeValidatorWeight>): MsgChangeValidatorWeight;
};
export declare const MsgChangeValidatorWeightResponse: {
    encode(_: MsgChangeValidatorWeightResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgChangeValidatorWeightResponse;
    fromJSON(_: any): MsgChangeValidatorWeightResponse;
    toJSON(_: MsgChangeValidatorWeightResponse): unknown;
    fromPartial(_: DeepPartial<MsgChangeValidatorWeightResponse>): MsgChangeValidatorWeightResponse;
};
export declare const MsgDeleteValidator: {
    encode(message: MsgDeleteValidator, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeleteValidator;
    fromJSON(object: any): MsgDeleteValidator;
    toJSON(message: MsgDeleteValidator): unknown;
    fromPartial(object: DeepPartial<MsgDeleteValidator>): MsgDeleteValidator;
};
export declare const MsgDeleteValidatorResponse: {
    encode(_: MsgDeleteValidatorResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgDeleteValidatorResponse;
    fromJSON(_: any): MsgDeleteValidatorResponse;
    toJSON(_: MsgDeleteValidatorResponse): unknown;
    fromPartial(_: DeepPartial<MsgDeleteValidatorResponse>): MsgDeleteValidatorResponse;
};
export declare const MsgRestoreInterchainAccount: {
    encode(message: MsgRestoreInterchainAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRestoreInterchainAccount;
    fromJSON(object: any): MsgRestoreInterchainAccount;
    toJSON(message: MsgRestoreInterchainAccount): unknown;
    fromPartial(object: DeepPartial<MsgRestoreInterchainAccount>): MsgRestoreInterchainAccount;
};
export declare const MsgRestoreInterchainAccountResponse: {
    encode(_: MsgRestoreInterchainAccountResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgRestoreInterchainAccountResponse;
    fromJSON(_: any): MsgRestoreInterchainAccountResponse;
    toJSON(_: MsgRestoreInterchainAccountResponse): unknown;
    fromPartial(_: DeepPartial<MsgRestoreInterchainAccountResponse>): MsgRestoreInterchainAccountResponse;
};
export declare const MsgUpdateValidatorSharesExchRate: {
    encode(message: MsgUpdateValidatorSharesExchRate, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUpdateValidatorSharesExchRate;
    fromJSON(object: any): MsgUpdateValidatorSharesExchRate;
    toJSON(message: MsgUpdateValidatorSharesExchRate): unknown;
    fromPartial(object: DeepPartial<MsgUpdateValidatorSharesExchRate>): MsgUpdateValidatorSharesExchRate;
};
export declare const MsgUpdateValidatorSharesExchRateResponse: {
    encode(_: MsgUpdateValidatorSharesExchRateResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number | undefined): MsgUpdateValidatorSharesExchRateResponse;
    fromJSON(_: any): MsgUpdateValidatorSharesExchRateResponse;
    toJSON(_: MsgUpdateValidatorSharesExchRateResponse): unknown;
    fromPartial(_: DeepPartial<MsgUpdateValidatorSharesExchRateResponse>): MsgUpdateValidatorSharesExchRateResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    LiquidStake(request: DeepPartial<MsgLiquidStake>, metadata?: grpc.Metadata): Promise<MsgLiquidStakeResponse>;
    RedeemStake(request: DeepPartial<MsgRedeemStake>, metadata?: grpc.Metadata): Promise<MsgRedeemStakeResponse>;
    /**
     * TODO(TEST-53): Remove this pre-launch (no need for clients to create /
     * interact with ICAs)
     */
    RegisterHostZone(request: DeepPartial<MsgRegisterHostZone>, metadata?: grpc.Metadata): Promise<MsgRegisterHostZoneResponse>;
    ClaimUndelegatedTokens(request: DeepPartial<MsgClaimUndelegatedTokens>, metadata?: grpc.Metadata): Promise<MsgClaimUndelegatedTokensResponse>;
    RebalanceValidators(request: DeepPartial<MsgRebalanceValidators>, metadata?: grpc.Metadata): Promise<MsgRebalanceValidatorsResponse>;
    AddValidator(request: DeepPartial<MsgAddValidator>, metadata?: grpc.Metadata): Promise<MsgAddValidatorResponse>;
    ChangeValidatorWeight(request: DeepPartial<MsgChangeValidatorWeight>, metadata?: grpc.Metadata): Promise<MsgChangeValidatorWeightResponse>;
    DeleteValidator(request: DeepPartial<MsgDeleteValidator>, metadata?: grpc.Metadata): Promise<MsgDeleteValidatorResponse>;
    RestoreInterchainAccount(request: DeepPartial<MsgRestoreInterchainAccount>, metadata?: grpc.Metadata): Promise<MsgRestoreInterchainAccountResponse>;
    UpdateValidatorSharesExchRate(request: DeepPartial<MsgUpdateValidatorSharesExchRate>, metadata?: grpc.Metadata): Promise<MsgUpdateValidatorSharesExchRateResponse>;
    /** this line is used by starport scaffolding # proto/tx/rpc */
    ClearBalance(request: DeepPartial<MsgClearBalance>, metadata?: grpc.Metadata): Promise<MsgClearBalanceResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    LiquidStake(request: DeepPartial<MsgLiquidStake>, metadata?: grpc.Metadata): Promise<MsgLiquidStakeResponse>;
    RedeemStake(request: DeepPartial<MsgRedeemStake>, metadata?: grpc.Metadata): Promise<MsgRedeemStakeResponse>;
    RegisterHostZone(request: DeepPartial<MsgRegisterHostZone>, metadata?: grpc.Metadata): Promise<MsgRegisterHostZoneResponse>;
    ClaimUndelegatedTokens(request: DeepPartial<MsgClaimUndelegatedTokens>, metadata?: grpc.Metadata): Promise<MsgClaimUndelegatedTokensResponse>;
    RebalanceValidators(request: DeepPartial<MsgRebalanceValidators>, metadata?: grpc.Metadata): Promise<MsgRebalanceValidatorsResponse>;
    AddValidator(request: DeepPartial<MsgAddValidator>, metadata?: grpc.Metadata): Promise<MsgAddValidatorResponse>;
    ChangeValidatorWeight(request: DeepPartial<MsgChangeValidatorWeight>, metadata?: grpc.Metadata): Promise<MsgChangeValidatorWeightResponse>;
    DeleteValidator(request: DeepPartial<MsgDeleteValidator>, metadata?: grpc.Metadata): Promise<MsgDeleteValidatorResponse>;
    RestoreInterchainAccount(request: DeepPartial<MsgRestoreInterchainAccount>, metadata?: grpc.Metadata): Promise<MsgRestoreInterchainAccountResponse>;
    UpdateValidatorSharesExchRate(request: DeepPartial<MsgUpdateValidatorSharesExchRate>, metadata?: grpc.Metadata): Promise<MsgUpdateValidatorSharesExchRateResponse>;
    ClearBalance(request: DeepPartial<MsgClearBalance>, metadata?: grpc.Metadata): Promise<MsgClearBalanceResponse>;
}
export declare const MsgDesc: {
    serviceName: string;
};
export declare const MsgLiquidStakeDesc: UnaryMethodDefinitionish;
export declare const MsgRedeemStakeDesc: UnaryMethodDefinitionish;
export declare const MsgRegisterHostZoneDesc: UnaryMethodDefinitionish;
export declare const MsgClaimUndelegatedTokensDesc: UnaryMethodDefinitionish;
export declare const MsgRebalanceValidatorsDesc: UnaryMethodDefinitionish;
export declare const MsgAddValidatorDesc: UnaryMethodDefinitionish;
export declare const MsgChangeValidatorWeightDesc: UnaryMethodDefinitionish;
export declare const MsgDeleteValidatorDesc: UnaryMethodDefinitionish;
export declare const MsgRestoreInterchainAccountDesc: UnaryMethodDefinitionish;
export declare const MsgUpdateValidatorSharesExchRateDesc: UnaryMethodDefinitionish;
export declare const MsgClearBalanceDesc: UnaryMethodDefinitionish;
interface UnaryMethodDefinitionishR extends grpc.UnaryMethodDefinition<any, any> {
    requestStream: any;
    responseStream: any;
}
declare type UnaryMethodDefinitionish = UnaryMethodDefinitionishR;
interface Rpc {
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
export declare class GrpcWebImpl {
    private host;
    private options;
    constructor(host: string, options: {
        transport?: grpc.TransportFactory;
        debug?: boolean;
        metadata?: grpc.Metadata;
    });
    unary<T extends UnaryMethodDefinitionish>(methodDesc: T, _request: any, metadata: grpc.Metadata | undefined): Promise<any>;
}
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined | Long;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
export {};
