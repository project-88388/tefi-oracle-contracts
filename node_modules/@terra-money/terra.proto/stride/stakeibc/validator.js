"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Validator = exports.ValidatorExchangeRate = exports.validator_ValidatorStatusToJSON = exports.validator_ValidatorStatusFromJSON = exports.Validator_ValidatorStatus = exports.protobufPackage = void 0;
/* eslint-disable */
const long_1 = __importDefault(require("long"));
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "stride.stakeibc";
var Validator_ValidatorStatus;
(function (Validator_ValidatorStatus) {
    Validator_ValidatorStatus[Validator_ValidatorStatus["ACTIVE"] = 0] = "ACTIVE";
    Validator_ValidatorStatus[Validator_ValidatorStatus["INACTIVE"] = 1] = "INACTIVE";
    Validator_ValidatorStatus[Validator_ValidatorStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Validator_ValidatorStatus = exports.Validator_ValidatorStatus || (exports.Validator_ValidatorStatus = {}));
function validator_ValidatorStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "ACTIVE":
            return Validator_ValidatorStatus.ACTIVE;
        case 1:
        case "INACTIVE":
            return Validator_ValidatorStatus.INACTIVE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Validator_ValidatorStatus.UNRECOGNIZED;
    }
}
exports.validator_ValidatorStatusFromJSON = validator_ValidatorStatusFromJSON;
function validator_ValidatorStatusToJSON(object) {
    switch (object) {
        case Validator_ValidatorStatus.ACTIVE:
            return "ACTIVE";
        case Validator_ValidatorStatus.INACTIVE:
            return "INACTIVE";
        default:
            return "UNKNOWN";
    }
}
exports.validator_ValidatorStatusToJSON = validator_ValidatorStatusToJSON;
const baseValidatorExchangeRate = { internalTokensToSharesRate: "", epochNumber: long_1.default.UZERO };
exports.ValidatorExchangeRate = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.internalTokensToSharesRate !== "") {
            writer.uint32(10).string(message.internalTokensToSharesRate);
        }
        if (!message.epochNumber.isZero()) {
            writer.uint32(16).uint64(message.epochNumber);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseValidatorExchangeRate);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.internalTokensToSharesRate = reader.string();
                    break;
                case 2:
                    message.epochNumber = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseValidatorExchangeRate);
        if (object.internalTokensToSharesRate !== undefined && object.internalTokensToSharesRate !== null) {
            message.internalTokensToSharesRate = String(object.internalTokensToSharesRate);
        }
        else {
            message.internalTokensToSharesRate = "";
        }
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = long_1.default.fromString(object.epochNumber);
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.internalTokensToSharesRate !== undefined &&
            (obj.internalTokensToSharesRate = message.internalTokensToSharesRate);
        message.epochNumber !== undefined && (obj.epochNumber = (message.epochNumber || long_1.default.UZERO).toString());
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseValidatorExchangeRate);
        if (object.internalTokensToSharesRate !== undefined && object.internalTokensToSharesRate !== null) {
            message.internalTokensToSharesRate = object.internalTokensToSharesRate;
        }
        else {
            message.internalTokensToSharesRate = "";
        }
        if (object.epochNumber !== undefined && object.epochNumber !== null) {
            message.epochNumber = object.epochNumber;
        }
        else {
            message.epochNumber = long_1.default.UZERO;
        }
        return message;
    },
};
const baseValidator = {
    name: "",
    address: "",
    status: 0,
    commissionRate: long_1.default.UZERO,
    delegationAmt: "",
    weight: long_1.default.UZERO,
};
exports.Validator = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.address !== "") {
            writer.uint32(18).string(message.address);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (!message.commissionRate.isZero()) {
            writer.uint32(32).uint64(message.commissionRate);
        }
        if (message.delegationAmt !== "") {
            writer.uint32(42).string(message.delegationAmt);
        }
        if (!message.weight.isZero()) {
            writer.uint32(48).uint64(message.weight);
        }
        if (message.internalExchangeRate !== undefined) {
            exports.ValidatorExchangeRate.encode(message.internalExchangeRate, writer.uint32(58).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = Object.assign({}, baseValidator);
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.name = reader.string();
                    break;
                case 2:
                    message.address = reader.string();
                    break;
                case 3:
                    message.status = reader.int32();
                    break;
                case 4:
                    message.commissionRate = reader.uint64();
                    break;
                case 5:
                    message.delegationAmt = reader.string();
                    break;
                case 6:
                    message.weight = reader.uint64();
                    break;
                case 7:
                    message.internalExchangeRate = exports.ValidatorExchangeRate.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        const message = Object.assign({}, baseValidator);
        if (object.name !== undefined && object.name !== null) {
            message.name = String(object.name);
        }
        else {
            message.name = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = String(object.address);
        }
        else {
            message.address = "";
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = validator_ValidatorStatusFromJSON(object.status);
        }
        else {
            message.status = 0;
        }
        if (object.commissionRate !== undefined && object.commissionRate !== null) {
            message.commissionRate = long_1.default.fromString(object.commissionRate);
        }
        else {
            message.commissionRate = long_1.default.UZERO;
        }
        if (object.delegationAmt !== undefined && object.delegationAmt !== null) {
            message.delegationAmt = String(object.delegationAmt);
        }
        else {
            message.delegationAmt = "";
        }
        if (object.weight !== undefined && object.weight !== null) {
            message.weight = long_1.default.fromString(object.weight);
        }
        else {
            message.weight = long_1.default.UZERO;
        }
        if (object.internalExchangeRate !== undefined && object.internalExchangeRate !== null) {
            message.internalExchangeRate = exports.ValidatorExchangeRate.fromJSON(object.internalExchangeRate);
        }
        else {
            message.internalExchangeRate = undefined;
        }
        return message;
    },
    toJSON(message) {
        const obj = {};
        message.name !== undefined && (obj.name = message.name);
        message.address !== undefined && (obj.address = message.address);
        message.status !== undefined && (obj.status = validator_ValidatorStatusToJSON(message.status));
        message.commissionRate !== undefined &&
            (obj.commissionRate = (message.commissionRate || long_1.default.UZERO).toString());
        message.delegationAmt !== undefined && (obj.delegationAmt = message.delegationAmt);
        message.weight !== undefined && (obj.weight = (message.weight || long_1.default.UZERO).toString());
        message.internalExchangeRate !== undefined &&
            (obj.internalExchangeRate = message.internalExchangeRate
                ? exports.ValidatorExchangeRate.toJSON(message.internalExchangeRate)
                : undefined);
        return obj;
    },
    fromPartial(object) {
        const message = Object.assign({}, baseValidator);
        if (object.name !== undefined && object.name !== null) {
            message.name = object.name;
        }
        else {
            message.name = "";
        }
        if (object.address !== undefined && object.address !== null) {
            message.address = object.address;
        }
        else {
            message.address = "";
        }
        if (object.status !== undefined && object.status !== null) {
            message.status = object.status;
        }
        else {
            message.status = 0;
        }
        if (object.commissionRate !== undefined && object.commissionRate !== null) {
            message.commissionRate = object.commissionRate;
        }
        else {
            message.commissionRate = long_1.default.UZERO;
        }
        if (object.delegationAmt !== undefined && object.delegationAmt !== null) {
            message.delegationAmt = object.delegationAmt;
        }
        else {
            message.delegationAmt = "";
        }
        if (object.weight !== undefined && object.weight !== null) {
            message.weight = object.weight;
        }
        else {
            message.weight = long_1.default.UZERO;
        }
        if (object.internalExchangeRate !== undefined && object.internalExchangeRate !== null) {
            message.internalExchangeRate = exports.ValidatorExchangeRate.fromPartial(object.internalExchangeRate);
        }
        else {
            message.internalExchangeRate = undefined;
        }
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
//# sourceMappingURL=validator.js.map